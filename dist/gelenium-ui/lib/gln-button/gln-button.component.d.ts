import { AfterContentInit, ElementRef, EventEmitter, InjectionToken, OnChanges, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { GlnTouchRippleComponent } from '../gln-touch-ripple/gln-touch-ripple.component';
import { GlnButtonConfig } from './gln-button-config.interface';
import { GlnLinkDirective } from './gln-link.directive';
import * as i0 from "@angular/core";
export declare const GLN_BUTTON_CONFIG: InjectionToken<GlnButtonConfig>;
export declare class GlnButtonComponent implements OnChanges, OnInit, AfterContentInit {
    private platformId;
    private rootConfig;
    hostRef: ElementRef<HTMLElement>;
    private renderer;
    id: string;
    config: GlnButtonConfig | null | undefined;
    exterior: string | null | undefined;
    frameSize: string | null | undefined;
    isDisabled: string | boolean | null | undefined;
    isNoRipple: string | boolean | null | undefined;
    ornamLfAlign: string | null | undefined;
    ornamRgAlign: string | null | undefined;
    readonly focused: EventEmitter<void>;
    readonly blured: EventEmitter<void>;
    buttonElementRef: ElementRef<HTMLElement> | null;
    touchRipple: GlnTouchRippleComponent | null;
    linkElement: GlnLinkDirective | null;
    defaultFrameSize: number;
    currConfig: GlnButtonConfig | null;
    disabled: boolean | null;
    isFocused: boolean;
    constructor(platformId: Object, rootConfig: GlnButtonConfig | null, hostRef: ElementRef<HTMLElement>, renderer: Renderer2);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    doClick(event: MouseEvent): void;
    focus(): void;
    doFocus(): void;
    doBlur(): void;
    getBoolean(value: string | boolean | null | undefined): boolean | null;
    private focusState;
    static ɵfac: i0.ɵɵFactoryDeclaration<GlnButtonComponent, [null, { optional: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GlnButtonComponent, "gln-button", ["glnButton"], { "id": "id"; "config": "config"; "exterior": "exterior"; "frameSize": "frameSize"; "isDisabled": "isDisabled"; "isNoRipple": "isNoRipple"; "ornamLfAlign": "ornamLfAlign"; "ornamRgAlign": "ornamRgAlign"; }, { "focused": "focused"; "blured": "blured"; }, ["linkElement"], ["*", "a", "[gln-orn-lf]", "[gln-orn-rg]"], false>;
}
