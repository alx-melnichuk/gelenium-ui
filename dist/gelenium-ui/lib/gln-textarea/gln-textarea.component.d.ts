import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, NgZone, OnChanges, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { AbstractControl, AsyncValidatorFn, ControlValueAccessor, FormControl, FormGroup, ValidationErrors, Validator, ValidatorFn } from '@angular/forms';
import { GlnNodeInternalValidator } from '../directives/gln-regex/gln-node-internal-validator.interface';
import { GlnBasisFrame } from '../_classes/gln-basis-frame.class';
import { GlnFrameConfig } from '../gln-frame/gln-frame-config.interface';
import * as i0 from "@angular/core";
export declare const GLN_TEXTAREA_CONFIG: InjectionToken<GlnFrameConfig>;
export declare class GlnTextareaComponent extends GlnBasisFrame implements OnChanges, OnInit, AfterContentInit, ControlValueAccessor, Validator, GlnNodeInternalValidator {
    private platformId;
    private rootConfig;
    autoComplete: string;
    cntCols: number | null | undefined;
    cntRows: number | null | undefined;
    config: GlnFrameConfig | null | undefined;
    exterior: string | null | undefined;
    frameSize: string | null | undefined;
    helperText: string | null | undefined;
    label: string | null | undefined;
    maxLength: number | null | undefined;
    maxRows: number | null | undefined;
    minLength: number | null | undefined;
    minRows: number | null | undefined;
    ornamLfAlign: string | null | undefined;
    ornamRgAlign: string | null | undefined;
    tabIndex: number;
    wdFull: string | null | undefined;
    readonly focused: EventEmitter<void>;
    readonly blured: EventEmitter<void>;
    textareaElementRef: ElementRef | null;
    currConfig: GlnFrameConfig | null;
    currentRows: number;
    formControl: FormControl;
    formGroup: FormGroup;
    frameSizeDefault: number;
    isFocused: boolean;
    isFilled: boolean;
    constructor(platformId: Object, changeDetectorRef: ChangeDetectorRef, rootConfig: GlnFrameConfig | null, hostRef: ElementRef<HTMLElement>, renderer: Renderer2, ngZone: NgZone);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    validate(control: AbstractControl): ValidationErrors | null;
    addValidators(validators: ValidatorFn | ValidatorFn[]): void;
    addAsyncValidators(validators: AsyncValidatorFn | AsyncValidatorFn[]): void;
    focus(): void;
    doFocus(): void;
    doBlur(): void;
    doInput(event: Event): void;
    private prepareFormGroup;
    private focusState;
    private getCurrentRows;
    private getNumberLines;
    static ɵfac: i0.ɵɵFactoryDeclaration<GlnTextareaComponent, [null, null, { optional: true; }, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GlnTextareaComponent, "gln-textarea", ["glnTextarea"], { "autoComplete": "autoComplete"; "cntCols": "cntCols"; "cntRows": "cntRows"; "config": "config"; "exterior": "exterior"; "frameSize": "frameSize"; "helperText": "helperText"; "label": "label"; "maxLength": "maxLength"; "maxRows": "maxRows"; "minLength": "minLength"; "minRows": "minRows"; "ornamLfAlign": "ornamLfAlign"; "ornamRgAlign": "ornamRgAlign"; "tabIndex": "tabIndex"; "wdFull": "wdFull"; }, { "focused": "focused"; "blured": "blured"; }, never, ["[gln-orn-lf]", "[gln-orn-rg]"], false>;
}
