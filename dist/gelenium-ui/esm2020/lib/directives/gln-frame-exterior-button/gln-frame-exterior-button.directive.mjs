import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { GlnButtonExterior, GlnButtonExteriorUtil } from '../../gln-button/gln-button-exterior.interface';
import { HtmlElemUtil } from '../../_utils/html-elem.util';
import { NumberUtil } from '../../_utils/number.util';
import * as i0 from "@angular/core";
export class GlnFrameExteriorButtonDirective {
    constructor(hostRef, renderer) {
        this.hostRef = hostRef;
        this.renderer = renderer;
        this.glnFrameExteriorButtonChange = new EventEmitter();
        this.exterior = null;
        this.elementRef = this.hostRef;
        // ** Implementation of the GlnSizePrepareData interface. (start) **
        this.getExterior = () => {
            return this.glnFrameExteriorButton || null;
        };
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        this.getBorderRadius = (frameSizeValue, lineHeight) => {
            const borderRadiusRatio = 0.1;
            return (frameSizeValue > 0 ? NumberUtil.roundTo100(borderRadiusRatio * frameSizeValue) : 0) + 'px';
        };
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        this.getPaddingHor = (frameSizeValue, lineHeight) => {
            const ratio = this.exterior === GlnButtonExterior.contained ? 0.3636 : this.exterior === GlnButtonExterior.outlined ? 0.3409 : 0.2045;
            const value = frameSizeValue > 0 ? NumberUtil.roundTo100(ratio * frameSizeValue) : null;
            return value !== null ? { left: value, right: value } : null;
        };
        this.getPaddingVer = (frameSizeValue, lineHeight) => {
            const param = frameSizeValue > 0 && lineHeight > 0 ? (frameSizeValue - lineHeight) / 2 : null;
            const value = param === null ? null : this.exterior === GlnButtonExterior.outlined ? param - 1 : param;
            return value !== null ? { top: value, bottom: value } : null;
        };
    }
    ngOnChanges(changes) {
        if (changes['glnFrameExteriorButtonElementRef']) {
            this.elementRef = this.glnFrameExteriorButtonElementRef || this.hostRef;
        }
        if (changes['glnFrameExteriorButton']) {
            const exteriorInp = GlnButtonExteriorUtil.convert(this.glnFrameExteriorButton || null);
            const exterior = GlnButtonExteriorUtil.create(exteriorInp);
            if (this.exterior !== exterior) {
                this.exterior = exterior;
                this.settingExterior(this.renderer, this.elementRef, exterior);
            }
            this.glnFrameExteriorButtonChange.emit();
        }
    }
    // ** Implementation of the GlnSizePrepareData interface. (finish) **
    // ** Private API **
    settingExterior(renderer, elem, exterior) {
        HtmlElemUtil.setClass(renderer, elem, 'glnbt-text', GlnButtonExteriorUtil.isText(exterior));
        HtmlElemUtil.setAttr(renderer, elem, 'ext-t', GlnButtonExteriorUtil.isText(exterior) ? '' : null);
        HtmlElemUtil.setClass(renderer, elem, 'glnbt-contained', GlnButtonExteriorUtil.isContained(exterior));
        HtmlElemUtil.setAttr(renderer, elem, 'ext-c', GlnButtonExteriorUtil.isContained(exterior) ? '' : null);
        HtmlElemUtil.setClass(renderer, elem, 'glnbt-outlined', GlnButtonExteriorUtil.isOutlined(exterior));
        HtmlElemUtil.setAttr(renderer, elem, 'ext-o', GlnButtonExteriorUtil.isOutlined(exterior) ? '' : null);
    }
}
GlnFrameExteriorButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.2", ngImport: i0, type: GlnFrameExteriorButtonDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
GlnFrameExteriorButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.1.2", type: GlnFrameExteriorButtonDirective, selector: "[glnFrameExteriorButton]", inputs: { glnFrameExteriorButton: "glnFrameExteriorButton", glnFrameExteriorButtonElementRef: "glnFrameExteriorButtonElementRef" }, outputs: { glnFrameExteriorButtonChange: "glnFrameExteriorButtonChange" }, exportAs: ["glnFrameExteriorButton"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.2", ngImport: i0, type: GlnFrameExteriorButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[glnFrameExteriorButton]',
                    exportAs: 'glnFrameExteriorButton',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { glnFrameExteriorButton: [{
                type: Input
            }], glnFrameExteriorButtonElementRef: [{
                type: Input
            }], glnFrameExteriorButtonChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,