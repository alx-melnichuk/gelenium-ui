export const NAME_NUMERIC = '#numeric';
export const REGEXP_NUMERIC = '^-?(\\d+)$';
export const NAME_NUMERIC_EXP = '#numeric-exp';
export const REGEXP_NUMERIC_EXP = '^-?[\\d.]+(?:e-?\\d*)?$';
export const NAME_NUMERIC12_2 = '#numeric12_2';
export const REGEXP_NUMERIC12_2 = '^-?(\\d{1,12}(\\.\\d{0,2})?|\\.\\d{0,2})$';
export const REGEXP_REAL_NUMERIC = '^-?(\\d+(\\.\\d*)?|\\.\\d*)$';
export class GlnRegexMatchUtil {
    static create(value) {
        let result = value ? value : null;
        const realNumeric = GlnRegexMatchUtil.isRealNumeric(value || '');
        if (value) {
            switch (value) {
                case NAME_NUMERIC:
                    result = REGEXP_NUMERIC;
                    break;
                case NAME_NUMERIC_EXP:
                    result = REGEXP_NUMERIC_EXP;
                    break;
                case NAME_NUMERIC12_2:
                    result = REGEXP_NUMERIC12_2;
                    break;
                case !realNumeric ? '!' + value : value:
                    result = REGEXP_REAL_NUMERIC;
                    if (realNumeric != null) {
                        const dimension = realNumeric.dimension;
                        const accuracy = realNumeric.accuracy;
                        if (dimension !== -1 && accuracy === -1) {
                            result = `^-?\\d{1,${dimension}}$`;
                        }
                        else if (dimension !== -1 && accuracy !== -1) {
                            result = `^-?(\\d{1,${dimension}}(\\.\\d{0,${accuracy}})?|\\.\\d{0,${accuracy}})$`;
                        }
                        else if (dimension === -1 && accuracy !== -1) {
                            result = `^-?(\\d+(\\.\\d{0,${accuracy}})?|\\.\\d{0,${accuracy}})$`;
                        }
                    }
                    break;
            }
        }
        return result;
    }
    static isRealNumeric(value) {
        let result = null;
        if (value && value.startsWith(NAME_NUMERIC)) {
            const valueText = value.substring(NAME_NUMERIC.length);
            const start = valueText.indexOf('(');
            const finish = valueText.indexOf(')');
            if (start !== -1 && start < finish) {
                const data = valueText.substring(start + 1, finish);
                const idx = data.indexOf(',');
                const separator = idx !== -1 ? idx : data.length;
                const dimension = Number(data.substring(0, separator)) || -1;
                const accuracy = Number(data.substring(separator + 1)) || -1;
                result = { dimension, accuracy };
            }
        }
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xuLXJlZ2V4LW1hdGNoLmludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2dlbGVuaXVtLXVpL3NyYy9saWIvZGlyZWN0aXZlcy9nbG4tcmVnZXgvZ2xuLXJlZ2V4LW1hdGNoLmludGVyZmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxZQUFZLENBQUM7QUFFM0MsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsY0FBYyxDQUFDO0FBQy9DLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLHlCQUF5QixDQUFDO0FBRTVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLGNBQWMsQ0FBQztBQUMvQyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRywyQ0FBMkMsQ0FBQztBQUU5RSxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyw4QkFBOEIsQ0FBQztBQUVsRSxNQUFNLE9BQU8saUJBQWlCO0lBQ3JCLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBb0I7UUFDdkMsSUFBSSxNQUFNLEdBQWtCLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDakQsTUFBTSxXQUFXLEdBQUcsaUJBQWlCLENBQUMsYUFBYSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNqRSxJQUFJLEtBQUssRUFBRTtZQUNULFFBQVEsS0FBSyxFQUFFO2dCQUNiLEtBQUssWUFBWTtvQkFDZixNQUFNLEdBQUcsY0FBYyxDQUFDO29CQUN4QixNQUFNO2dCQUNSLEtBQUssZ0JBQWdCO29CQUNuQixNQUFNLEdBQUcsa0JBQWtCLENBQUM7b0JBQzVCLE1BQU07Z0JBQ1IsS0FBSyxnQkFBZ0I7b0JBQ25CLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQztvQkFDNUIsTUFBTTtnQkFDUixLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLO29CQUNyQyxNQUFNLEdBQUcsbUJBQW1CLENBQUM7b0JBQzdCLElBQUksV0FBVyxJQUFJLElBQUksRUFBRTt3QkFDdkIsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQzt3QkFDeEMsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQzt3QkFDdEMsSUFBSSxTQUFTLEtBQUssQ0FBQyxDQUFDLElBQUksUUFBUSxLQUFLLENBQUMsQ0FBQyxFQUFFOzRCQUN2QyxNQUFNLEdBQUcsWUFBWSxTQUFTLElBQUksQ0FBQzt5QkFDcEM7NkJBQU0sSUFBSSxTQUFTLEtBQUssQ0FBQyxDQUFDLElBQUksUUFBUSxLQUFLLENBQUMsQ0FBQyxFQUFFOzRCQUM5QyxNQUFNLEdBQUcsYUFBYSxTQUFTLGNBQWMsUUFBUSxnQkFBZ0IsUUFBUSxLQUFLLENBQUM7eUJBQ3BGOzZCQUFNLElBQUksU0FBUyxLQUFLLENBQUMsQ0FBQyxJQUFJLFFBQVEsS0FBSyxDQUFDLENBQUMsRUFBRTs0QkFDOUMsTUFBTSxHQUFHLHFCQUFxQixRQUFRLGdCQUFnQixRQUFRLEtBQUssQ0FBQzt5QkFDckU7cUJBQ0Y7b0JBQ0QsTUFBTTthQUNUO1NBQ0Y7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBQ00sTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFhO1FBQ3ZDLElBQUksTUFBTSxHQUFtRCxJQUFJLENBQUM7UUFDbEUsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUMzQyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN2RCxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxHQUFHLE1BQU0sRUFBRTtnQkFDbEMsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUNwRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM5QixNQUFNLFNBQVMsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztnQkFDakQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzdELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUM3RCxNQUFNLEdBQUcsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLENBQUM7YUFDbEM7U0FDRjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBOQU1FX05VTUVSSUMgPSAnI251bWVyaWMnO1xuZXhwb3J0IGNvbnN0IFJFR0VYUF9OVU1FUklDID0gJ14tPyhcXFxcZCspJCc7XG5cbmV4cG9ydCBjb25zdCBOQU1FX05VTUVSSUNfRVhQID0gJyNudW1lcmljLWV4cCc7XG5leHBvcnQgY29uc3QgUkVHRVhQX05VTUVSSUNfRVhQID0gJ14tP1tcXFxcZC5dKyg/OmUtP1xcXFxkKik/JCc7XG5cbmV4cG9ydCBjb25zdCBOQU1FX05VTUVSSUMxMl8yID0gJyNudW1lcmljMTJfMic7XG5leHBvcnQgY29uc3QgUkVHRVhQX05VTUVSSUMxMl8yID0gJ14tPyhcXFxcZHsxLDEyfShcXFxcLlxcXFxkezAsMn0pP3xcXFxcLlxcXFxkezAsMn0pJCc7XG5cbmV4cG9ydCBjb25zdCBSRUdFWFBfUkVBTF9OVU1FUklDID0gJ14tPyhcXFxcZCsoXFxcXC5cXFxcZCopP3xcXFxcLlxcXFxkKikkJztcblxuZXhwb3J0IGNsYXNzIEdsblJlZ2V4TWF0Y2hVdGlsIHtcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUodmFsdWU6IHN0cmluZyB8IG51bGwpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBsZXQgcmVzdWx0OiBzdHJpbmcgfCBudWxsID0gdmFsdWUgPyB2YWx1ZSA6IG51bGw7XG4gICAgY29uc3QgcmVhbE51bWVyaWMgPSBHbG5SZWdleE1hdGNoVXRpbC5pc1JlYWxOdW1lcmljKHZhbHVlIHx8ICcnKTtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgY2FzZSBOQU1FX05VTUVSSUM6XG4gICAgICAgICAgcmVzdWx0ID0gUkVHRVhQX05VTUVSSUM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTkFNRV9OVU1FUklDX0VYUDpcbiAgICAgICAgICByZXN1bHQgPSBSRUdFWFBfTlVNRVJJQ19FWFA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTkFNRV9OVU1FUklDMTJfMjpcbiAgICAgICAgICByZXN1bHQgPSBSRUdFWFBfTlVNRVJJQzEyXzI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgIXJlYWxOdW1lcmljID8gJyEnICsgdmFsdWUgOiB2YWx1ZTpcbiAgICAgICAgICByZXN1bHQgPSBSRUdFWFBfUkVBTF9OVU1FUklDO1xuICAgICAgICAgIGlmIChyZWFsTnVtZXJpYyAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBkaW1lbnNpb24gPSByZWFsTnVtZXJpYy5kaW1lbnNpb247XG4gICAgICAgICAgICBjb25zdCBhY2N1cmFjeSA9IHJlYWxOdW1lcmljLmFjY3VyYWN5O1xuICAgICAgICAgICAgaWYgKGRpbWVuc2lvbiAhPT0gLTEgJiYgYWNjdXJhY3kgPT09IC0xKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IGBeLT9cXFxcZHsxLCR7ZGltZW5zaW9ufX0kYDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGltZW5zaW9uICE9PSAtMSAmJiBhY2N1cmFjeSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gYF4tPyhcXFxcZHsxLCR7ZGltZW5zaW9ufX0oXFxcXC5cXFxcZHswLCR7YWNjdXJhY3l9fSk/fFxcXFwuXFxcXGR7MCwke2FjY3VyYWN5fX0pJGA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRpbWVuc2lvbiA9PT0gLTEgJiYgYWNjdXJhY3kgIT09IC0xKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IGBeLT8oXFxcXGQrKFxcXFwuXFxcXGR7MCwke2FjY3VyYWN5fX0pP3xcXFxcLlxcXFxkezAsJHthY2N1cmFjeX19KSRgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGlzUmVhbE51bWVyaWModmFsdWU6IHN0cmluZyk6IHsgZGltZW5zaW9uOiBudW1iZXI7IGFjY3VyYWN5OiBudW1iZXIgfSB8IG51bGwge1xuICAgIGxldCByZXN1bHQ6IHsgZGltZW5zaW9uOiBudW1iZXI7IGFjY3VyYWN5OiBudW1iZXIgfSB8IG51bGwgPSBudWxsO1xuICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5zdGFydHNXaXRoKE5BTUVfTlVNRVJJQykpIHtcbiAgICAgIGNvbnN0IHZhbHVlVGV4dCA9IHZhbHVlLnN1YnN0cmluZyhOQU1FX05VTUVSSUMubGVuZ3RoKTtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gdmFsdWVUZXh0LmluZGV4T2YoJygnKTtcbiAgICAgIGNvbnN0IGZpbmlzaCA9IHZhbHVlVGV4dC5pbmRleE9mKCcpJyk7XG4gICAgICBpZiAoc3RhcnQgIT09IC0xICYmIHN0YXJ0IDwgZmluaXNoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB2YWx1ZVRleHQuc3Vic3RyaW5nKHN0YXJ0ICsgMSwgZmluaXNoKTtcbiAgICAgICAgY29uc3QgaWR4ID0gZGF0YS5pbmRleE9mKCcsJyk7XG4gICAgICAgIGNvbnN0IHNlcGFyYXRvciA9IGlkeCAhPT0gLTEgPyBpZHggOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZGltZW5zaW9uID0gTnVtYmVyKGRhdGEuc3Vic3RyaW5nKDAsIHNlcGFyYXRvcikpIHx8IC0xO1xuICAgICAgICBjb25zdCBhY2N1cmFjeSA9IE51bWJlcihkYXRhLnN1YnN0cmluZyhzZXBhcmF0b3IgKyAxKSkgfHwgLTE7XG4gICAgICAgIHJlc3VsdCA9IHsgZGltZW5zaW9uLCBhY2N1cmFjeSB9O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iXX0=