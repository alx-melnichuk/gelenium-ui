import { CdkConnectedOverlay } from '@angular/cdk/overlay';
import { isPlatformBrowser } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, Inject, InjectionToken, Input, Optional, Output, PLATFORM_ID, ViewChild, ViewEncapsulation, } from '@angular/core';
import { FormControl, FormGroup, NG_VALIDATORS, NG_VALUE_ACCESSOR, } from '@angular/forms';
import { take } from 'rxjs/operators';
import { GLN_NODE_INTERNAL_VALIDATOR } from '../directives/gln-regex/gln-node-internal-validator.interface';
import { GlnBasisFrame } from '../_classes/gln-basis-frame.class';
import { GlnFrameSize, GlnFrameSizeUtil } from '../gln-frame/gln-frame-size.interface';
import { GLN_OPTION_PARENT } from '../gln-option/gln-option-parent.interface';
import { GlnOptionComponent } from '../gln-option/gln-option.component';
import { GlnOptionUtil } from '../gln-option/gln-option.util';
import { ArrayUtil } from '../_utils/array.util';
import { BooleanUtil } from '../_utils/boolean.util';
import { HtmlElemUtil } from '../_utils/html-elem.util';
import { NumberUtil } from '../_utils/number.util';
import { ScreenUtil } from '../_utils/screen.util';
import { GLN_SELECT_SCROLL_STRATEGY } from './gln-select.providers';
import { GLN_SELECT_TRIGGER } from './gln-select-trigger.directive';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/overlay";
import * as i3 from "@angular/forms";
import * as i4 from "../directives/gln-frame-exterior-input/gln-frame-exterior-input.directive";
import * as i5 from "../gln-frame/gln-frame.component";
import * as i6 from "../directives/gln-frame-ornament/gln-frame-ornament.directive";
import * as i7 from "../directives/gln-frame-size/gln-frame-size.directive";
import * as i8 from "../gln-hint-or-error/gln-hint-or-error.component";
let uniqueIdCounter = 0;
export const GLN_SELECT_CONFIG = new InjectionToken('GLN_SELECT_CONFIG');
const CSS_ATTR_FOR_FRAME_FOCUS = 'foc';
const CSS_ATTR_FOR_PANEL_OPENING_ANIMATION = 'is-open';
const CSS_ATTR_FOR_PANEL_CLOSING_ANIMATION = 'is-hide';
const CSS_PROP_BORDER_RADIUS = '--glnslpo-border-radius';
const CSS_PROP_MAX_HEIGHT = '--glnslpo-max-height';
const CSS_PROP_EL_MIN_WIDTH = '--glnsl-el-min-width';
const CSS_PROP_EL_MIN_HEIGHT = '--glnsl-el-min-height';
const CSS_PROP_TRANSLATE_Y = '--glnslpo-translate-y';
export class GlnSelectComponent extends GlnBasisFrame {
    constructor(hostRef, renderer, changeDetectorRef, 
    // eslint-disable-next-line @typescript-eslint/ban-types
    platformId, rootConfig, 
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
    scrollStrategyFactory, ngZone) {
        super(uniqueIdCounter++, 'glnsl', hostRef, renderer, changeDetectorRef, ngZone);
        this.platformId = platformId;
        this.rootConfig = rootConfig;
        this.scrollStrategyFactory = scrollStrategyFactory;
        this.panelClass = ''; // -
        this.visibleSize = 0;
        this.tabIndex = 0; // ~
        this.focused = new EventEmitter();
        this.blured = new EventEmitter();
        this.opened = new EventEmitter();
        this.closed = new EventEmitter();
        // @Output()
        // readonly writeValueInit: EventEmitter<() => void> = new EventEmitter(); // Is in GlnBasisControl.
        this.selected = new EventEmitter();
        this.backdropClassVal = null;
        this.checkmark = null; // Binding attribute "isCheckmark". // interface GlnOptionParent
        this.currConfig = null;
        // public disabled: boolean | null = null; // Binding attribute "isDisabled". // Is in GlnBasisControl.
        // public error: boolean | null = null; // Binding attribute "isError". // Is in GlnBasisControl.
        this.errors = null;
        this.formControl = new FormControl({ value: null, disabled: false }, []);
        this.formGroup = new FormGroup({ textData: this.formControl });
        this.frameSizeDefault = GlnFrameSizeUtil.getValue(GlnFrameSize.middle) || 0;
        this.hasPanelAnimation = false;
        this.isFocused = false;
        this.isFilled = false;
        this.isPanelOpen = false;
        // public isWriteValueInit: boolean | null = null;                         // Is in GlnBasisControl.
        // public labelShrink: boolean | null = null; // Binding attribute "isLabelShrink". // Is in GlnBasisControl.
        this.multiple = null; // Binding attribute "isMultiple". // interface GlnOptionParent
        // public noAnimation: boolean | null = null; // Binding attribute "isNoAnimation". // Is in GlnBasisControl.
        this.noIcon = null; // Binding attribute "isNoIcon",
        // public noLabel: boolean | null = null; // Binding attribute "isNoLabel". // Is in GlnBasisControl.
        this.noRipple = null; // Binding attribute "isNoRipple". // interface GlnOptionParent
        this.overlayPanelClass = '';
        this.positionList = [];
        // public readOnly: boolean | null = null; // Binding attribute "isReadOnly". // Is in GlnBasisControl.
        // public required: boolean | null = null; // Binding attribute "isRequired". // Is in GlnBasisControl.
        this.selectedOptions = [];
        /** The position and dimensions for the trigger's bounding box. */
        this.triggerRect = null;
        // public valueInit: boolean | null = null; // Binding attribute "isValueInit". // Is in GlnBasisControl.
        this.visibleSizeVal = null; // Binding attribute "visibleSize".
        this.isFocusAttrOnFrame = false;
        this.markedOption = null;
        this.maxWidth = 0;
        /** Saving the font size of the trigger element. */
        this.triggerFontSize = 0;
        /** Saving the frame size of the trigger element. Defines BorderRadius. */
        this.triggerFrameSize = 0;
        this.currConfig = this.rootConfig;
        this.scrollStrategy = this.scrollStrategyFactory();
        HtmlElemUtil.setClass(this.renderer, this.hostRef, 'gln-select', true);
        HtmlElemUtil.setClass(this.renderer, this.hostRef, 'gln-control', true);
    }
    get value() {
        return this.valueData;
    }
    set value(newValue) {
        if (this.multiple && !Array.isArray(newValue)) {
            throw Error('The value must be an array in multi-select mode.');
        }
        if (!this.multiple && Array.isArray(newValue)) {
            throw Error('The value must not be an array in single select mode.');
        }
        if (newValue !== this.valueData || (this.multiple && Array.isArray(newValue))) {
            // Get a list of menu items according to an array of values.
            const newOptions = GlnOptionUtil.getOptionsByValues(newValue, this.options);
            // Which elements of array "this.selectedOptions" are not included in array "newOptions".
            const removed = ArrayUtil.uninclude(this.selectedOptions, newOptions);
            // Which elements of array "newOptions" are not included in array "this.selectedOptions".
            const added = ArrayUtil.uninclude(newOptions, this.selectedOptions);
            this.selectedOptions = this.mergeOptions(this.selectedOptions, added, removed);
            this.updateValueDataAndIsFilledAndValidity(newValue);
            this.changeDetectorRef.markForCheck();
        }
    }
    get options() {
        return this.optionList?.toArray() || [];
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    set options(value) { }
    ngOnChanges(changes) {
        // In the GlnBasisControl.ngOnChanges(), the definition is made:
        // - this.disabled = BooleanUtil.init(this.isDisabled);
        // - this.error = BooleanUtil.init(this.isError);
        // - this.labelShrink = BooleanUtil.init(this.isLabelShrink);
        // - this.noAnimation = BooleanUtil.init(this.isNoAnimation);
        // - this.noLabel = BooleanUtil.init(this.isNoLabel);
        // - this.readOnly = BooleanUtil.init(this.isReadOnly);
        // - this.required = BooleanUtil.init(this.isRequired);
        // - this.valueInit = BooleanUtil.init(this.isValueInit);
        super.ngOnChanges(changes);
        if (changes['config']) {
            this.currConfig = { ...this.rootConfig, ...this.config };
            if (this.noAnimation == null) {
                this.noAnimation = this.currConfig?.isNoAnimation || null;
            }
        }
        if (changes['isCheckmark'] || (changes['config'] && this.isCheckmark == null)) {
            this.checkmark = BooleanUtil.init(this.isCheckmark) || this.currConfig?.isCheckmark || null;
        }
        if (changes['isMultiple'] || (changes['config'] && this.isMultiple == null)) {
            this.multiple = BooleanUtil.init(this.isMultiple) || this.currConfig?.isMultiple || null;
        }
        if (changes['isNoIcon'] || (changes['config'] && this.isNoIcon == null)) {
            this.noIcon = BooleanUtil.init(this.isNoIcon) || this.currConfig?.isNoIcon || null;
        }
        if (changes['isNoRipple'] || (changes['config'] && this.isNoRipple == null)) {
            this.noRipple = BooleanUtil.init(this.isNoRipple) || this.currConfig?.isNoRipple || null;
        }
        if (changes['panelClass'] || (changes['config'] && this.panelClass == null)) {
            this.panelClassList = this.panelClass || this.currConfig?.panelClass;
        }
        if (changes['position'] || (changes['config'] && this.position == null)) {
            this.positionList = this.getPositionList(this.position || this.currConfig?.position);
        }
        if (changes['visibleSize'] || (changes['config'] && this.visibleSize == null)) {
            this.visibleSizeVal = this.visibleSize || this.currConfig?.visibleSize || null;
        }
    }
    ngOnInit() {
        super.ngOnInit();
        if (this.backdropClassVal == null) {
            this.backdropClassVal = this.currConfig?.backdropClass || null;
        }
        if (this.checkmark == null) {
            this.checkmark = this.currConfig?.isCheckmark || null;
        }
        if (this.multiple == null) {
            this.multiple = this.currConfig?.isMultiple || null;
        }
        if (this.noAnimation == null) {
            this.noAnimation = this.currConfig?.isNoAnimation || null;
        }
        if (this.noIcon == null) {
            this.noIcon = this.currConfig?.isNoIcon || null;
        }
        if (this.noRipple == null) {
            this.noRipple = this.currConfig?.isNoRipple || null;
        }
        if (this.currConfig?.overlayPanelClass) {
            this.overlayPanelClass = this.currConfig.overlayPanelClass;
        }
        if (this.panelClassList == null) {
            this.panelClassList = this.currConfig?.panelClass;
        }
        if (this.positionList.length === 0) {
            this.positionList = this.getPositionList(this.currConfig?.position);
        }
        if (this.visibleSizeVal == null) {
            this.visibleSizeVal = this.currConfig?.visibleSize || null;
        }
    }
    ngAfterContentInit() {
        // Initialized when the value is received via "writeValue()" but the list of menu items is just now.
        if (this.selectedOptions.length === 0 && this.options.length > 0) {
            const newValue = this.valueData;
            this.valueData = undefined;
            this.value = newValue;
            // If the template is already rendered at the moment, then it is possible that these changes will not be displayed.
            // To solve this problem, we call a redraw via Promise.
            Promise.resolve().then(() => {
                this.changeDetectorRef.markForCheck();
            });
        }
        super.ngAfterContentInit();
    }
    ngAfterViewInit() {
        let maxWidth = Number(getComputedStyle(this.hostRef.nativeElement).getPropertyValue('max-width').replace('px', ''));
        this.maxWidth = !isNaN(maxWidth) ? maxWidth : 0;
        if (this.maxWidth === 0 && BooleanUtil.init(this.wdFull)) {
            maxWidth = Number(getComputedStyle(this.hostRef.nativeElement).getPropertyValue('width').replace('px', ''));
            this.maxWidth = !isNaN(maxWidth) ? maxWidth : 0;
        }
    }
    // ** interface ControlValueAccessor - start **
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
    writeValue(value) {
        this.value = value;
        super.writeValue(value);
    }
    setDisabledState(isDisabled) {
        if (this.disabled !== isDisabled) {
            isDisabled ? this.formGroup.disable() : this.formGroup.enable();
            super.setDisabledState(isDisabled);
        }
    }
    // ** interface ControlValueAccessor - finish **
    // ** interface Validator - start **
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    validate(control) {
        let result = null;
        if (this.isEmpty()) {
            if (this.required) {
                result = { ...(result || {}), ...{ required: true } };
            }
        }
        else if (this.multiple) {
            const actualLength = Array.isArray(this.valueData) ? this.valueData.length : 0;
            if (!!this.minLength && 0 < this.minLength && actualLength < this.minLength) {
                result = { ...(result || {}), ...{ minlength: { requiredLength: this.minLength, actualLength } } };
            }
            else if (!!this.maxLength && 0 < this.maxLength && actualLength > this.maxLength) {
                result = { ...(result || {}), ...{ maxlength: { requiredLength: this.maxLength, actualLength } } };
            }
        }
        return (this.errors = result);
    }
    // ** interface Validator - finish **
    // ** interface GlnOptionParent - start **
    optionSelection(optionItem) {
        Promise.resolve().then(() => {
            this.selectionOptionElement(optionItem);
            if (this.isPanelOpen && !this.isFocused) {
                this.isFocused = true;
                this.focus();
            }
            if (!this.multiple) {
                this.close();
            }
        });
    }
    // ** interface GlnOptionParent - finish **
    // ** Public methods **
    trackByOption(index, item) {
        return item.id;
    }
    /** Determine the value of the css variable "frame size". */
    frameSizeChange(event) {
        this.triggerFrameSize = event.frameSizeValue || 0;
        const minWidth = NumberUtil.roundTo100(this.triggerFrameSize * 1.1);
        HtmlElemUtil.setProperty(this.hostRef, CSS_PROP_EL_MIN_WIDTH, NumberUtil.str(minWidth)?.concat('px'));
        HtmlElemUtil.setProperty(this.hostRef, CSS_PROP_EL_MIN_HEIGHT, NumberUtil.str(this.triggerFrameSize)?.concat('px'));
    }
    getPanelClass(list) {
        return list ?? '';
    }
    isEmpty() {
        return Array.isArray(this.valueData) ? this.valueData.length === 0 : this.valueData == null;
    }
    focus() {
        if (!this.disabled && isPlatformBrowser(this.platformId)) {
            this.frameRef.nativeElement.focus();
        }
    }
    doFocus() {
        if (!this.disabled) {
            const isFocusedEmit = !this.isFocused;
            this.isFocused = true;
            if (isFocusedEmit) {
                this.focused.emit();
            }
        }
    }
    // The selection panel cease working in the following cases:
    // (Cases-B1) Panel is close and on the trigger, click the Tab key.
    // (Cases-B2) Panel is open and mouse click within the panel.
    // (Cases-B3) Panel is open and mouse click outside of panel and trigger.
    // (Cases-B4) Panel is open and mouse click outside of panel but on trigger.
    // (Cases-B5) Panel is open and click the Escape key.
    // (Cases-B6) Panel is open and click the Tab key.
    // (Cases-B7) Panel is open and click the Enter key.
    /** Calls the touch callback only when the panel is closed.
     * Otherwise, it will cause a false positive, "blur" on the panel when it is opened.
     */
    doBlur() {
        if (!this.disabled) {
            this.isFocused = false;
            if (!this.isPanelOpen && !this.hasPanelAnimation) {
                // (Cases-B1) Panel is close and on the trigger, click the Tab key.
                this.blured.emit();
            }
            else {
                // (Cases-B2) Panel is open and mouse click within the panel.
                // (Cases-B3) Panel is open and mouse click outside of panel and trigger.
                // (Cases-B4) Panel is open and mouse click outside of panel but on trigger.
                // For case Cases-B3,B4, let's add the "foc" attribute to force the display of focus.
                this.isFocusAttrOnFrame = true;
                HtmlElemUtil.setAttr(this.renderer, this.frameRef, CSS_ATTR_FOR_FRAME_FOCUS, '');
            }
        }
    }
    /** Occurs when a mouse click event occurs outside of the options list pane. */
    backdropClick() {
        if (!this.disabled) {
            // (Cases-B3) Panel is open and mouse click outside of panel and trigger.
            // (Cases-B4) Panel is open and mouse click outside of panel but on trigger.
            this.isFocused = true;
            this.focus();
            this.close();
        }
    }
    /** Occurs when the panel receives input focus. */
    doFocusOnPanel() {
        if (!this.disabled) {
            // (Cases-B2) Panel is open and mouse click within the panel.
            this.isFocused = true;
            this.focus();
        }
    }
    /** Open or close the overlay panel. */
    toggle() {
        if (!this.disabled) {
            if (this.isPanelOpen) {
                this.close();
            }
            else {
                if (!this.isFocused) {
                    this.focus();
                }
                this.open();
            }
        }
    }
    /** Open overlay panel. */
    open() {
        if (!this.disabled && !this.readOnly && !this.isPanelOpen && this.options.length > 0) {
            this.isPanelOpen = true;
            this.hasPanelAnimation = !this.noAnimation;
            this.markedOption = this.selectedOptions.length > 0 ? this.selectedOptions[this.selectedOptions.length - 1] : null;
            this.triggerRect = this.triggerRef.nativeElement.getBoundingClientRect();
            this.isFocusAttrOnFrame = false;
            this.triggerFontSize = Number((getComputedStyle(this.triggerRef.nativeElement).fontSize || '0').replace('px', ''));
            this.changeDetectorRef.markForCheck();
            this.opened.emit();
        }
    }
    /** Closes the overlay panel and focuses the main element. */
    close() {
        if (this.disabled || !this.isPanelOpen) {
            return;
        }
        if (this.isFocusAttrOnFrame) {
            HtmlElemUtil.setAttr(this.renderer, this.frameRef, CSS_ATTR_FOR_FRAME_FOCUS, null);
        }
        this.isPanelOpen = false;
        this.changeDetectorRef.markForCheck();
        this.onTouched();
        this.markedOption?.setMarked(false);
        this.markedOption = null;
        const overlayElement = this.connectedOverlay.overlayRef.overlayElement;
        const selectPanelRef = HtmlElemUtil.getElementRef(overlayElement.children[0]?.children[0]);
        const panelHeight = this.getHeight(selectPanelRef);
        if (panelHeight > 0) {
            const overlayRef = HtmlElemUtil.getElementRef(overlayElement);
            HtmlElemUtil.setProperty(overlayRef, CSS_PROP_TRANSLATE_Y, this.getTranslateY(this.triggerRect, panelHeight, ScreenUtil.getHeight()));
        }
        if (!this.noAnimation) {
            const selectPanelWrapRef = HtmlElemUtil.getElementRef(overlayElement.children[0]);
            // Add an attribute for animation and transformation.
            HtmlElemUtil.setAttr(this.renderer, selectPanelWrapRef, CSS_ATTR_FOR_PANEL_OPENING_ANIMATION, null);
            HtmlElemUtil.setAttr(this.renderer, selectPanelWrapRef, CSS_ATTR_FOR_PANEL_CLOSING_ANIMATION, '');
        }
        this.closed.emit();
    }
    /** Callback when the overlay panel is attached. */
    attach() {
        const overlayElement = this.connectedOverlay.overlayRef.overlayElement;
        // Adding a class so that custom styles can be applied.
        const overlayRef = HtmlElemUtil.getElementRef(overlayElement);
        HtmlElemUtil.setAttr(this.renderer, overlayRef, 'glnspo-select', '');
        const selectPanelRef = HtmlElemUtil.getElementRef(overlayElement.children[0]?.children[0]);
        const panelHeight = this.getHeight(selectPanelRef);
        if (!this.noAnimation && panelHeight > 0) {
            HtmlElemUtil.setProperty(overlayRef, CSS_PROP_TRANSLATE_Y, this.getTranslateY(this.triggerRect, panelHeight, ScreenUtil.getHeight()));
        }
        // Set the font size for the overlay.
        if (this.triggerFontSize > 0) {
            overlayElement.style.fontSize = `${this.triggerFontSize}px`;
        }
        if (this.maxWidth > 0) {
            overlayElement.style.maxWidth = `${this.maxWidth}px`;
        }
        if (this.triggerFrameSize > 0) {
            const borderRadius = NumberUtil.roundTo100(this.triggerFrameSize / 10);
            HtmlElemUtil.setProperty(overlayRef, CSS_PROP_BORDER_RADIUS, NumberUtil.str(borderRadius)?.concat('px'));
        }
        const visibleSize = this.visibleSizeVal ?? 0;
        const maxHeigthSelectPanel = visibleSize > 0 ? this.getOptionHeigth(this.options) * visibleSize : 0;
        if (maxHeigthSelectPanel > 0) {
            HtmlElemUtil.setProperty(overlayRef, CSS_PROP_MAX_HEIGHT, NumberUtil.str(maxHeigthSelectPanel)?.concat('px'));
        }
        // We cannot get the actual sizes and positions of elements if they are affected by a transformation.
        // Therefore, we first get all the data, and then add attributes for animation and transformation.
        if (this.markedOption !== null && selectPanelRef !== null && maxHeigthSelectPanel > 0) {
            const delta = NumberUtil.roundTo100(maxHeigthSelectPanel / 2) - NumberUtil.roundTo100(this.getHeight(this.markedOption.hostRef) / 2);
            const optionRect = this.markedOption.hostRef.nativeElement.getBoundingClientRect();
            const panelRect = selectPanelRef.nativeElement.getBoundingClientRect();
            selectPanelRef.nativeElement.scrollTo(0, optionRect.top - panelRect.top - delta);
        }
        // Important! These operations should be the last, they include animation and the dimensions of the panel are distorted.
        const selectPanelWrapRef = HtmlElemUtil.getElementRef(overlayElement?.children[0]);
        if (this.noAnimation) {
            HtmlElemUtil.setAttr(this.renderer, selectPanelWrapRef, 'noAnm', '');
            HtmlElemUtil.setClass(this.renderer, selectPanelWrapRef, 'gln-no-animation', true);
        }
        else {
            // Add an attribute for animation and transformation.
            HtmlElemUtil.setAttr(this.renderer, selectPanelWrapRef, CSS_ATTR_FOR_PANEL_OPENING_ANIMATION, '');
        }
    }
    /** Handles all keypress events for the component's panel. */
    frameKeydown(event) {
        if (!this.disabled) {
            if (!this.isPanelOpen) {
                // Open the selection panel by pressing the keys: 'up arrow', 'down arrow', 'space' and 'enter'.
                if (['ArrowDown', 'ArrowUp', ' ', 'Enter'].includes(event.key)) {
                    // Prevents the page from scrolling down when pressing space.
                    event.preventDefault();
                    this.open();
                }
            }
            else {
                if (['ArrowDown', 'ArrowUp', ' ', 'Tab'].includes(event.key)) {
                    // Prevents the page from scrolling down when pressing: 'up arrow', 'down arrow', 'space' and 'tab'.
                    event.preventDefault();
                }
                switch (event.key) {
                    // (Cases-B5) Panel is open and click the Escape key.
                    // (Cases-B6) Panel is open and click the Tab key.
                    case 'Escape':
                    case 'Tab':
                        this.close();
                        break;
                    case 'ArrowDown':
                    case 'ArrowUp':
                        // Moving the cursor marker.
                        this.markedOption = this.movingMarkedOption(event.key === 'ArrowDown', this.markedOption);
                        this.changeDetectorRef.markForCheck();
                        break;
                    // (Cases-B7) Panel is open and click the Enter key.
                    case 'Enter':
                        if (this.markedOption != null) {
                            // Selects the element of the current marker.
                            this.selectionOptionElement(this.markedOption);
                            // And if not multiple, then closing the panel.
                            if (!this.multiple) {
                                this.close();
                            }
                        }
                        break;
                }
            }
        }
    }
    /** Processing the option selected by the user. */
    selectionOptionElement(addOption) {
        const newOptions = addOption !== null ? [addOption] : [];
        if (!this.disabled && newOptions.length > 0) {
            const removed = [];
            if (this.multiple) {
                // Which elements of array "this.selectedOptions" are included in array "addOptions".
                removed.push(...ArrayUtil.include(this.selectedOptions, newOptions));
            }
            else {
                // Which elements of array "this.selectedOptions" are not included in array "addOptions".
                removed.push(...ArrayUtil.uninclude(this.selectedOptions, newOptions));
            }
            // Which elements of array "addOptions" are not included in array "this.selectedOptions".
            const added = ArrayUtil.uninclude(newOptions, this.selectedOptions);
            this.updateSelectedOptions(added, removed, true);
        }
    }
    addOption(option) {
        if (option && this.selectedOptions.indexOf(option) === -1) {
            this.updateSelectedOptions([option], [], true);
        }
    }
    deleteOption(option) {
        if (option && this.selectedOptions.indexOf(option) > -1) {
            this.updateSelectedOptions([], [option], true);
        }
    }
    // ** Private API **
    updateSelectedOptions(added, removed, isEmit) {
        this.selectedOptions = this.mergeOptions(this.selectedOptions, added, removed);
        const values = GlnOptionUtil.getValues(this.selectedOptions);
        const value = values.length > 0 ? values[0] : null;
        this.updateValueDataAndIsFilledAndValidity(this.multiple ? values : value);
        this.changeDetectorRef.markForCheck();
        if (isEmit) {
            this.selected.emit({ value: !this.multiple ? value : null, values: this.multiple ? values : [], change: { added, removed } });
        }
        // Update the position once the zone is stable so that the overlay will be fully rendered.
        this.ngZone.onStable.pipe(take(1)).subscribe(() => {
            this.connectedOverlay.overlayRef.updatePosition();
        });
        return values;
    }
    mergeOptions(selected, added, removed) {
        GlnOptionUtil.setSelected(removed, false);
        const currentOptions = ArrayUtil.delete(selected, removed);
        GlnOptionUtil.setSelected(added, true);
        const resultOptions = currentOptions.concat(added);
        return this.options.filter((option) => resultOptions.includes(option));
    }
    getHeight(value) {
        return value ? Number(getComputedStyle(value.nativeElement).getPropertyValue('height').replace('px', '')) : 0;
    }
    /** Define the "TranslateY" parameter to correctly open or close. */
    getTranslateY(triggerRect, panelHeight, screenHeight) {
        let result = null;
        if (panelHeight > 0 && !!triggerRect && triggerRect.top > 0 && triggerRect.height > 0 && screenHeight > 0) {
            const value = triggerRect.top + triggerRect.height + panelHeight;
            const delta = String(NumberUtil.roundTo100((panelHeight - 0.6 * panelHeight) / 2)).concat('px');
            result = (value < screenHeight ? '-' : '') + delta;
        }
        return result;
    }
    /** Update the data value, the sign of fullness and perform validation. */
    updateValueDataAndIsFilledAndValidity(newValueData) {
        this.valueData = newValueData;
        this.isFilled = !this.isEmpty() && this.selectedOptions.length > 0;
        // Calling the validation method for the new value.
        this.onChange(this.valueData);
    }
    /** Move the marked option to the next or previous one. */
    movingMarkedOption(isNext, markedOption) {
        let result = null;
        if (this.options.length > 0) {
            let indexOld = -1;
            if (markedOption != null) {
                indexOld = this.options.indexOf(markedOption);
                markedOption.setMarked(false);
            }
            const maxIndex = this.options.length - 1;
            const index = isNext ? (indexOld < maxIndex ? indexOld + 1 : 0) : indexOld > 0 ? indexOld - 1 : maxIndex;
            result = this.options[index];
            result.setMarked(true);
        }
        return result;
    }
    /** Get the height of the option. */
    getOptionHeigth(options) {
        const value = [];
        const count = [];
        let countByIndex = -1;
        let resultIndex = -1;
        for (let i = 0; i < options.length && countByIndex < 4; i++) {
            const height = this.getHeight(options[i].hostRef);
            let index = value.indexOf(height);
            if (index === -1) {
                value.push(height);
                count.push(1);
                index = value.length - 1;
            }
            else {
                count[index]++;
            }
            if (count[index] > countByIndex) {
                countByIndex = count[index];
                resultIndex = index;
            }
        }
        return resultIndex > -1 ? value[resultIndex] : 0;
    }
    getPosition(value) {
        return (value && ['start', 'center', 'end'].indexOf(value) > -1 ? value : 'start');
    }
    getPositionList(position) {
        const horizontalAlignment = this.getPosition(position || null);
        return [
            { originX: horizontalAlignment, originY: 'bottom', overlayX: horizontalAlignment, overlayY: 'top' },
            { originX: horizontalAlignment, originY: 'top', overlayX: horizontalAlignment, overlayY: 'bottom', offsetY: -5 },
        ];
    }
}
GlnSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.2", ngImport: i0, type: GlnSelectComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: PLATFORM_ID }, { token: GLN_SELECT_CONFIG, optional: true }, { token: GLN_SELECT_SCROLL_STRATEGY, optional: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
GlnSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.2", type: GlnSelectComponent, selector: "gln-select", inputs: { config: "config", exterior: "exterior", frameSize: "frameSize", helperText: "helperText", isCheckmark: "isCheckmark", isMultiple: "isMultiple", isNoIcon: "isNoIcon", isNoRipple: "isNoRipple", label: "label", maxLength: "maxLength", minLength: "minLength", ornamLfAlign: "ornamLfAlign", ornamRgAlign: "ornamRgAlign", panelClass: "panelClass", position: "position", visibleSize: "visibleSize", tabIndex: "tabIndex", wdFull: "wdFull", value: "value" }, outputs: { focused: "focused", blured: "blured", opened: "opened", closed: "closed", selected: "selected" }, providers: [
        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => GlnSelectComponent), multi: true },
        { provide: NG_VALIDATORS, useExisting: forwardRef(() => GlnSelectComponent), multi: true },
        { provide: GLN_NODE_INTERNAL_VALIDATOR, useExisting: GlnSelectComponent },
        { provide: GLN_OPTION_PARENT, useExisting: GlnSelectComponent },
    ], queries: [{ propertyName: "customTrigger", first: true, predicate: GLN_SELECT_TRIGGER, descendants: true }, { propertyName: "optionList", predicate: GlnOptionComponent, descendants: true }], viewQueries: [{ propertyName: "connectedOverlay", first: true, predicate: CdkConnectedOverlay, descendants: true }, { propertyName: "frameRef", first: true, predicate: ["frameRef"], descendants: true, read: ElementRef, static: true }, { propertyName: "triggerRef", first: true, predicate: ["triggerRef"], descendants: true, static: true }], exportAs: ["glnSelect"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<ng-container [formGroup]=\"formGroup\">\n  <div glnsl-wrap\n    class=\"glnsl-wrap\"\n    [glnFrameExteriorInput]=\"exterior || currConfig?.exterior\"\n    #glnFrameExteriorInput=\"glnFrameExteriorInput\"\n    [glnFrameExteriorInputElementRef]=\"hostRef\"\n    (glnFrameExteriorInputChange)=\"glnFrameSize.updatePaddingVerAndHor()\"\n    cdkOverlayOrigin\n    #origin=\"cdkOverlayOrigin\"\n    #triggerRef\n    (click)=\"!disabled ? toggle() : null\">\n    <gln-frame #frameRef\n      [ngClass]=\"[(isPanelOpen ? 'is-open' : '')]\"\n      [config]=\"currConfig\"\n      [exterior]=\"glnFrameExteriorInput.exterior\"\n      [isDisabled]=\"disabled\"\n      [isError]=\"!!errors || error\"\n      [isFilled]=\"isFilled\"\n      [isLabelShrink]=\"labelShrink || currConfig?.isLabelShrink\"\n      [isNoAnimation]=\"noAnimation || currConfig?.isNoAnimation || isWriteValueInit\"\n      [isNoLabel]=\"noLabel || currConfig?.isNoLabel\"\n      [isRequired]=\"required\"\n      [label]=\"label\"\n      [glnFrameSize]=\"frameSize || currConfig?.frameSize\"\n      #glnFrameSize=\"glnFrameSize\"\n      [glnFrameSizeElementRef]=\"hostRef\"\n      [glnFrameSizeValue]=\"currConfig?.frameSizeValue || frameSizeDefault\"\n      [glnFrameSizeLabelPd]=\"currConfig?.labelPd\"\n      [glnFrameSizePrepare]=\"glnFrameExteriorInput\"\n      (glnFrameSizeChange)=\"frameSizeChange($event)\"\n      glnFrameOrnament\n      [glnFrameOrnamentLfAlign]=\"ornamLfAlign || currConfig?.ornamLfAlign\"\n      [glnFrameOrnamentRgAlign]=\"ornamRgAlign || currConfig?.ornamRgAlign\"\n      [glnFrameOrnamentPath]=\"'/div{0}'\"\n      [attr.opn]=\"isPanelOpen ? '' : null\"\n      [attr.tabindex]=\"!disabled ? tabIndex : null\"\n      (focus)=\"doFocus()\"\n      (blur)=\"doBlur()\"\n      (keydown)=\"frameKeydown($event)\">\n\n      <span glnfr-orn-lf\n        class=\"gln-ornam-lf\">\n        <ng-content select=\"[gln-orn-lf]\"></ng-content>\n      </span>\n\n      <span glnfr-orn-rg\n        class=\"gln-ornam-rg\">\n        <ng-content select=\"[gln-orn-rg]\"></ng-content>\n\n        <div *ngIf=\"!getBoolean(isNoIcon) && !currConfig?.isNoIcon\"\n          glnsl-rhomb\n          [attr.opn]=\"isPanelOpen ? '' : null\"\n          [attr.noAnm]=\"noAnimation ? '' : null\"\n          [ngClass]=\"['glnsl-rhomb', (isPanelOpen ? 'is-open' : '')]\"\n          focusable=\"false\"\n          aria-hidden=\"true\">\n        </div>\n      </span>\n\n      <div [ngClass]=\"[(readOnly ? 'gln-readonly' : '')]\"\n        glnfr-pd-ver\n        glnfr-pd-hor\n        glnfr-elem\n        [attr.id]=\"id + '-elem'\">\n\n        <ng-container [ngSwitch]=\"isFilled\">\n          <div *ngSwitchCase=\"false\">&ZeroWidthSpace;</div>\n\n          <ng-container *ngSwitchCase=\"true\"\n            [ngSwitch]=\"!!customTrigger\">\n\n            <ng-content *ngSwitchCase=\"true\"\n              select=\"gln-select-trigger\">\n            </ng-content>\n\n            <ng-container *ngSwitchCase=\"false\">\n              <ng-container\n                *ngFor=\"let option of selectedOptions; count as countVal; last as isLast; trackBy: trackByOption;\">\n                <span [innerHTML]=\"option.getTrustHtml()\"></span>\n                <span *ngIf=\"countVal > 1 && !isLast\">, </span>\n              </ng-container>\n            </ng-container>\n\n          </ng-container>\n        </ng-container>\n      </div>\n\n    </gln-frame>\n  </div>\n</ng-container>\n\n<gln-hint-or-error *ngIf=\"!!helperText\"\n  [text]=\"helperText\"\n  [isError]=\"!!errors || error\"\n  [isFocused]=\"isFocused\"\n  [isDisabled]=\"disabled\">\n</gln-hint-or-error>\n\n<ng-template cdkConnectedOverlay\n  [cdkConnectedOverlayBackdropClass]=\"backdropClassVal || 'cdk-overlay-transparent-backdrop'\"\n  cdkConnectedOverlayHasBackdrop\n  [cdkConnectedOverlayDisableClose]=\"true\"\n  cdkConnectedOverlayLockPosition\n  [cdkConnectedOverlayMinWidth]=\"triggerRect?.width!\"\n  [cdkConnectedOverlayOpen]=\"isPanelOpen || hasPanelAnimation\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayPanelClass]=\"overlayPanelClass\"\n  [cdkConnectedOverlayPositions]=\"positionList\"\n  [cdkConnectedOverlayScrollStrategy]=\"scrollStrategy\"\n  (backdropClick)=\"backdropClick()\"\n  (attach)=\"attach()\"\n  (detach)=\"isPanelOpen ? close() : null\">\n\n  <div glnslp-wrap\n    class=\"gln-select-panel-wrap\"\n    [ngClass]=\"[(noAnimation ? 'gln-no-animation' : '')]\"\n    [attr.noAnm]=\"noAnimation ? '' : null\"\n    (animationend)=\"hasPanelAnimation = isPanelOpen\"\n    (animationcancel)=\"hasPanelAnimation = isPanelOpen\">\n    <div glnsl-panel\n      class=\"gln-select-panel\"\n      [ngClass]=\"getPanelClass(panelClassList)\"\n      role=\"listbox\"\n      [attr.id]=\"id + '-panel'\"\n      [attr.aria-multiselectable]=\"multiple\"\n      (focus)=\"doFocusOnPanel()\">\n      <ng-content select=\":not(gln-select-trigger)\"></ng-content>\n    </div>\n  </div>\n\n</ng-template>", styles: ["gln-select{--glnsl--default-h: var(--glncl-default-h, var(--gln-default-h));--glnsl--default-s: var(--glncl-default-s, var(--gln-default-s));display:inline-flex;flex-direction:column;min-width:var(--glnsl-min-width, var(--glnsl-el-min-width, 50px))}gln-select[wdFull]{width:100%}gln-select[wdFull] gln-frame>div>[glnfr-elem]{width:100%}gln-select gln-frame{--glnsl--default46: hsl(var(--glnsl--default-h), var(--glnsl--default-s), 46%);--glnsl--primary46: hsl(var(--glnsl--primary-h), var(--glnsl--primary-s), 46%);--glnsl--danger51: hsl(var(--glnsl--danger-h), var(--glnsl--danger-s), 51%);--glnsl--default74: hsl(var(--glnsl--default-h), var(--glnsl--default-s), 74%)}gln-select gln-frame:focus-visible{outline:none}gln-select gln-frame:not([opn]):not([dis]){cursor:pointer}gln-select gln-frame:not([dis])[hfc]{--glnslr-hover-focus-color: var(--glnsl--primary46)}gln-select gln-frame:not([dis]):not([err]):not(:hover):not(:focus-within):not([foc]){--glnsl-rhomb-cl: var(--glnsl-rhomb-def, var(--glnsl--default46))}gln-select gln-frame:not([dis]):not([err]):hover:not(:focus-within):not([foc]){--glnsl-rhomb-cl: var(--glnsl-rhomb-hov, var(--glnslr-hover-focus-color, var(--glnsl--default46)))}gln-select gln-frame:not([dis]):not([err]):focus-within,gln-select gln-frame:not([dis]):not([err])[foc]{--glnsl-rhomb-cl: var(--glnsl-rhomb-foc, var(--glnsl--primary46))}gln-select gln-frame:not([dis])[err]{--glnsl-rhomb-cl: var(--glnsl-rhomb-err, var(--glnsl--danger51))}gln-select gln-frame[dis]{--glnsl-rhomb-cl: var(--glnsl-rhomb-dis, var(--glnsl--default74))}gln-select gln-frame>div>[glnfr-orn-rg]>[glnsl-rhomb]{align-items:center;color:var(--glnsl-rhomb-cl);display:flex;height:1em;-webkit-user-select:none;user-select:none}gln-select gln-frame>div>[glnfr-orn-rg]>[glnsl-rhomb]:after{border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;content:\" \";height:0;margin:0 .375em;width:0}gln-select gln-frame>div>[glnfr-orn-rg]>[glnsl-rhomb]:not([noAnm]):after{transition:transform .3s linear 0ms}gln-select gln-frame>div>[glnfr-orn-rg]>[glnsl-rhomb][opn]:after{transform:rotate(180deg)}gln-select gln-frame:not([ext-s])>div>[glnfr-orn-rg]>[glnsl-rhomb]{padding-right:.375em}gln-select gln-frame>div>[glnfr-elem]{background:none;border:0;box-sizing:border-box;color:currentColor;display:block;font:inherit;margin:0;min-height:var(--glnsl-el-min-height, unset);-webkit-tap-highlight-color:transparent;min-width:0;overflow:hidden;text-overflow:ellipsis;-webkit-user-select:none;user-select:none;white-space:nowrap}gln-select>[glnsl-wrap]{position:relative}gln-select gln-hint-or-error{padding-left:var(--glnsl-he-pd-lf, var(--glnfrs-pd-lf));padding-right:var(--glnsl-he-pd-rg, var(--glnfrs-pd-rg))}.gln-select-panel-wrap{background-color:var(--glnslpw-def-bg-cl, var(--gln-default-bg-cl));color:var(--glnslpw-def-cl, hsl(var(--gln-default-h), var(--gln-default-s), 17%));flex-basis:100%;font-size:inherit;max-width:inherit}.gln-select-panel-wrap:not([noAnm]){opacity:0}.gln-select-panel-wrap:not([noAnm])[is-open]:not([is-hide]){animation:kf-open-panel .2s cubic-bezier(.2,0,.2,1) 0ms;opacity:1}.gln-select-panel-wrap:not([noAnm]):not([is-open])[is-hide]{animation:kf-close-panel .2s linear 0ms;opacity:0}@keyframes kf-open-panel{0%{opacity:0;transform:translateY(var(--glnslpo-translate-y, 0px)) scale(.6)}to{opacity:1;transform:none}}@keyframes kf-close-panel{0%{opacity:1;transform:none}to{opacity:0;transform:translateY(var(--glnslpo-translate-y, 0px)) scale(.6)}}.gln-select-panel{border-radius:var(--glnslpo-border-radius, unset);box-sizing:border-box;max-height:var(--glnslpo-max-height, 100%);min-height:16px;min-width:16px;overflow:auto;outline:0;-webkit-overflow-scrolling:touch;box-shadow:var(--glnslpo-elevation, rgba(0, 0, 0, .2) 0px 5px 5px -3px, rgba(0, 0, 0, .14) 0px 8px 10px 1px, rgba(0, 0, 0, .12) 0px 3px 14px 2px)}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i2.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { kind: "directive", type: i2.CdkOverlayOrigin, selector: "[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]", exportAs: ["cdkOverlayOrigin"] }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i4.GlnFrameExteriorInputDirective, selector: "[glnFrameExteriorInput]", inputs: ["glnFrameExteriorInput", "glnFrameExteriorInputElementRef"], outputs: ["glnFrameExteriorInputChange"], exportAs: ["glnFrameExteriorInput"] }, { kind: "component", type: i5.GlnFrameComponent, selector: "gln-frame", inputs: ["config", "exterior", "isDisabled", "isError", "isFilled", "isLabelShrink", "isNoAnimation", "isNoLabel", "isRequired", "label"], exportAs: ["glnFrame"] }, { kind: "directive", type: i6.GlnFrameOrnamentDirective, selector: "[glnFrameOrnament]", inputs: ["glnFrameOrnamentLfAlign", "glnFrameOrnamentRgAlign", "glnFrameOrnamentElementRef", "glnFrameOrnamentPath", "glnFrameOrnamentAfterContent"], exportAs: ["glnFrameOrnament"] }, { kind: "directive", type: i7.GlnFrameSizeDirective, selector: "[glnFrameSize]", inputs: ["glnFrameSize", "glnFrameSizeValue", "glnFrameSizeLabelPd", "glnFrameSizeElementRef", "glnFrameSizePrepare", "glnFrameSizeModify"], outputs: ["glnFrameSizeChange"], exportAs: ["glnFrameSize"] }, { kind: "component", type: i8.GlnHintOrErrorComponent, selector: "gln-hint-or-error", inputs: ["text", "isError", "isFocused", "isDisabled"], exportAs: ["glnHintOrError"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.2", ngImport: i0, type: GlnSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'gln-select', exportAs: 'glnSelect', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => GlnSelectComponent), multi: true },
                        { provide: NG_VALIDATORS, useExisting: forwardRef(() => GlnSelectComponent), multi: true },
                        { provide: GLN_NODE_INTERNAL_VALIDATOR, useExisting: GlnSelectComponent },
                        { provide: GLN_OPTION_PARENT, useExisting: GlnSelectComponent },
                    ], template: "<ng-container [formGroup]=\"formGroup\">\n  <div glnsl-wrap\n    class=\"glnsl-wrap\"\n    [glnFrameExteriorInput]=\"exterior || currConfig?.exterior\"\n    #glnFrameExteriorInput=\"glnFrameExteriorInput\"\n    [glnFrameExteriorInputElementRef]=\"hostRef\"\n    (glnFrameExteriorInputChange)=\"glnFrameSize.updatePaddingVerAndHor()\"\n    cdkOverlayOrigin\n    #origin=\"cdkOverlayOrigin\"\n    #triggerRef\n    (click)=\"!disabled ? toggle() : null\">\n    <gln-frame #frameRef\n      [ngClass]=\"[(isPanelOpen ? 'is-open' : '')]\"\n      [config]=\"currConfig\"\n      [exterior]=\"glnFrameExteriorInput.exterior\"\n      [isDisabled]=\"disabled\"\n      [isError]=\"!!errors || error\"\n      [isFilled]=\"isFilled\"\n      [isLabelShrink]=\"labelShrink || currConfig?.isLabelShrink\"\n      [isNoAnimation]=\"noAnimation || currConfig?.isNoAnimation || isWriteValueInit\"\n      [isNoLabel]=\"noLabel || currConfig?.isNoLabel\"\n      [isRequired]=\"required\"\n      [label]=\"label\"\n      [glnFrameSize]=\"frameSize || currConfig?.frameSize\"\n      #glnFrameSize=\"glnFrameSize\"\n      [glnFrameSizeElementRef]=\"hostRef\"\n      [glnFrameSizeValue]=\"currConfig?.frameSizeValue || frameSizeDefault\"\n      [glnFrameSizeLabelPd]=\"currConfig?.labelPd\"\n      [glnFrameSizePrepare]=\"glnFrameExteriorInput\"\n      (glnFrameSizeChange)=\"frameSizeChange($event)\"\n      glnFrameOrnament\n      [glnFrameOrnamentLfAlign]=\"ornamLfAlign || currConfig?.ornamLfAlign\"\n      [glnFrameOrnamentRgAlign]=\"ornamRgAlign || currConfig?.ornamRgAlign\"\n      [glnFrameOrnamentPath]=\"'/div{0}'\"\n      [attr.opn]=\"isPanelOpen ? '' : null\"\n      [attr.tabindex]=\"!disabled ? tabIndex : null\"\n      (focus)=\"doFocus()\"\n      (blur)=\"doBlur()\"\n      (keydown)=\"frameKeydown($event)\">\n\n      <span glnfr-orn-lf\n        class=\"gln-ornam-lf\">\n        <ng-content select=\"[gln-orn-lf]\"></ng-content>\n      </span>\n\n      <span glnfr-orn-rg\n        class=\"gln-ornam-rg\">\n        <ng-content select=\"[gln-orn-rg]\"></ng-content>\n\n        <div *ngIf=\"!getBoolean(isNoIcon) && !currConfig?.isNoIcon\"\n          glnsl-rhomb\n          [attr.opn]=\"isPanelOpen ? '' : null\"\n          [attr.noAnm]=\"noAnimation ? '' : null\"\n          [ngClass]=\"['glnsl-rhomb', (isPanelOpen ? 'is-open' : '')]\"\n          focusable=\"false\"\n          aria-hidden=\"true\">\n        </div>\n      </span>\n\n      <div [ngClass]=\"[(readOnly ? 'gln-readonly' : '')]\"\n        glnfr-pd-ver\n        glnfr-pd-hor\n        glnfr-elem\n        [attr.id]=\"id + '-elem'\">\n\n        <ng-container [ngSwitch]=\"isFilled\">\n          <div *ngSwitchCase=\"false\">&ZeroWidthSpace;</div>\n\n          <ng-container *ngSwitchCase=\"true\"\n            [ngSwitch]=\"!!customTrigger\">\n\n            <ng-content *ngSwitchCase=\"true\"\n              select=\"gln-select-trigger\">\n            </ng-content>\n\n            <ng-container *ngSwitchCase=\"false\">\n              <ng-container\n                *ngFor=\"let option of selectedOptions; count as countVal; last as isLast; trackBy: trackByOption;\">\n                <span [innerHTML]=\"option.getTrustHtml()\"></span>\n                <span *ngIf=\"countVal > 1 && !isLast\">, </span>\n              </ng-container>\n            </ng-container>\n\n          </ng-container>\n        </ng-container>\n      </div>\n\n    </gln-frame>\n  </div>\n</ng-container>\n\n<gln-hint-or-error *ngIf=\"!!helperText\"\n  [text]=\"helperText\"\n  [isError]=\"!!errors || error\"\n  [isFocused]=\"isFocused\"\n  [isDisabled]=\"disabled\">\n</gln-hint-or-error>\n\n<ng-template cdkConnectedOverlay\n  [cdkConnectedOverlayBackdropClass]=\"backdropClassVal || 'cdk-overlay-transparent-backdrop'\"\n  cdkConnectedOverlayHasBackdrop\n  [cdkConnectedOverlayDisableClose]=\"true\"\n  cdkConnectedOverlayLockPosition\n  [cdkConnectedOverlayMinWidth]=\"triggerRect?.width!\"\n  [cdkConnectedOverlayOpen]=\"isPanelOpen || hasPanelAnimation\"\n  [cdkConnectedOverlayOrigin]=\"origin\"\n  [cdkConnectedOverlayPanelClass]=\"overlayPanelClass\"\n  [cdkConnectedOverlayPositions]=\"positionList\"\n  [cdkConnectedOverlayScrollStrategy]=\"scrollStrategy\"\n  (backdropClick)=\"backdropClick()\"\n  (attach)=\"attach()\"\n  (detach)=\"isPanelOpen ? close() : null\">\n\n  <div glnslp-wrap\n    class=\"gln-select-panel-wrap\"\n    [ngClass]=\"[(noAnimation ? 'gln-no-animation' : '')]\"\n    [attr.noAnm]=\"noAnimation ? '' : null\"\n    (animationend)=\"hasPanelAnimation = isPanelOpen\"\n    (animationcancel)=\"hasPanelAnimation = isPanelOpen\">\n    <div glnsl-panel\n      class=\"gln-select-panel\"\n      [ngClass]=\"getPanelClass(panelClassList)\"\n      role=\"listbox\"\n      [attr.id]=\"id + '-panel'\"\n      [attr.aria-multiselectable]=\"multiple\"\n      (focus)=\"doFocusOnPanel()\">\n      <ng-content select=\":not(gln-select-trigger)\"></ng-content>\n    </div>\n  </div>\n\n</ng-template>", styles: ["gln-select{--glnsl--default-h: var(--glncl-default-h, var(--gln-default-h));--glnsl--default-s: var(--glncl-default-s, var(--gln-default-s));display:inline-flex;flex-direction:column;min-width:var(--glnsl-min-width, var(--glnsl-el-min-width, 50px))}gln-select[wdFull]{width:100%}gln-select[wdFull] gln-frame>div>[glnfr-elem]{width:100%}gln-select gln-frame{--glnsl--default46: hsl(var(--glnsl--default-h), var(--glnsl--default-s), 46%);--glnsl--primary46: hsl(var(--glnsl--primary-h), var(--glnsl--primary-s), 46%);--glnsl--danger51: hsl(var(--glnsl--danger-h), var(--glnsl--danger-s), 51%);--glnsl--default74: hsl(var(--glnsl--default-h), var(--glnsl--default-s), 74%)}gln-select gln-frame:focus-visible{outline:none}gln-select gln-frame:not([opn]):not([dis]){cursor:pointer}gln-select gln-frame:not([dis])[hfc]{--glnslr-hover-focus-color: var(--glnsl--primary46)}gln-select gln-frame:not([dis]):not([err]):not(:hover):not(:focus-within):not([foc]){--glnsl-rhomb-cl: var(--glnsl-rhomb-def, var(--glnsl--default46))}gln-select gln-frame:not([dis]):not([err]):hover:not(:focus-within):not([foc]){--glnsl-rhomb-cl: var(--glnsl-rhomb-hov, var(--glnslr-hover-focus-color, var(--glnsl--default46)))}gln-select gln-frame:not([dis]):not([err]):focus-within,gln-select gln-frame:not([dis]):not([err])[foc]{--glnsl-rhomb-cl: var(--glnsl-rhomb-foc, var(--glnsl--primary46))}gln-select gln-frame:not([dis])[err]{--glnsl-rhomb-cl: var(--glnsl-rhomb-err, var(--glnsl--danger51))}gln-select gln-frame[dis]{--glnsl-rhomb-cl: var(--glnsl-rhomb-dis, var(--glnsl--default74))}gln-select gln-frame>div>[glnfr-orn-rg]>[glnsl-rhomb]{align-items:center;color:var(--glnsl-rhomb-cl);display:flex;height:1em;-webkit-user-select:none;user-select:none}gln-select gln-frame>div>[glnfr-orn-rg]>[glnsl-rhomb]:after{border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;content:\" \";height:0;margin:0 .375em;width:0}gln-select gln-frame>div>[glnfr-orn-rg]>[glnsl-rhomb]:not([noAnm]):after{transition:transform .3s linear 0ms}gln-select gln-frame>div>[glnfr-orn-rg]>[glnsl-rhomb][opn]:after{transform:rotate(180deg)}gln-select gln-frame:not([ext-s])>div>[glnfr-orn-rg]>[glnsl-rhomb]{padding-right:.375em}gln-select gln-frame>div>[glnfr-elem]{background:none;border:0;box-sizing:border-box;color:currentColor;display:block;font:inherit;margin:0;min-height:var(--glnsl-el-min-height, unset);-webkit-tap-highlight-color:transparent;min-width:0;overflow:hidden;text-overflow:ellipsis;-webkit-user-select:none;user-select:none;white-space:nowrap}gln-select>[glnsl-wrap]{position:relative}gln-select gln-hint-or-error{padding-left:var(--glnsl-he-pd-lf, var(--glnfrs-pd-lf));padding-right:var(--glnsl-he-pd-rg, var(--glnfrs-pd-rg))}.gln-select-panel-wrap{background-color:var(--glnslpw-def-bg-cl, var(--gln-default-bg-cl));color:var(--glnslpw-def-cl, hsl(var(--gln-default-h), var(--gln-default-s), 17%));flex-basis:100%;font-size:inherit;max-width:inherit}.gln-select-panel-wrap:not([noAnm]){opacity:0}.gln-select-panel-wrap:not([noAnm])[is-open]:not([is-hide]){animation:kf-open-panel .2s cubic-bezier(.2,0,.2,1) 0ms;opacity:1}.gln-select-panel-wrap:not([noAnm]):not([is-open])[is-hide]{animation:kf-close-panel .2s linear 0ms;opacity:0}@keyframes kf-open-panel{0%{opacity:0;transform:translateY(var(--glnslpo-translate-y, 0px)) scale(.6)}to{opacity:1;transform:none}}@keyframes kf-close-panel{0%{opacity:1;transform:none}to{opacity:0;transform:translateY(var(--glnslpo-translate-y, 0px)) scale(.6)}}.gln-select-panel{border-radius:var(--glnslpo-border-radius, unset);box-sizing:border-box;max-height:var(--glnslpo-max-height, 100%);min-height:16px;min-width:16px;overflow:auto;outline:0;-webkit-overflow-scrolling:touch;box-shadow:var(--glnslpo-elevation, rgba(0, 0, 0, .2) 0px 5px 5px -3px, rgba(0, 0, 0, .14) 0px 8px 10px 1px, rgba(0, 0, 0, .12) 0px 3px 14px 2px)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [GLN_SELECT_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [GLN_SELECT_SCROLL_STRATEGY]
                }] }, { type: i0.NgZone }]; }, propDecorators: { config: [{
                type: Input
            }], exterior: [{
                type: Input
            }], frameSize: [{
                type: Input
            }], helperText: [{
                type: Input
            }], isCheckmark: [{
                type: Input
            }], isMultiple: [{
                type: Input
            }], isNoIcon: [{
                type: Input
            }], isNoRipple: [{
                type: Input
            }], label: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], minLength: [{
                type: Input
            }], ornamLfAlign: [{
                type: Input
            }], ornamRgAlign: [{
                type: Input
            }], panelClass: [{
                type: Input
            }], position: [{
                type: Input
            }], visibleSize: [{
                type: Input
            }], tabIndex: [{
                type: Input
            }], wdFull: [{
                type: Input
            }], value: [{
                type: Input
            }], focused: [{
                type: Output
            }], blured: [{
                type: Output
            }], opened: [{
                type: Output
            }], closed: [{
                type: Output
            }], selected: [{
                type: Output
            }], connectedOverlay: [{
                type: ViewChild,
                args: [CdkConnectedOverlay]
            }], customTrigger: [{
                type: ContentChild,
                args: [GLN_SELECT_TRIGGER]
            }], frameRef: [{
                type: ViewChild,
                args: ['frameRef', { read: ElementRef, static: true }]
            }], triggerRef: [{
                type: ViewChild,
                args: ['triggerRef', { static: true }]
            }], optionList: [{
                type: ContentChildren,
                args: [GlnOptionComponent, { descendants: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,