import { isPlatformBrowser } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, forwardRef, Inject, InjectionToken, Input, Optional, Output, PLATFORM_ID, ViewChild, ViewEncapsulation, } from '@angular/core';
import { FormControl, FormGroup, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators, } from '@angular/forms';
import { GLN_NODE_INTERNAL_VALIDATOR } from '../directives/gln-regex/gln-node-internal-validator.interface';
import { GlnBasisFrame } from '../_classes/gln-basis-frame.class';
import { GlnFrameSize, GlnFrameSizeUtil } from '../gln-frame/gln-frame-size.interface';
import { HtmlElemUtil } from '../_utils/html-elem.util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "../directives/gln-frame-exterior-input/gln-frame-exterior-input.directive";
import * as i4 from "../gln-frame/gln-frame.component";
import * as i5 from "../directives/gln-frame-ornament/gln-frame-ornament.directive";
import * as i6 from "../directives/gln-frame-size/gln-frame-size.directive";
import * as i7 from "../gln-hint-or-error/gln-hint-or-error.component";
let uniqueIdCounter = 0;
export const GLN_TEXTAREA_CONFIG = new InjectionToken('GLN_TEXTAREA_CONFIG');
export class GlnTextareaComponent extends GlnBasisFrame {
    // public isWriteValueInit: boolean | null = null;                            // Is in GlnBasisControl.
    // public labelShrink: boolean | null = null; // Binding attribute "isLabelShrink". // Is in GlnBasisControl.
    // public noAnimation: boolean | null = null; // Binding attribute "isNoAnimation". // Is in GlnBasisControl.
    // public noLabel: boolean | null = null; // Binding attribute "isNoLabel". // Is in GlnBasisControl.
    // public readOnly: boolean | null = null; // Binding attribute "isReadOnly". // Is in GlnBasisControl.
    // public required: boolean | null = null; // Binding attribute "isRequired". // Is in GlnBasisControl.
    // public valueInit: boolean | null = null; // Binding attribute "isValueInit". // Is in GlnBasisControl.
    constructor(
    // eslint-disable-next-line @typescript-eslint/ban-types
    platformId, changeDetectorRef, rootConfig, hostRef, renderer, ngZone) {
        super(uniqueIdCounter++, 'glntx', hostRef, renderer, changeDetectorRef, ngZone);
        this.platformId = platformId;
        this.rootConfig = rootConfig;
        // @Input()
        // public id = `glntx-${uniqueIdCounter++}`; // Is in GlnBasisControl.
        this.autoComplete = '';
        this.tabIndex = 0;
        this.focused = new EventEmitter();
        this.blured = new EventEmitter();
        // @Output()
        // readonly writeValueInit: EventEmitter<() => void> = new EventEmitter(); // From GlnBasisByFrame
        this.textareaElementRef = null;
        this.currConfig = null;
        this.currentRows = 1;
        // public disabled: boolean | null = null; // Binding attribute "isDisabled". // Is in GlnBasisControl.
        // public error: boolean | null = null; // Binding attribute "isError". // Is in GlnBasisControl.
        this.formControl = new FormControl({ value: null, disabled: false }, []);
        this.formGroup = new FormGroup({ textData: this.formControl });
        this.frameSizeDefault = GlnFrameSizeUtil.getValue(GlnFrameSize.middle) || 0;
        this.isFocused = false;
        this.isFilled = false;
        this.currConfig = this.rootConfig;
        HtmlElemUtil.setClass(this.renderer, this.hostRef, 'gln-textarea', true);
        HtmlElemUtil.setClass(this.renderer, this.hostRef, 'gln-control', true);
    }
    ngOnChanges(changes) {
        // In the GlnBasisControl.ngOnChanges(), the definition is made:
        // - this.disabled = BooleanUtil.init(this.isDisabled);
        // - this.error = BooleanUtil.init(this.isError);
        // - this.labelShrink = BooleanUtil.init(this.isLabelShrink);
        // - this.noAnimation = BooleanUtil.init(this.isNoAnimation);
        // - this.noLabel = BooleanUtil.init(this.isNoLabel);
        // - this.readOnly = BooleanUtil.init(this.isReadOnly);
        // - this.required = BooleanUtil.init(this.isRequired);
        // - this.valueInit = BooleanUtil.init(this.isValueInit);
        super.ngOnChanges(changes);
        if (changes['config']) {
            this.currConfig = { ...this.rootConfig, ...this.config };
        }
        if (changes['isRequired'] || changes['minLength'] || changes['maxLength']) {
            this.prepareFormGroup(this.required, this.minLength || null, this.maxLength || null);
        }
        if (changes['cntRows'] || changes['minRows'] || changes['maxRows']) {
            this.currentRows = this.cntRows || this.getCurrentRows(this.getNumberLines(this.formControl.value), this.minRows, this.maxRows);
        }
    }
    ngOnInit() {
        super.ngOnInit();
    }
    ngAfterContentInit() {
        super.ngAfterContentInit();
    }
    // ** ControlValueAccessor - start **
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
    writeValue(value) {
        const isFilledOld = !!this.formControl.value;
        const cntLinesOld = this.getNumberLines(this.formControl.value);
        this.formControl.setValue(value, { emitEvent: false });
        this.isFilled = this.formControl.value !== '' && this.formControl.value != null;
        const cntLines = this.getNumberLines(this.formControl.value);
        if (cntLinesOld != cntLines) {
            this.currentRows = this.cntRows || this.getCurrentRows(this.getNumberLines(this.formControl.value), this.minRows, this.maxRows);
        }
        if (isFilledOld !== this.isFilled || cntLinesOld != cntLines) {
            this.changeDetectorRef.markForCheck();
        }
        super.writeValue(value);
    }
    setDisabledState(isDisabled) {
        if (this.disabled !== isDisabled) {
            isDisabled ? this.formGroup.disable() : this.formGroup.enable();
            super.setDisabledState(isDisabled);
        }
    }
    // ** ControlValueAccessor - finish **
    // ** Validator - start **
    validate(control) {
        return !control ? null : this.formControl.errors;
    }
    // ** Validator - finish **
    // ** GlnNodeInternalValidator - start **
    addValidators(validators) {
        if (validators != null) {
            this.formControl.addValidators(validators);
            this.formControl.updateValueAndValidity();
        }
    }
    addAsyncValidators(validators) {
        if (validators != null) {
            this.formControl.addAsyncValidators(validators);
            this.formControl.updateValueAndValidity();
        }
    }
    // ** GlnNodeInternalValidator - finish **
    // ** Public API **
    focus() {
        if (isPlatformBrowser(this.platformId) && !!this.textareaElementRef) {
            this.textareaElementRef.nativeElement.focus();
        }
    }
    doFocus() {
        this.isFocused = true;
        this.focusState(this.renderer, this.hostRef, this.isFocused);
        this.focused.emit();
    }
    doBlur() {
        this.isFocused = false;
        this.focusState(this.renderer, this.hostRef, this.isFocused);
        this.isFilled = !!this.formControl.value;
        this.onTouched();
        this.blured.emit();
    }
    doInput(event) {
        // https://github.com/angular/angular/issues/9587 "event.stopImmediatePropagation() called from listeners not working"
        // Added Event.cancelBubble check to make sure there was no call to event.stopImmediatePropagation() in previous handlers.
        if (!!event && !event.cancelBubble) {
            this.onChange(this.formControl.value);
            this.currentRows = this.cntRows || this.getCurrentRows(this.getNumberLines(this.formControl.value), this.minRows, this.maxRows);
        }
    }
    // ** Private API **
    prepareFormGroup(isRequired, minLength, maxLength) {
        this.formControl.clearValidators();
        const newValidator = [];
        if (isRequired) {
            newValidator.push(Validators.required);
        }
        if (!!minLength && minLength > 0) {
            newValidator.push(Validators.minLength(minLength));
        }
        if (!!maxLength && maxLength > 0) {
            newValidator.push(Validators.maxLength(maxLength));
        }
        this.formControl.setValidators(newValidator);
    }
    focusState(renderer, elem, value) {
        HtmlElemUtil.setClass(renderer, elem, 'gln-focused', value || false);
        HtmlElemUtil.setAttr(renderer, elem, 'foc', value ? '' : null);
    }
    getCurrentRows(numberOfLines, minRows, maxRows) {
        let result = numberOfLines > 0 ? numberOfLines : 1;
        if (!!minRows && minRows > 0 && minRows > result) {
            result = minRows;
        }
        if (!!maxRows && maxRows > 0 && result > maxRows) {
            result = maxRows;
        }
        return result;
    }
    getNumberLines(value) {
        return (value || '').split('\n').length;
    }
}
GlnTextareaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.2", ngImport: i0, type: GlnTextareaComponent, deps: [{ token: PLATFORM_ID }, { token: i0.ChangeDetectorRef }, { token: GLN_TEXTAREA_CONFIG, optional: true }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
GlnTextareaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.2", type: GlnTextareaComponent, selector: "gln-textarea", inputs: { autoComplete: "autoComplete", cntCols: "cntCols", cntRows: "cntRows", config: "config", exterior: "exterior", frameSize: "frameSize", helperText: "helperText", label: "label", maxLength: "maxLength", maxRows: "maxRows", minLength: "minLength", minRows: "minRows", ornamLfAlign: "ornamLfAlign", ornamRgAlign: "ornamRgAlign", tabIndex: "tabIndex", wdFull: "wdFull" }, outputs: { focused: "focused", blured: "blured" }, providers: [
        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => GlnTextareaComponent), multi: true },
        { provide: NG_VALIDATORS, useExisting: forwardRef(() => GlnTextareaComponent), multi: true },
        { provide: GLN_NODE_INTERNAL_VALIDATOR, useExisting: GlnTextareaComponent },
    ], viewQueries: [{ propertyName: "textareaElementRef", first: true, predicate: ["textareaElement"], descendants: true }], exportAs: ["glnTextarea"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<ng-container [formGroup]=\"formGroup\">\n  <div class=\"glntx-wrap\"\n    [glnFrameExteriorInput]=\"exterior || currConfig?.exterior\"\n    #glnFrameExteriorInput=\"glnFrameExteriorInput\"\n    [glnFrameExteriorInputElementRef]=\"hostRef\"\n    (glnFrameExteriorInputChange)=\"glnFrameSize.updatePaddingVerAndHor()\">\n    <gln-frame [config]=\"config\"\n      [exterior]=\"glnFrameExteriorInput.exterior\"\n      [isDisabled]=\"disabled\"\n      [isError]=\"!!formControl.errors || error\"\n      [isFilled]=\"isFilled\"\n      [isLabelShrink]=\"labelShrink || currConfig?.isLabelShrink\"\n      [isNoAnimation]=\"noAnimation || currConfig?.isNoAnimation || isWriteValueInit\"\n      [isNoLabel]=\"noLabel || currConfig?.isNoLabel\"\n      [isRequired]=\"required\"\n      [label]=\"label\"\n      [glnFrameSize]=\"frameSize || currConfig?.frameSize\"\n      #glnFrameSize=\"glnFrameSize\"\n      [glnFrameSizeElementRef]=\"hostRef\"\n      [glnFrameSizeValue]=\"currConfig?.frameSizeValue || frameSizeDefault\"\n      [glnFrameSizeLabelPd]=\"currConfig?.labelPd\"\n      [glnFrameSizePrepare]=\"glnFrameExteriorInput\"\n      glnFrameOrnament\n      [glnFrameOrnamentLfAlign]=\"ornamLfAlign || currConfig?.ornamLfAlign\"\n      [glnFrameOrnamentRgAlign]=\"ornamRgAlign || currConfig?.ornamRgAlign\"\n      [glnFrameOrnamentPath]=\"'/div{0}'\">\n\n      <span glnfr-orn-lf\n        class=\"gln-ornam-lf\">\n        <ng-content select=\"[gln-orn-lf]\"></ng-content>\n      </span>\n      <span glnfr-orn-rg\n        class=\"gln-ornam-rg\">\n        <ng-content select=\"[gln-orn-rg]\"></ng-content>\n      </span>\n\n      <textarea #textareaElement\n        formControlName=\"textData\"\n        glnfr-mr-ver\n        glnfr-pd-hor\n        glnfr-elem\n        [attr.id]=\"id + '_textarea'\"\n        [rows]=\"currentRows\"\n        [ngClass]=\"['glntx-textarea', (readOnly ? 'gln-readonly' : '')]\"\n        [attr.disabled]=\"disabled ? '': null\"\n        [attr.autocomplete]=\"!!autoComplete ? autoComplete : null\"\n        [attr.readonly]=\"readOnly ? '': null\"\n        [attr.tabindex]=\"!disabled ? tabIndex : null\"\n        [cols]=\"cntCols\"\n        (focus)=\"doFocus()\"\n        (blur)=\"doBlur()\"\n        (input)=\"doInput($event)\"\n        (click)=\"$event.stopPropagation();\">\n      </textarea>\n\n    </gln-frame>\n  </div>\n</ng-container>\n<gln-hint-or-error *ngIf=\"!!helperText\"\n  [text]=\"helperText\"\n  [isError]=\"!!formControl.errors || error\"\n  [isFocused]=\"isFocused\"\n  [isDisabled]=\"disabled\">\n</gln-hint-or-error>", styles: ["gln-textarea{display:inline-flex;flex-direction:column}gln-textarea[wdFull]{width:100%}gln-textarea[wdFull] gln-frame>div>[glnfr-elem]{width:100%}gln-textarea[noHeEllipsis] gln-hint-or-error{white-space:normal;overflow:visible;text-overflow:clip}gln-textarea .glntx-textarea{font-size:inherit;font-family:inherit;letter-spacing:inherit;color:inherit;border:0;box-sizing:content-box;background:none;margin:0;padding:0;resize:none}gln-textarea .glntx-textarea:focus{outline:0}gln-textarea gln-hint-or-error{padding-left:var(--glntx-he-pd-lf, var(--glnfrs-pd-lf));padding-right:var(--glntx-he-pd-rg, var(--glnfrs-pd-rg))}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i3.GlnFrameExteriorInputDirective, selector: "[glnFrameExteriorInput]", inputs: ["glnFrameExteriorInput", "glnFrameExteriorInputElementRef"], outputs: ["glnFrameExteriorInputChange"], exportAs: ["glnFrameExteriorInput"] }, { kind: "component", type: i4.GlnFrameComponent, selector: "gln-frame", inputs: ["config", "exterior", "isDisabled", "isError", "isFilled", "isLabelShrink", "isNoAnimation", "isNoLabel", "isRequired", "label"], exportAs: ["glnFrame"] }, { kind: "directive", type: i5.GlnFrameOrnamentDirective, selector: "[glnFrameOrnament]", inputs: ["glnFrameOrnamentLfAlign", "glnFrameOrnamentRgAlign", "glnFrameOrnamentElementRef", "glnFrameOrnamentPath", "glnFrameOrnamentAfterContent"], exportAs: ["glnFrameOrnament"] }, { kind: "directive", type: i6.GlnFrameSizeDirective, selector: "[glnFrameSize]", inputs: ["glnFrameSize", "glnFrameSizeValue", "glnFrameSizeLabelPd", "glnFrameSizeElementRef", "glnFrameSizePrepare", "glnFrameSizeModify"], outputs: ["glnFrameSizeChange"], exportAs: ["glnFrameSize"] }, { kind: "component", type: i7.GlnHintOrErrorComponent, selector: "gln-hint-or-error", inputs: ["text", "isError", "isFocused", "isDisabled"], exportAs: ["glnHintOrError"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.2", ngImport: i0, type: GlnTextareaComponent, decorators: [{
            type: Component,
            args: [{ selector: 'gln-textarea', exportAs: 'glnTextarea', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => GlnTextareaComponent), multi: true },
                        { provide: NG_VALIDATORS, useExisting: forwardRef(() => GlnTextareaComponent), multi: true },
                        { provide: GLN_NODE_INTERNAL_VALIDATOR, useExisting: GlnTextareaComponent },
                    ], template: "<ng-container [formGroup]=\"formGroup\">\n  <div class=\"glntx-wrap\"\n    [glnFrameExteriorInput]=\"exterior || currConfig?.exterior\"\n    #glnFrameExteriorInput=\"glnFrameExteriorInput\"\n    [glnFrameExteriorInputElementRef]=\"hostRef\"\n    (glnFrameExteriorInputChange)=\"glnFrameSize.updatePaddingVerAndHor()\">\n    <gln-frame [config]=\"config\"\n      [exterior]=\"glnFrameExteriorInput.exterior\"\n      [isDisabled]=\"disabled\"\n      [isError]=\"!!formControl.errors || error\"\n      [isFilled]=\"isFilled\"\n      [isLabelShrink]=\"labelShrink || currConfig?.isLabelShrink\"\n      [isNoAnimation]=\"noAnimation || currConfig?.isNoAnimation || isWriteValueInit\"\n      [isNoLabel]=\"noLabel || currConfig?.isNoLabel\"\n      [isRequired]=\"required\"\n      [label]=\"label\"\n      [glnFrameSize]=\"frameSize || currConfig?.frameSize\"\n      #glnFrameSize=\"glnFrameSize\"\n      [glnFrameSizeElementRef]=\"hostRef\"\n      [glnFrameSizeValue]=\"currConfig?.frameSizeValue || frameSizeDefault\"\n      [glnFrameSizeLabelPd]=\"currConfig?.labelPd\"\n      [glnFrameSizePrepare]=\"glnFrameExteriorInput\"\n      glnFrameOrnament\n      [glnFrameOrnamentLfAlign]=\"ornamLfAlign || currConfig?.ornamLfAlign\"\n      [glnFrameOrnamentRgAlign]=\"ornamRgAlign || currConfig?.ornamRgAlign\"\n      [glnFrameOrnamentPath]=\"'/div{0}'\">\n\n      <span glnfr-orn-lf\n        class=\"gln-ornam-lf\">\n        <ng-content select=\"[gln-orn-lf]\"></ng-content>\n      </span>\n      <span glnfr-orn-rg\n        class=\"gln-ornam-rg\">\n        <ng-content select=\"[gln-orn-rg]\"></ng-content>\n      </span>\n\n      <textarea #textareaElement\n        formControlName=\"textData\"\n        glnfr-mr-ver\n        glnfr-pd-hor\n        glnfr-elem\n        [attr.id]=\"id + '_textarea'\"\n        [rows]=\"currentRows\"\n        [ngClass]=\"['glntx-textarea', (readOnly ? 'gln-readonly' : '')]\"\n        [attr.disabled]=\"disabled ? '': null\"\n        [attr.autocomplete]=\"!!autoComplete ? autoComplete : null\"\n        [attr.readonly]=\"readOnly ? '': null\"\n        [attr.tabindex]=\"!disabled ? tabIndex : null\"\n        [cols]=\"cntCols\"\n        (focus)=\"doFocus()\"\n        (blur)=\"doBlur()\"\n        (input)=\"doInput($event)\"\n        (click)=\"$event.stopPropagation();\">\n      </textarea>\n\n    </gln-frame>\n  </div>\n</ng-container>\n<gln-hint-or-error *ngIf=\"!!helperText\"\n  [text]=\"helperText\"\n  [isError]=\"!!formControl.errors || error\"\n  [isFocused]=\"isFocused\"\n  [isDisabled]=\"disabled\">\n</gln-hint-or-error>", styles: ["gln-textarea{display:inline-flex;flex-direction:column}gln-textarea[wdFull]{width:100%}gln-textarea[wdFull] gln-frame>div>[glnfr-elem]{width:100%}gln-textarea[noHeEllipsis] gln-hint-or-error{white-space:normal;overflow:visible;text-overflow:clip}gln-textarea .glntx-textarea{font-size:inherit;font-family:inherit;letter-spacing:inherit;color:inherit;border:0;box-sizing:content-box;background:none;margin:0;padding:0;resize:none}gln-textarea .glntx-textarea:focus{outline:0}gln-textarea gln-hint-or-error{padding-left:var(--glntx-he-pd-lf, var(--glnfrs-pd-lf));padding-right:var(--glntx-he-pd-rg, var(--glnfrs-pd-rg))}\n"] }]
        }], ctorParameters: function () { return [{ type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [GLN_TEXTAREA_CONFIG]
                }] }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }]; }, propDecorators: { autoComplete: [{
                type: Input
            }], cntCols: [{
                type: Input
            }], cntRows: [{
                type: Input
            }], config: [{
                type: Input
            }], exterior: [{
                type: Input
            }], frameSize: [{
                type: Input
            }], helperText: [{
                type: Input
            }], label: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], maxRows: [{
                type: Input
            }], minLength: [{
                type: Input
            }], minRows: [{
                type: Input
            }], ornamLfAlign: [{
                type: Input
            }], ornamRgAlign: [{
                type: Input
            }], tabIndex: [{
                type: Input
            }], wdFull: [{
                type: Input
            }], focused: [{
                type: Output
            }], blured: [{
                type: Output
            }], textareaElementRef: [{
                type: ViewChild,
                args: ['textareaElement']
            }] } });
//# sourceMappingURL=data:application/json;base64,