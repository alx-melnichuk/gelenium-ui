import { ElementRef } from '@angular/core';
export class HtmlElemUtil {
    static setProperty(element, name, value) {
        if (element && element.nativeElement && name) {
            element.nativeElement.style.setProperty(name, value || null);
        }
    }
    static setClass(renderer, element, className, isAdd) {
        if (renderer && element && element.nativeElement && className) {
            if (isAdd) {
                renderer.addClass(element.nativeElement, className);
            }
            else {
                renderer.removeClass(element.nativeElement, className);
            }
        }
    }
    static setAttr(renderer, elem, name, value) {
        if (renderer && elem && elem.nativeElement && name) {
            if (value != null) {
                renderer.setAttribute(elem.nativeElement, name, value);
            }
            else {
                renderer.removeAttribute(elem.nativeElement, name);
            }
        }
    }
    static updateIfMissing(renderer, elem, name, value) {
        if (elem && name && !elem.nativeElement.getAttribute(name) && value) {
            HtmlElemUtil.setAttr(renderer, elem, name, value);
        }
    }
    static getChildByAttribute(elem, attributeList) {
        let result = null;
        const element = elem?.nativeElement || null;
        const len = attributeList.length;
        if (element?.children && element?.children.length > 0 && len > 0) {
            const count = element.children.length;
            let idx = 0;
            while (idx < count && !result) {
                const item = element.children[idx++];
                if (!item)
                    continue;
                let n = 0;
                while (n < len && !result) {
                    result = item.hasAttribute(attributeList[n++]) ? item : null;
                }
            }
        }
        return result;
    }
    static getElementRef(element) {
        return element ? new ElementRef(element) : null;
    }
    static getElementByPathClassOrTag(element, pathToElement) {
        let result = element;
        const list = (pathToElement || '').split('/');
        for (let idx = 0; idx < list.length && !!result; idx++) {
            let path = list[idx];
            if (!list[idx]) {
                continue;
            }
            let index = 0;
            const ind1 = path.indexOf('{');
            const ind2 = path.indexOf('}');
            if (ind1 > -1 && ind2 > -1 && ind1 < ind2) {
                const indStr = path.slice(ind1 + 1, ind2);
                index = Number(indStr);
                path = path.slice(0, ind1);
            }
            if (path[0] === '.') {
                result = result?.getElementsByClassName(path.slice(1, path.length))[index];
            }
            else {
                result = result?.getElementsByTagName(path)[index];
            }
        }
        return result || null;
    }
}
//# sourceMappingURL=data:application/json;base64,