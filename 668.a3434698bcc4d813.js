"use strict";(self.webpackChunkgelenium_ui_demo=self.webpackChunkgelenium_ui_demo||[]).push([[668],{8668:(ze,_,s)=>{s.r(_),s.d(_,{CmAutocompleteModule:()=>Ue});var g=s(6895),i=s(433),Z=s(811),m=s(7084),d=s(3848),a=s(9544),e=s(1571);let v=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[g.ez,i.UX,Z.vV,m.To,d.Nh,a.Rq,a.eB,a.JB]}),t})(),q=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[g.ez,i.UX,Z.vV,m.To,d.Nh,a.Rq,a.eB,a.JB]}),t})(),x=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[g.ez,i.UX,Z.vV,m.To,d.Nh,a.Rq,a.eB,a.JB]}),t})(),C=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[g.ez,i.UX,Z.vV,m.To,d.Nh,a.Rq,a.eB,a.JB,a.bI]}),t})(),w=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[g.ez,i.UX,Z.vV,m.To,d.Nh,a.Rq,a.eB,a.JB]}),t})(),y=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[g.ez]}),t})();var b=s(6001),F=s(590),c=s(4171),r=s(6986),f=s(4985),S=s(4577);function N(t,l){if(1&t&&(e.TgZ(0,"section",17)(1,"h3",24),e._uU(2," Basic. "),e.TgZ(3,"a",25),e._uU(4,"#"),e.qZA()(),e.TgZ(5,"span"),e._uU(6," To use this component, in your module you need to add: "),e.qZA(),e.TgZ(7,"code")(8,"pre",21),e._uU(9,"import { GlnAutocompleteModule, GlnOptionModule } from 'gelenium-ui';"),e.qZA()(),e.TgZ(10,"p"),e._uU(11," The GlnAutocomplete component allows you to supplement the input of the GlnInput component with a panel of suggested options. "),e.qZA(),e.TgZ(12,"span"),e._uU(13,"For example:"),e.qZA(),e.TgZ(14,"code")(15,"pre",20),e._uU(16,'<gln-input formControlName="model01a"\n  label="Enter value"\n  ['),e.TgZ(17,"strong"),e._uU(18,"glnAutocompleteTrigger"),e.qZA(),e._uU(19,']="'),e.TgZ(20,"i")(21,"strong"),e._uU(22,"autocomplete01"),e.qZA()(),e._uU(23,'">\n  </gln-input>\n  <'),e.TgZ(24,"strong"),e._uU(25,"gln-autocomplete"),e.qZA(),e._uU(26," #"),e.TgZ(27,"i")(28,"strong"),e._uU(29,"autocomplete01"),e.qZA()(),e._uU(30,'="glnAutocomplete">\n    <gln-option value="mango">Mango</gln-option>\n    <gln-option value="lemon">Lemon</gln-option>\n    <gln-option value="orange">Orange</gln-option>\n    <gln-option value="kiwi">Kiwi</gln-option>\n  <'),e.TgZ(31,"strong"),e._uU(32,"gln-autocomplete"),e.qZA(),e._uU(33,">"),e.qZA()(),e.TgZ(34,"p"),e._uU(35," If you are using the GlnInput component, then you need to add the appropriate module. "),e.qZA(),e.TgZ(36,"code")(37,"pre",21),e._uU(38,"import { GlnInputModule } from 'gelenium-ui';"),e.qZA()(),e.TgZ(39,"p"),e._uU(40," You can open the options panel by clicking the mouse, pressing the 'Arrow Up' (\u2b06) or 'Arrow Down' (\u2b07). "),e.qZA(),e.TgZ(41,"p"),e._uU(42," You can close the options panel by clicking on another element, by pressing 'Escape' or 'Alt + Arrow Up'. "),e.qZA()()),2&t){const o=e.oxw();e.xp6(3),e.Q6J("href",o.urlCmAutocomplete+"#Basic",e.LSH)}}let J=(()=>{class t{constructor(){this.labelShowSource=r.sx,this.labelOutlined=r.SR,this.labelUnderline=r.kP,this.labelStandard=r.Qb,this.labelHtml=r.zC,this.labelTs=r.QS,this.labelCss=r.Er,this.urlCmAutocomplete="/"+c.g.get("URL_COMPONENTS")+"/"+c.g.get("URL_COMPONENTS_AUTOCOMPLETE"),this.control01={model01a:new i.NI(null,[]),model01b:new i.NI(null,[]),model01c:new i.NI(null,[]),model01d:new i.NI(null,[])},this.formGroup01=new i.cw(this.control01)}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-cm-autocomplete-basic"]],inputs:{labelShowSource:"labelShowSource",labelOutlined:"labelOutlined",labelUnderline:"labelUnderline",labelStandard:"labelStandard",labelHtml:"labelHtml",labelTs:"labelTs",labelCss:"labelCss"},decls:128,vars:11,consts:[["mr-vr","",4,"ngIf"],["novalidate","","autocomplete","off",3,"formGroup"],[1,"app-group"],[1,"app-elem"],["formControlName","model01a","label","Enter value","exterior","outlined","wdFull","",3,"glnAutocompleteTrigger"],["autocomplete01a","glnAutocomplete"],["value","mango"],["value","lemon"],["value","orange"],["value","kiwi"],[2,"display","inline"],["formControlName","model01b","label","Enter value","exterior","underline","wdFull","",3,"glnAutocompleteTrigger"],["autocomplete01b","glnAutocomplete"],["formControlName","model01c","label","Enter value","exterior","standard","wdFull","",3,"glnAutocompleteTrigger"],["autocomplete01c","glnAutocomplete"],["type","text","formControlName","model01d",1,"acb-input",3,"glnAutocompleteTrigger"],["autocomplete01d","glnAutocomplete"],["mr-vr",""],["animationDuration","0ms"],[3,"label"],["source","html"],["source","ts"],["source","css"],["mr-vr","","id","basic-group"],[1,"app-hover-link"],[3,"href"],["br-nn",""]],template:function(o,n){if(1&o&&(e.YNc(0,N,43,1,"section",0),e.TgZ(1,"form",1)(2,"div",2)(3,"div",3)(4,"div")(5,"small")(6,"em"),e._uU(7,"exterior: Outlined"),e.qZA()()(),e._UZ(8,"gln-input",4),e.TgZ(9,"gln-autocomplete",null,5)(11,"gln-option",6),e._uU(12,"Mango"),e.qZA(),e.TgZ(13,"gln-option",7),e._uU(14,"Lemon"),e.qZA(),e.TgZ(15,"gln-option",8),e._uU(16,"Orange"),e.qZA(),e.TgZ(17,"gln-option",9),e._uU(18,"Kiwi"),e.qZA()()(),e.TgZ(19,"div",3)(20,"div")(21,"small")(22,"em"),e._uU(23,"exterior: Underline"),e.qZA()()(),e.TgZ(24,"div",10),e._UZ(25,"gln-input",11),e.TgZ(26,"gln-autocomplete",null,12)(28,"gln-option",6),e._uU(29,"Mango"),e.qZA(),e.TgZ(30,"gln-option",7),e._uU(31,"Lemon"),e.qZA(),e.TgZ(32,"gln-option",8),e._uU(33,"Orange"),e.qZA(),e.TgZ(34,"gln-option",9),e._uU(35,"Kiwi"),e.qZA()()()(),e.TgZ(36,"div",3)(37,"div")(38,"small")(39,"em"),e._uU(40,"exterior: Standard"),e.qZA()()(),e._UZ(41,"gln-input",13),e.TgZ(42,"gln-autocomplete",null,14)(44,"gln-option",6),e._uU(45,"Mango"),e.qZA(),e.TgZ(46,"gln-option",7),e._uU(47,"Lemon"),e.qZA(),e.TgZ(48,"gln-option",8),e._uU(49,"Orange"),e.qZA(),e.TgZ(50,"gln-option",9),e._uU(51,"Kiwi"),e.qZA()()(),e.TgZ(52,"div",3)(53,"div")(54,"small")(55,"em"),e._uU(56,'Native "input" element'),e.qZA()()(),e._UZ(57,"input",15),e.TgZ(58,"gln-autocomplete",null,16)(60,"gln-option",6),e._uU(61,"Mango"),e.qZA(),e.TgZ(62,"gln-option",7),e._uU(63,"Lemon"),e.qZA(),e.TgZ(64,"gln-option",8),e._uU(65,"Orange"),e.qZA(),e.TgZ(66,"gln-option",9),e._uU(67,"Kiwi"),e.qZA()()()()(),e.TgZ(68,"section",17)(69,"mat-accordion")(70,"mat-expansion-panel")(71,"mat-expansion-panel-header")(72,"mat-panel-title"),e._uU(73),e.qZA()(),e.TgZ(74,"mat-tab-group",18)(75,"mat-tab",19)(76,"code")(77,"pre",20),e._uU(78,'<form [formGroup]="formGroup01"\n  novalidate\n  autocomplete="off">\n\n  <div class="app-group">\n\n    <div class="app-elem">\n      <div>\n        <small><em>exterior: Outlined</em></small>\n      </div>\n      <gln-input formControlName="model01a"\n        label="Enter value"\n        exterior="outlined"\n        wdFull\n        [glnAutocompleteTrigger]="autocomplete01a">\n      </gln-input>\n      <gln-autocomplete #autocomplete01a="glnAutocomplete">\n        <gln-option value="mango">Mango</gln-option>\n        <gln-option value="lemon">Lemon</gln-option>\n        <gln-option value="orange">Orange</gln-option>\n        <gln-option value="kiwi">Kiwi</gln-option>\n      </gln-autocomplete>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small><em>exterior: Underline</em></small>\n      </div>\n      <div style="display: inline;">\n        <gln-input formControlName="model01b"\n          label="Enter value"\n          exterior="underline"\n          wdFull\n          [glnAutocompleteTrigger]="autocomplete01b">\n        </gln-input>\n        <gln-autocomplete #autocomplete01b="glnAutocomplete">\n          <gln-option value="mango">Mango</gln-option>\n          <gln-option value="lemon">Lemon</gln-option>\n          <gln-option value="orange">Orange</gln-option>\n          <gln-option value="kiwi">Kiwi</gln-option>\n        </gln-autocomplete>\n      </div>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small><em>exterior: Standard</em></small>\n      </div>\n      <gln-input formControlName="model01c"\n        label="Enter value"\n        exterior="standard"\n        wdFull\n        [glnAutocompleteTrigger]="autocomplete01c">\n      </gln-input>\n      <gln-autocomplete #autocomplete01c="glnAutocomplete">\n        <gln-option value="mango">Mango</gln-option>\n        <gln-option value="lemon">Lemon</gln-option>\n        <gln-option value="orange">Orange</gln-option>\n        <gln-option value="kiwi">Kiwi</gln-option>\n      </gln-autocomplete>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small><em>Native "input" element</em></small>\n      </div>\n      <input type="text"\n        class="acb-input"\n        formControlName="model01d"\n        [glnAutocompleteTrigger]="autocomplete01d" />\n      <gln-autocomplete #autocomplete01d="glnAutocomplete">\n        <gln-option value="mango">Mango</gln-option>\n        <gln-option value="lemon">Lemon</gln-option>\n        <gln-option value="orange">Orange</gln-option>\n        <gln-option value="kiwi">Kiwi</gln-option>\n      </gln-autocomplete>\n    </div>\n\n  </div>\n\n</form>'),e.qZA()()(),e.TgZ(79,"mat-tab",19)(80,"code")(81,"pre",21),e._uU(82,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormGroup, FormControl \n} from '@angular/forms';\n\n@Component({\n  selector: 'app-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AutocompleteComponent {\n\n  public control01 = {\n    model01a: new FormControl(null, []),\n    model01b: new FormControl(null, []),\n    model01c: new FormControl(null, []),\n    model01d: new FormControl(null, []),\n  };\n  public formGroup01: FormGroup = new FormGroup(this.control01);\n}"),e.qZA()()(),e.TgZ(83,"mat-tab",19)(84,"code")(85,"pre",22),e._uU(86,"app-autocomplete {\n  .app-group {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .app-elem {\n    min-width: 26ch;\n    margin: 10px 10px;\n  }\n  .acb-input {\n    font-size: 1em;\n    line-height: 2em;\n    margin-top: 1em;\n  }\n}"),e.qZA()()()()()()(),e.TgZ(87,"section",23)(88,"h4",24),e._uU(89," Group "),e.TgZ(90,"a",25),e._uU(91,"#"),e.qZA()(),e.TgZ(92,"p"),e._uU(93,' It is possible to group some options in the selection list. For this, the "GlnOptionGroup" component is used. '),e.qZA(),e.TgZ(94,"span"),e._uU(95," To use this component, in your module you need to add: "),e.qZA(),e.TgZ(96,"code")(97,"pre",21),e._uU(98,"import { GlnOptionGroupModule } from 'gelenium-ui';"),e.qZA()(),e.TgZ(99,"span"),e._uU(100,"For example:"),e.qZA(),e.TgZ(101,"code")(102,"pre",20),e._uU(103,'<gln-input formControlName="model01b"\n  label="Enter value"\n  ['),e.TgZ(104,"strong"),e._uU(105,"glnAutocompleteTrigger"),e.qZA(),e._uU(106,']="'),e.TgZ(107,"i")(108,"strong"),e._uU(109,"autocomplete01"),e.qZA()(),e._uU(110,'">\n  </gln-input>\n  <'),e.TgZ(111,"strong"),e._uU(112,"gln-autocomplete"),e.qZA(),e._uU(113," #"),e.TgZ(114,"i")(115,"strong"),e._uU(116,"autocomplete01"),e.qZA()(),e._uU(117,'="glnAutocomplete">\n  '),e.TgZ(118,"strong"),e._uU(119,'<gln-option-group label="fruits">'),e.qZA(),e._uU(120,'\n    <gln-option value="mango">Mango</gln-option>\n    <gln-option value="lemon">Lemon</gln-option>\n    <gln-option value="orange">Orange</gln-option>\n    <gln-option value="kiwi">Kiwi</gln-option>\n  '),e.TgZ(121,"strong"),e._uU(122,"</gln-option-group>"),e.qZA(),e._uU(123,"  \n  <"),e.TgZ(124,"strong"),e._uU(125,"gln-autocomplete"),e.qZA(),e._uU(126,">"),e.qZA()()(),e._UZ(127,"hr",26)),2&o){const p=e.MAs(10),u=e.MAs(27),h=e.MAs(43),A=e.MAs(59);e.Q6J("ngIf",!0),e.xp6(1),e.Q6J("formGroup",n.formGroup01),e.xp6(7),e.Q6J("glnAutocompleteTrigger",p),e.xp6(17),e.Q6J("glnAutocompleteTrigger",u),e.xp6(16),e.Q6J("glnAutocompleteTrigger",h),e.xp6(16),e.Q6J("glnAutocompleteTrigger",A),e.xp6(16),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(4),e.Q6J("label",n.labelTs),e.xp6(4),e.Q6J("label",n.labelCss),e.xp6(7),e.Q6J("href",n.urlCmAutocomplete+"#basic-group",e.LSH)}},dependencies:[g.O5,i._Y,i.Fj,i.JJ,i.JL,i.sg,i.u,m.pp,m.ib,m.yz,m.yK,d.SP,d.uX,a.MY,a.jA,a.j7,a.WO],styles:["app-cm-autocomplete-basic{display:block}app-cm-autocomplete-basic .acb-input{border-width:1px;box-sizing:border-box;font-size:1em;line-height:2em;margin-top:.8em;padding:2px 9px}\n"],encapsulation:2,changeDetection:0}),t})();function O(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ",n.capitalizeFirstLetter(o)," ")}}function Q(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ",n.capitalizeFirstLetter(o)," ")}}function z(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ",n.capitalizeFirstLetter(o)," ")}}function L(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ",n.capitalizeFirstLetter(o)," ")}}function k(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ",n.capitalizeFirstLetter(o)," ")}}function G(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ",n.capitalizeFirstLetter(o)," ")}}function M(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ",n.capitalizeFirstLetter(o)," ")}}function j(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ",n.capitalizeFirstLetter(o)," ")}}function E(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ",n.capitalizeFirstLetter(o)," ")}}function H(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij("",n.capitalizeFirstLetter(o)," ")}}function I(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij("",n.capitalizeFirstLetter(o)," ")}}function B(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij("",n.capitalizeFirstLetter(o)," ")}}function Y(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ",n.capitalizeFirstLetter(o)," ")}}function P(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ",n.capitalizeFirstLetter(o)," ")}}function D(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ",n.capitalizeFirstLetter(o)," ")}}function $(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ",n.capitalizeFirstLetter(o)," ")}}function R(t,l){if(1&t&&(e.TgZ(0,"gln-option",74),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ",n.capitalizeFirstLetter(o)," ")}}let V=(()=>{class t{constructor(){this.labelShowSource=r.sx,this.labelOutlined=r.SR,this.labelUnderline=r.kP,this.labelStandard=r.Qb,this.labelHtml=r.zC,this.labelTs=r.QS,this.labelCss=r.Er,this.urlCmAutocomplete="/"+c.g.get("URL_COMPONENTS")+"/"+c.g.get("URL_COMPONENTS_AUTOCOMPLETE"),this.fruitsB=["mango","ripe lemon","gorgeous orange","african cherry orange","succulent watermelon"],this.fruits=["apple","apricot","avocado","banana","black currant","blackberry","blueberry","cherry","coconut","cranberry","dragonfruit","fig","goji berry","grape","grapefruit","grapes","guava","iwi","jackfruit","jamun","jujube","lemon","lime","longan","loquat","lychee","mandarin","mango","melon","mulberry","nectarine","kiwi","olive","orange","palm fruit","papaya","passion fruit","peach","pear","persimmon","pineapple","plum","pomegranate","prickly pear","pumpkin","quince","raspberry","red currant","sapodilla","satsuma","strawberry","sweet lemon","tamarind","tangerine","watermelon"],this.exterior02b="outlined",this.control02b={model02a:new i.NI(null,[]),model02b:new i.NI(null,[]),model02c:new i.NI(null,[]),model02d:new i.NI(null,[])},this.formGroup02b=new i.cw(this.control02b),this.exterior02c="outlined",this.control02c={model02f:new i.NI(null,[]),model02g:new i.NI(null,[]),model02h:new i.NI(null,[]),model02i:new i.NI(null,[])},this.formGroup02c=new i.cw(this.control02c),this.exterior02d="outlined",this.control02d={model02k:new i.NI(null,[]),model02l:new i.NI(null,[]),model02m:new i.NI(null,[]),model02n:new i.NI(null,[])},this.formGroup02d=new i.cw(this.control02d),this.exterior02e="outlined",this.control02e={model02p:new i.NI(null,[]),model02q:new i.NI(null,[]),model02r:new i.NI(null,[]),model02s:new i.NI(null,[]),model02t:new i.NI(null,[])},this.formGroup02e=new i.cw(this.control02e)}capitalizeFirstLetter(o){return o?o[0].toUpperCase()+o.slice(1):""}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-cm-autocomplete-attributes"]],inputs:{labelShowSource:"labelShowSource",labelOutlined:"labelOutlined",labelUnderline:"labelUnderline",labelStandard:"labelStandard",labelHtml:"labelHtml",labelTs:"labelTs",labelCss:"labelCss"},decls:405,vars:107,consts:[["mr-vr",""],[1,"app-hover-link"],[3,"href"],["id","attributes-supported01",1,"app-hover-link"],["value","exterior02b",3,"change"],["value","outlined",3,"checked"],["value","underline",3,"checked"],["value","standard",3,"checked"],["novalidate","","autocomplete","off",3,"formGroup"],[1,"app-group"],[1,"app-elem"],["formControlName","model02a","label","Fruit","helperText","Used: id, position.",1,"aca-middle",3,"exterior","glnAutocompleteTrigger"],["id","unique_id_autocomplete02a","position","start"],["autocomplete02a","glnAutocomplete"],[3,"value",4,"ngFor","ngForOf"],["formControlName","model02b","label","Fruit","helperText","Used: position='center'.",1,"aca-middle",3,"exterior","glnAutocompleteTrigger"],["position","center"],["autocomplete02b","glnAutocomplete"],["formControlName","model02c","label","Fruit","helperText","Used: position='end'.",1,"aca-middle",3,"exterior","glnAutocompleteTrigger"],["position","end"],["autocomplete02c","glnAutocomplete"],["formControlName","model02d","label","Fruit","helperText","Used: isDisabled.",1,"aca-middle",3,"exterior","glnAutocompleteTrigger"],["isDisabled",""],["autocomplete02d","glnAutocomplete"],["animationDuration","0ms"],[3,"label"],["source","html"],["source","ts"],["source","css"],["br-nn",""],["mr-vr","","id","attributes-supported02"],["value","exterior02c",3,"change"],["formControlName","model02f","label","Fruit","helperText","Not used: isMaxWd.",1,"aca-medium",3,"exterior","glnAutocompleteTrigger"],["autocomplete02f","glnAutocomplete"],["formControlName","model02g","label","Fruit","helperText","Used: isMaxWd.",1,"aca-medium",3,"exterior","glnAutocompleteTrigger"],["isMaxWd",""],["autocomplete02g","glnAutocomplete"],["formControlName","model02h","label","Fruit","helperText","css: --glnac-max-width",2,"width","161px",3,"exterior","glnAutocompleteTrigger"],[2,"--glnac-max-width","185px"],["autocomplete02h","glnAutocomplete"],["formControlName","model02i","label","Fruit","helperText","Used: panelClass.",1,"aca-medium",3,"exterior","glnAutocompleteTrigger"],["panelClass","aca-panel-color"],["autocomplete02i","glnAutocomplete"],["mr-vr","","id","attributes-supported03"],["value","exterior02d",3,"change"],["formControlName","model02k","label","Fruit","helperText","Used: visibleSize=6.",2,"width","161px",3,"exterior","glnAutocompleteTrigger"],[3,"visibleSize"],["autocomplete02k","glnAutocomplete"],["formControlName","model02l","label","Fruit","helperText","css: --glnac-max-height",1,"aca-normal",3,"exterior","glnAutocompleteTrigger"],[2,"--glnac-max-height","180px"],["autocomplete02l","glnAutocomplete"],["formControlName","model02m","label","Fruit","helperText","Used: isNoAnimation.",1,"aca-normal",3,"exterior","glnAutocompleteTrigger"],["isNoAnimation",""],["autocomplete02m","glnAutocomplete"],["formControlName","model02n","label","Fruit","helperText","css: --glnac-elevation",1,"aca-normal",3,"exterior","glnAutocompleteTrigger"],[2,"--glnac-elevation","none"],["autocomplete02n","glnAutocomplete"],["mr-vr","","id","attributes-supported04"],["value","exterior02e",3,"change"],["formControlName","model02p","label","Fruit","helperText","Used: isClearOnEscape.",1,"aca-elem",3,"exterior","glnAutocompleteTrigger"],["isClearOnEscape","",3,"visibleSize"],["autocomplete02p","glnAutocomplete"],["formControlName","model02q","label","Fruit","helperText","isNoCloseOnSelect, isNoRipple",2,"width","192px",3,"exterior","glnAutocompleteTrigger"],["isNoRipple","","isNoCloseOnSelect","",3,"visibleSize"],["autocomplete02q","glnAutocomplete"],["formControlName","model02r","label","Fruit","helperText","Used: isNoOpenOnMouse.",1,"aca-elem",3,"exterior","glnAutocompleteTrigger"],["isNoOpenOnMouse","",3,"visibleSize"],["autocomplete02r","glnAutocomplete"],["formControlName","model02s","label","Fruit","helperText","Used: isOpenOnFocus.",1,"aca-elem",3,"exterior","glnAutocompleteTrigger"],["isOpenOnFocus","",3,"visibleSize"],["autocomplete02s","glnAutocomplete"],["formControlName","model02t","label","Fruit","helperText","css: font-size: 1.125em;",1,"aca-elem",3,"exterior","glnAutocompleteTrigger"],["isOpenOnFocus","",2,"font-size","1.125em",3,"visibleSize"],["autocomplete02t","glnAutocomplete"],[3,"value"]],template:function(o,n){if(1&o&&(e.TgZ(0,"section",0)(1,"h3",1),e._uU(2," Attributes. "),e.TgZ(3,"a",2),e._uU(4,"#"),e.qZA()(),e.TgZ(5,"h4",3),e._uU(6," The following attributes are supported 1: "),e.TgZ(7,"a",2),e._uU(8,"#"),e.qZA()(),e.TgZ(9,"ul")(10,"li"),e._uU(11,' "id" - parameter for defining the unique identifier of the field (id="unique_identifier"); '),e.qZA(),e.TgZ(12,"li"),e._uU(13,' "config" - Defines a configuration object. '),e.TgZ(14,"a",2),e._uU(15,"More details."),e.qZA()(),e.TgZ(16,"li"),e._uU(17,'"isDisabled" - a sign that the field is disabled (isDisabled);'),e.qZA(),e.TgZ(18,"li"),e._uU(19,' "position" - Defines horizontal positioning. It can take the following values: '),e.TgZ(20,"ul")(21,"li"),e._uU(22,'"start" - positioned at the left edge (default);'),e.qZA(),e.TgZ(23,"li"),e._uU(24,'"center" - positioned in the middle;'),e.qZA(),e.TgZ(25,"li"),e._uU(26,'"end" - positioned on the right edge;'),e.qZA()()()()(),e.TgZ(27,"section",0)(28,"span"),e._uU(29,"exterior: "),e.qZA(),e.TgZ(30,"mat-button-toggle-group",4),e.NdJ("change",function(u){return n.exterior02b=u.value}),e.TgZ(31,"mat-button-toggle",5),e._uU(32),e.qZA(),e.TgZ(33,"mat-button-toggle",6),e._uU(34),e.qZA(),e.TgZ(35,"mat-button-toggle",7),e._uU(36),e.qZA()()(),e.TgZ(37,"form",8)(38,"div",9)(39,"div",10)(40,"div")(41,"small")(42,"em"),e._uU(43,"Attribute: id, position='start' (default)."),e.qZA()()(),e._UZ(44,"gln-input",11),e.TgZ(45,"gln-autocomplete",12,13),e.YNc(47,O,2,2,"gln-option",14),e.qZA()(),e.TgZ(48,"div",10)(49,"div")(50,"small")(51,"em"),e._uU(52,"Attribute: position='center'."),e.qZA()()(),e._UZ(53,"gln-input",15),e.TgZ(54,"gln-autocomplete",16,17),e.YNc(56,Q,2,2,"gln-option",14),e.qZA()(),e.TgZ(57,"div",10)(58,"div")(59,"small")(60,"em"),e._uU(61,"Attribute: position='end'."),e.qZA()()(),e._UZ(62,"gln-input",18),e.TgZ(63,"gln-autocomplete",19,20),e.YNc(65,z,2,2,"gln-option",14),e.qZA()(),e.TgZ(66,"div",10)(67,"div")(68,"small")(69,"em"),e._uU(70,"Attribute: isDisabled."),e.qZA()()(),e._UZ(71,"gln-input",21),e.TgZ(72,"gln-autocomplete",22,23),e.YNc(74,L,2,2,"gln-option",14),e.qZA()()()(),e.TgZ(75,"section",0)(76,"mat-accordion")(77,"mat-expansion-panel")(78,"mat-expansion-panel-header")(79,"mat-panel-title"),e._uU(80),e.qZA()(),e.TgZ(81,"mat-tab-group",24)(82,"mat-tab",25)(83,"code")(84,"pre",26),e._uU(85,'<form [formGroup]="formGroup02b"\n  novalidate\n  autocomplete="off">\n\n  <div class="app-group">\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Attribute: id, position=\'start\' (default).</em>\n        </small>\n      </div>\n      <gln-input formControlName="model02a"\n        class="aca-middle"\n        label="Fruit"\n        [exterior]="exterior02b"\n        [glnAutocompleteTrigger]="autocomplete02a"\n        helperText="Used: id, position.">\n      </gln-input>\n      <gln-autocomplete #autocomplete02a="glnAutocomplete"\n        id="unique_id_autocomplete02a"\n        position="start">\n        <gln-option *ngFor="let item of fruitsB"\n          [value]="item">\n          '),e.TgZ(86,"b"),e._uU(87,"{"),e.qZA(),e._uU(88,'{ capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Attribute: position=\'center\'.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model02b"\n        class="aca-middle"\n        label="Fruit"\n        [exterior]="exterior02b"\n        [glnAutocompleteTrigger]="autocomplete02b"\n        helperText="Used: position=\'center\'.">\n      </gln-input>\n      <gln-autocomplete #autocomplete02b="glnAutocomplete"\n        position="center">\n        <gln-option *ngFor="let item of fruitsB"\n          [value]="item">\n          '),e.TgZ(89,"b"),e._uU(90,"{"),e.qZA(),e._uU(91,'{ capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Attribute: position=\'end\'.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model02c"\n        class="aca-middle"\n        label="Fruit"\n        [exterior]="exterior02b"\n        [glnAutocompleteTrigger]="autocomplete02c"\n        helperText="Used: position=\'end\'.">\n      </gln-input>\n      <gln-autocomplete #autocomplete02c="glnAutocomplete"\n        position="end">\n        <gln-option *ngFor="let item of fruitsB"\n          [value]="item">\n          '),e.TgZ(92,"b"),e._uU(93,"{"),e.qZA(),e._uU(94,'{ capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Attribute: isDisabled.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model02d"\n        class="aca-middle"\n        label="Fruit"\n        [exterior]="exterior02b"\n        [glnAutocompleteTrigger]="autocomplete02d"\n        helperText="Used: isDisabled.">\n      </gln-input>\n      <gln-autocomplete #autocomplete02d="glnAutocomplete"\n        isDisabled>\n        <gln-option *ngFor="let item of fruitsB"\n          [value]="item">\n          '),e.TgZ(95,"b"),e._uU(96,"{"),e.qZA(),e._uU(97,"{ capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n  </div>\n\n</form>"),e.qZA()()(),e.TgZ(98,"mat-tab",25)(99,"code")(100,"pre",27),e._uU(101,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormGroup, FormControl \n} from '@angular/forms';\n\n@Component({\n  selector: 'app-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AutocompleteComponent {\n  public fruitsB = [\n    'mango', 'ripe lemon', 'gorgeous orange',\n    'african cherry orange', 'succulent watermelon'\n  ];\n  public exterior02b = 'outlined';\n  public control02b = {\n    model02a: new FormControl(null, []),\n    model02b: new FormControl(null, []),\n    model02c: new FormControl(null, []),\n    model02d: new FormControl(null, []),\n  };\n  public formGroup02b: FormGroup = new FormGroup(this.control02b);\n\n  public capitalizeFirstLetter(value: string): string {\n    return value ? value[0].toUpperCase() + value.slice(1) : '';\n  }\n}"),e.qZA()()(),e.TgZ(102,"mat-tab",25)(103,"code")(104,"pre",28),e._uU(105,"app-autocomplete {\n  .app-group {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .app-elem {\n    min-width: 26ch;\n    margin: 10px 10px;\n  }\n  .aca-middle {\n    width: 160px;\n\t}\n}"),e.qZA()()()()()()(),e._UZ(106,"hr",29),e.TgZ(107,"section",30)(108,"h4",1),e._uU(109," Attributes are also supported 2: "),e.TgZ(110,"a",2),e._uU(111,"#"),e.qZA()(),e.TgZ(112,"ul")(113,"li"),e._uU(114,' "isMaxWd" - set the maximum width when expanding the dropdown list of options. '),e._UZ(115,"br"),e._uU(116," Without this setting, the maximum width of the options panel is determined by its content. "),e._UZ(117,"br"),e._uU(118," The value of the minimum width of the options panel is always equal to the width of the parent. "),e.qZA(),e.TgZ(119,"li"),e._uU(120," css: '--glnac-min-width: 180px;' - defines the minimum width of the option list dropdown list of options. "),e.qZA(),e.TgZ(121,"li"),e._uU(122," css: '--glnac-max-width: 180px;' - defines the maximum width of the option list dropdown list of options. "),e.qZA(),e.TgZ(123,"li"),e._uU(124," \"panelClass\" - set the classes to be applied to the options panel. Supports the same syntax as 'ngClass'. "),e.qZA()()(),e.TgZ(125,"section",0)(126,"span"),e._uU(127,"exterior: "),e.qZA(),e.TgZ(128,"mat-button-toggle-group",31),e.NdJ("change",function(u){return n.exterior02c=u.value}),e.TgZ(129,"mat-button-toggle",5),e._uU(130),e.qZA(),e.TgZ(131,"mat-button-toggle",6),e._uU(132),e.qZA(),e.TgZ(133,"mat-button-toggle",7),e._uU(134),e.qZA()()(),e.TgZ(135,"form",8)(136,"div",9)(137,"div",10)(138,"div")(139,"small")(140,"em"),e._uU(141,"Attribute: without isMaxWd."),e.qZA()()(),e._UZ(142,"gln-input",32),e.TgZ(143,"gln-autocomplete",null,33),e.YNc(145,k,2,2,"gln-option",14),e.qZA()(),e.TgZ(146,"div",10)(147,"div")(148,"small")(149,"em"),e._uU(150,"Attribute: with isMaxWd."),e.qZA()()(),e._UZ(151,"gln-input",34),e.TgZ(152,"gln-autocomplete",35,36),e.YNc(154,G,2,2,"gln-option",14),e.qZA()(),e.TgZ(155,"div",10)(156,"div")(157,"small")(158,"em"),e._uU(159,"css: '--glnac-max-width: 185px;'."),e.qZA()()(),e._UZ(160,"gln-input",37),e.TgZ(161,"gln-autocomplete",38,39),e.YNc(163,M,2,2,"gln-option",14),e.qZA()(),e.TgZ(164,"div",10)(165,"div")(166,"small")(167,"em"),e._uU(168,"Attribute: panelClass."),e.qZA()()(),e._UZ(169,"gln-input",40),e.TgZ(170,"gln-autocomplete",41,42),e.YNc(172,j,2,2,"gln-option",14),e.qZA()()()(),e.TgZ(173,"section",0)(174,"mat-accordion")(175,"mat-expansion-panel")(176,"mat-expansion-panel-header")(177,"mat-panel-title"),e._uU(178),e.qZA()(),e.TgZ(179,"mat-tab-group",24)(180,"mat-tab",25)(181,"code")(182,"pre",26),e._uU(183,'<form [formGroup]="formGroup02c"\n  novalidate\n  autocomplete="off">\n\n  <div class="app-group">\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Attribute: without isMaxWd.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model02f"\n        class="aca-medium"\n        label="Fruit"\n        [exterior]="exterior02c"\n        [glnAutocompleteTrigger]="autocomplete02f"\n        helperText="Not used: isMaxWd.">\n      </gln-input>\n      <gln-autocomplete #autocomplete02f="glnAutocomplete">\n        <gln-option *ngFor="let item of fruitsB"\n          [value]="item">\n          '),e.TgZ(184,"b"),e._uU(185,"{"),e.qZA(),e._uU(186,'{ capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Attribute: with isMaxWd.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model02g"\n        class="aca-medium"\n        label="Fruit"\n        [exterior]="exterior02c"\n        [glnAutocompleteTrigger]="autocomplete02g"\n        helperText="Used: isMaxWd.">\n      </gln-input>\n      <gln-autocomplete #autocomplete02g="glnAutocomplete"\n        isMaxWd>\n        <gln-option *ngFor="let item of fruitsB"\n          [value]="item">\n          '),e.TgZ(187,"b"),e._uU(188,"{"),e.qZA(),e._uU(189,'{ capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>css: \'--glnac-max-width: 185px;\'.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model02h"\n        style="width: 161px;"\n        label="Fruit"\n        [exterior]="exterior02c"\n        [glnAutocompleteTrigger]="autocomplete02h"\n        helperText="css: --glnac-max-width">\n      </gln-input>\n      <gln-autocomplete #autocomplete02h="glnAutocomplete"\n        style="--glnac-max-width: 185px;">\n        <gln-option *ngFor="let item of fruitsB"\n          [value]="item">\n          '),e.TgZ(190,"b"),e._uU(191,"{"),e.qZA(),e._uU(192,'{ capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Attribute: panelClass.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model02i"\n        class="aca-medium"\n        label="Fruit"\n        [exterior]="exterior02c"\n        [glnAutocompleteTrigger]="autocomplete02i"\n        helperText="Used: panelClass.">\n      </gln-input>\n      <gln-autocomplete #autocomplete02i="glnAutocomplete"\n        panelClass="aca-panel-color">\n        <gln-option *ngFor="let item of fruitsB"\n          [value]="item">\n          '),e.TgZ(193,"b"),e._uU(194,"{"),e.qZA(),e._uU(195,"{ capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n  </div>\n\n</form>"),e.qZA()()(),e.TgZ(196,"mat-tab",25)(197,"code")(198,"pre",27),e._uU(199,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormGroup, FormControl \n} from '@angular/forms';\n\n@Component({\n  selector: 'app-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AutocompleteComponent {\n  public fruitsB = [\n    'mango', 'ripe lemon', 'gorgeous orange',\n    'african cherry orange', 'succulent watermelon'\n  ];\n  \n  public exterior02c = 'outlined';\n  public control02c = {\n    model02f: new FormControl(null, []),\n    model02g: new FormControl(null, []),\n    model02h: new FormControl(null, []),\n    model02i: new FormControl(null, []),\n  };\n  public formGroup02c: FormGroup = new FormGroup(this.control02c);\n\n  public capitalizeFirstLetter(value: string): string {\n    return value ? value[0].toUpperCase() + value.slice(1) : '';\n  }\n}"),e.qZA()()(),e.TgZ(200,"mat-tab",25)(201,"code")(202,"pre",28),e._uU(203,"app-autocomplete {\n  .app-group {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .app-elem {\n    min-width: 26ch;\n    margin: 10px 10px;\n  }\n  .aca-medium {\n    width: 160px;\n\t}\n  .aca-panel-color {\n    color: blue;\n    background-color: honeydew;\n  }\n}"),e.qZA()()()()()()(),e._UZ(204,"hr",29),e.TgZ(205,"section",43)(206,"h4",1),e._uU(207," Attributes are also supported 3: "),e.TgZ(208,"a",2),e._uU(209,"#"),e.qZA()(),e.TgZ(210,"ul")(211,"li"),e._uU(212,' "visibleSize" - sets the maximum number of visible option elements. '),e._UZ(213,"br"),e._uU(214," The options bar is set to "),e.TgZ(215,"i"),e._uU(216,"max-height = optionHeight * visibleSize"),e.qZA(),e._uU(217,". "),e._UZ(218,"br"),e._uU(219," Where option height is "),e.TgZ(220,"i"),e._uU(221,"optionHeight = lineHeight + 2 * 0.375 * fontSize"),e.qZA(),e._uU(222,"; "),e.qZA(),e.TgZ(223,"li"),e._uU(224," css: '--glnac-max-height: 180px;' - defines the maximum height of the option list dropdown list of options. "),e.qZA(),e.TgZ(225,"li"),e._uU(226,' "isNoAnimation" - hide the display of animation when expanding the dropdown list of options. '),e.qZA(),e.TgZ(227,"li"),e._uU(228," css: '--glnac-elevation: none;' - hide the display of shadow effects when expanding the dropdown list of options. "),e.qZA()()(),e.TgZ(229,"section",0)(230,"span"),e._uU(231,"exterior: "),e.qZA(),e.TgZ(232,"mat-button-toggle-group",44),e.NdJ("change",function(u){return n.exterior02d=u.value}),e.TgZ(233,"mat-button-toggle",5),e._uU(234),e.qZA(),e.TgZ(235,"mat-button-toggle",6),e._uU(236),e.qZA(),e.TgZ(237,"mat-button-toggle",7),e._uU(238),e.qZA()()(),e.TgZ(239,"form",8)(240,"div",9)(241,"div",10)(242,"div")(243,"small")(244,"em"),e._uU(245,"Attribute: visibleSize=6."),e.qZA()()(),e._UZ(246,"gln-input",45),e.TgZ(247,"gln-autocomplete",46,47),e.YNc(249,E,2,2,"gln-option",14),e.qZA()(),e.TgZ(250,"div",10)(251,"div")(252,"small")(253,"em"),e._uU(254,"css: '--glnac-max-height: 180px;'."),e.qZA()()(),e._UZ(255,"gln-input",48),e.TgZ(256,"gln-autocomplete",49,50),e.YNc(258,H,2,2,"gln-option",14),e.qZA()(),e.TgZ(259,"div",10)(260,"div")(261,"small")(262,"em"),e._uU(263,"Attribute: isNoAnimation."),e.qZA()()(),e._UZ(264,"gln-input",51),e.TgZ(265,"gln-autocomplete",52,53),e.YNc(267,I,2,2,"gln-option",14),e.qZA()(),e.TgZ(268,"div",10)(269,"div")(270,"small")(271,"em"),e._uU(272,"css: '--glnac-elevation: none;'."),e.qZA()()(),e._UZ(273,"gln-input",54),e.TgZ(274,"gln-autocomplete",55,56),e.YNc(276,B,2,2,"gln-option",14),e.qZA()()()(),e.TgZ(277,"section",0)(278,"mat-accordion")(279,"mat-expansion-panel")(280,"mat-expansion-panel-header")(281,"mat-panel-title"),e._uU(282),e.qZA()(),e.TgZ(283,"mat-tab-group",24)(284,"mat-tab",25)(285,"code")(286,"pre",26),e._uU(287,'<form [formGroup]="formGroup02d"\n  novalidate\n  autocomplete="off">\n\n  <div class="app-group">\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Attribute: visibleSize=6.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model02k"\n        style="width: 161px;"\n        label="Fruit"\n        [exterior]="exterior02d"\n        [glnAutocompleteTrigger]="autocomplete02k"\n        helperText="Used: visibleSize=6.">\n      </gln-input>\n      <gln-autocomplete #autocomplete02k="glnAutocomplete"\n        [visibleSize]="6">\n        <gln-option *ngFor="let item of fruits"\n          [value]="item">\n          '),e.TgZ(288,"b"),e._uU(289,"{"),e.qZA(),e._uU(290,'{ capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>css: \'--glnac-max-height: 180px;\'.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model02l"\n        class="aca-normal"\n        label="Fruit"\n        [exterior]="exterior02d"\n        [glnAutocompleteTrigger]="autocomplete02l"\n        helperText="css: --glnac-max-height">\n      </gln-input>\n      <gln-autocomplete #autocomplete02l="glnAutocomplete"\n        style="--glnac-max-height: 180px;">\n        <gln-option *ngFor="let item of fruits"\n          [value]="item">'),e.TgZ(291,"b"),e._uU(292,"{"),e.qZA(),e._uU(293,'{ capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Attribute: isNoAnimation.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model02m"\n        class="aca-normal"\n        label="Fruit"\n        [exterior]="exterior02d"\n        [glnAutocompleteTrigger]="autocomplete02m"\n        helperText="Used: isNoAnimation.">\n      </gln-input>\n      <gln-autocomplete #autocomplete02m="glnAutocomplete"\n        isNoAnimation>\n        <gln-option *ngFor="let item of fruitsB"\n          [value]="item">'),e.TgZ(294,"b"),e._uU(295,"{"),e.qZA(),e._uU(296,'{ capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>css: \'--glnac-elevation: none;\'.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model02n"\n        class="aca-normal"\n        label="Fruit"\n        [exterior]="exterior02d"\n        [glnAutocompleteTrigger]="autocomplete02n"\n        helperText="css: --glnac-elevation">\n      </gln-input>\n      <gln-autocomplete #autocomplete02n="glnAutocomplete"\n        style="--glnac-elevation: none;">\n        <gln-option *ngFor="let item of fruitsB"\n          [value]="item">'),e.TgZ(297,"b"),e._uU(298,"{"),e.qZA(),e._uU(299,"{ capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n  </div>\n\n</form>"),e.qZA()()(),e.TgZ(300,"mat-tab",25)(301,"code")(302,"pre",27),e._uU(303,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormGroup, FormControl \n} from '@angular/forms';\n\n@Component({\n  selector: 'app-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AutocompleteComponent {\n  public fruitsB = [\n    'mango', 'ripe lemon', 'gorgeous orange',\n    'african cherry orange', 'succulent watermelon'\n  ];\n  public fruits = [\n    'apple'     , 'apricot'  , 'avocado'   , 'banana'    , 'black currant',\n    'blackberry', 'blueberry', 'cherry'    , 'coconut'   , 'cranberry'    ,\n    'dragonfruit', 'fig'     , 'goji berry', 'grape'     , 'grapefruit'   ,\n    'grapes'    , 'guava'    , 'iwi'       , 'jackfruit' , 'jamun'        ,\n    'jujube'    , 'lemon'    , 'lime'      , 'longan'    , 'loquat'       ,\n    'lychee'    , 'mandarin' , 'mango'     , 'melon'     , 'mulberry'     ,\n    'nectarine' , 'kiwi'     , 'olive'     , 'orange'    , 'palm fruit'   ,\n    'papaya', 'passion fruit', 'peach'     , 'pear'      , 'persimmon'    ,\n    'pineapple' , 'plum'  , 'pomegranate', 'prickly pear', 'pumpkin'      ,\n    'quince'    , 'raspberry', 'red currant', 'sapodilla', 'satsuma'      ,\n    'strawberry','sweet lemon', 'tamarind' , 'tangerine' , 'watermelon'\n  ];\n  public exterior02d = 'outlined';\n  public control02d = {\n    model02k: new FormControl(null, []),\n    model02l: new FormControl(null, []),\n    model02m: new FormControl(null, []),\n    model02n: new FormControl(null, []),\n  };\n  public formGroup02d: FormGroup = new FormGroup(this.control02d);\n\n  public capitalizeFirstLetter(value: string): string {\n    return value ? value[0].toUpperCase() + value.slice(1) : '';\n  }\n}"),e.qZA()()(),e.TgZ(304,"mat-tab",25)(305,"code")(306,"pre",28),e._uU(307,"app-autocomplete {\n  .app-group {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .app-elem {\n    min-width: 26ch;\n    margin: 10px 10px;\n  }\n  .aca-normal {\n    width: 160px;\n\t}\n}"),e.qZA()()()()()()(),e._UZ(308,"hr",29),e.TgZ(309,"section",57)(310,"h4",1),e._uU(311," Attributes are also supported 4: "),e.TgZ(312,"a",2),e._uU(313,"#"),e.qZA()(),e.TgZ(314,"ul")(315,"li"),e._uU(316," \"isClearOnEscape\" - clear the input field when pressing 'Escape'. "),e.qZA(),e.TgZ(317,"li"),e._uU(318,' "isNoCloseOnSelect" - the options panel will not close after an option is selected. '),e.qZA(),e.TgZ(319,"li"),e._uU(320,' "isNoRipple" - Disables the ripple effect. '),e.qZA(),e.TgZ(321,"li"),e._uU(322,' "isNoOpenOnMouse" - the options panel will not open/close on mouse click. '),e.qZA(),e.TgZ(323,"li"),e._uU(324,' "isOpenOnFocus" - the options panel opens after receiving input focus. '),e.qZA(),e.TgZ(325,"li"),e._uU(326,' "css: font-size: 1.125em;" - You can change the font size for GlnAutocomplete and that font size will be applied to the available options in the list. '),e.qZA()()(),e.TgZ(327,"section",0)(328,"span"),e._uU(329,"exterior: "),e.qZA(),e.TgZ(330,"mat-button-toggle-group",58),e.NdJ("change",function(u){return n.exterior02e=u.value}),e.TgZ(331,"mat-button-toggle",5),e._uU(332),e.qZA(),e.TgZ(333,"mat-button-toggle",6),e._uU(334),e.qZA(),e.TgZ(335,"mat-button-toggle",7),e._uU(336),e.qZA()()(),e.TgZ(337,"form",8)(338,"div",9)(339,"div",10)(340,"div")(341,"small")(342,"em"),e._uU(343,"Attribute: isClearOnEscape."),e.qZA()()(),e._UZ(344,"gln-input",59),e.TgZ(345,"gln-autocomplete",60,61),e.YNc(347,Y,2,2,"gln-option",14),e.qZA()(),e.TgZ(348,"div",10)(349,"div")(350,"small")(351,"em"),e._uU(352,"Attribute: isNoCloseOnSelect, isNoRipple."),e.qZA()()(),e._UZ(353,"gln-input",62),e.TgZ(354,"gln-autocomplete",63,64),e.YNc(356,P,2,2,"gln-option",14),e.qZA()(),e.TgZ(357,"div",10)(358,"div")(359,"small")(360,"em"),e._uU(361,"Attribute: isNoOpenOnMouse."),e.qZA(),e._uU(362,"(open:\u2b06,\u2b07) "),e.qZA()(),e._UZ(363,"gln-input",65),e.TgZ(364,"gln-autocomplete",66,67),e.YNc(366,D,2,2,"gln-option",14),e.qZA()(),e.TgZ(367,"div",10)(368,"div")(369,"small")(370,"em"),e._uU(371,"Attribute: isOpenOnFocus."),e.qZA()()(),e._UZ(372,"gln-input",68),e.TgZ(373,"gln-autocomplete",69,70),e.YNc(375,$,2,2,"gln-option",14),e.qZA()(),e.TgZ(376,"div",10)(377,"div")(378,"small")(379,"em"),e._uU(380,"css: font-size: 1.125em;"),e.qZA()()(),e._UZ(381,"gln-input",71),e.TgZ(382,"gln-autocomplete",72,73),e.YNc(384,R,2,2,"gln-option",14),e.qZA()()()(),e.TgZ(385,"section",0)(386,"mat-accordion")(387,"mat-expansion-panel")(388,"mat-expansion-panel-header")(389,"mat-panel-title"),e._uU(390),e.qZA()(),e.TgZ(391,"mat-tab-group",24)(392,"mat-tab",25)(393,"code")(394,"pre",26),e._uU(395,'<form [formGroup]="formGroup02d"\n\n\n</form>'),e.qZA()()(),e.TgZ(396,"mat-tab",25)(397,"code")(398,"pre",27),e._uU(399,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormGroup, FormControl \n} from '@angular/forms';\n\n@Component({\n  selector: 'app-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AutocompleteComponent {\n  // prettier-ignore\n  public fruits = [\n    'apple'     , 'apricot'  , 'avocado'   , 'banana'    , 'black currant',\n    'blackberry', 'blueberry', 'cherry'    , 'coconut'   , 'cranberry'    ,\n    'dragonfruit', 'fig'     , 'goji berry', 'grape'     , 'grapefruit'   ,\n    'grapes'    , 'guava'    , 'iwi'       , 'jackfruit' , 'jamun'        ,\n    'jujube'    , 'lemon'    , 'lime'      , 'longan'    , 'loquat'       ,\n    'lychee'    , 'mandarin' , 'mango'     , 'melon'     , 'mulberry'     ,\n    'nectarine' , 'kiwi'     , 'olive'     , 'orange'    , 'palm fruit'   ,\n    'papaya', 'passion fruit', 'peach'     , 'pear'      , 'persimmon'    ,\n    'pineapple' , 'plum'  , 'pomegranate', 'prickly pear', 'pumpkin'      ,\n    'quince'    , 'raspberry', 'red currant', 'sapodilla', 'satsuma'      ,\n    'strawberry','sweet lemon', 'tamarind' , 'tangerine' , 'watermelon'\n  ];\n  public exterior02e = 'outlined';\n  public control02e = {\n    model02p: new FormControl(null, []),\n    model02q: new FormControl(null, []),\n    model02r: new FormControl(null, []),\n    model02s: new FormControl(null, []),\n    model02t: new FormControl(null, []),\n  };\n  public formGroup02e: FormGroup = new FormGroup(this.control02e);\n\n  public capitalizeFirstLetter(value: string): string {\n    return value ? value[0].toUpperCase() + value.slice(1) : '';\n  }\n}"),e.qZA()()(),e.TgZ(400,"mat-tab",25)(401,"code")(402,"pre",28),e._uU(403,"app-autocomplete {\n  .app-group {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .app-elem {\n    min-width: 26ch;\n    margin: 10px 10px;\n  }\n  .aca-normal {\n    width: 160px;\n\t}\n}"),e.qZA()()()()()()(),e._UZ(404,"hr",29)),2&o){const p=e.MAs(46),u=e.MAs(55),h=e.MAs(64),A=e.MAs(73),Te=e.MAs(144),ve=e.MAs(153),qe=e.MAs(162),xe=e.MAs(171),Ce=e.MAs(248),we=e.MAs(257),ye=e.MAs(266),Fe=e.MAs(275),Se=e.MAs(346),Ne=e.MAs(355),Je=e.MAs(365),Oe=e.MAs(374),Qe=e.MAs(383);e.xp6(3),e.Q6J("href",n.urlCmAutocomplete+"#Attributes",e.LSH),e.xp6(4),e.Q6J("href",n.urlCmAutocomplete+"#attributes-supported01",e.LSH),e.xp6(7),e.Q6J("href",n.urlCmAutocomplete+"#config-interface",e.LSH),e.xp6(17),e.Q6J("checked","outlined"===n.exterior02b),e.xp6(1),e.Oqu(n.labelOutlined),e.xp6(1),e.Q6J("checked","underline"===n.exterior02b),e.xp6(1),e.Oqu(n.labelUnderline),e.xp6(1),e.Q6J("checked","standard"===n.exterior02b),e.xp6(1),e.Oqu(n.labelStandard),e.xp6(1),e.Q6J("formGroup",n.formGroup02b),e.xp6(7),e.Q6J("exterior",n.exterior02b)("glnAutocompleteTrigger",p),e.xp6(3),e.Q6J("ngForOf",n.fruitsB),e.xp6(6),e.Q6J("exterior",n.exterior02b)("glnAutocompleteTrigger",u),e.xp6(3),e.Q6J("ngForOf",n.fruitsB),e.xp6(6),e.Q6J("exterior",n.exterior02b)("glnAutocompleteTrigger",h),e.xp6(3),e.Q6J("ngForOf",n.fruitsB),e.xp6(6),e.Q6J("exterior",n.exterior02b)("glnAutocompleteTrigger",A),e.xp6(3),e.Q6J("ngForOf",n.fruitsB),e.xp6(6),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(16),e.Q6J("label",n.labelTs),e.xp6(4),e.Q6J("label",n.labelCss),e.xp6(8),e.Q6J("href",n.urlCmAutocomplete+"#attributes-supported02",e.LSH),e.xp6(19),e.Q6J("checked","outlined"===n.exterior02c),e.xp6(1),e.Oqu(n.labelOutlined),e.xp6(1),e.Q6J("checked","underline"===n.exterior02c),e.xp6(1),e.Oqu(n.labelUnderline),e.xp6(1),e.Q6J("checked","standard"===n.exterior02c),e.xp6(1),e.Oqu(n.labelStandard),e.xp6(1),e.Q6J("formGroup",n.formGroup02c),e.xp6(7),e.Q6J("exterior",n.exterior02c)("glnAutocompleteTrigger",Te),e.xp6(3),e.Q6J("ngForOf",n.fruitsB),e.xp6(6),e.Q6J("exterior",n.exterior02c)("glnAutocompleteTrigger",ve),e.xp6(3),e.Q6J("ngForOf",n.fruitsB),e.xp6(6),e.Q6J("exterior",n.exterior02c)("glnAutocompleteTrigger",qe),e.xp6(3),e.Q6J("ngForOf",n.fruitsB),e.xp6(6),e.Q6J("exterior",n.exterior02c)("glnAutocompleteTrigger",xe),e.xp6(3),e.Q6J("ngForOf",n.fruitsB),e.xp6(6),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(16),e.Q6J("label",n.labelTs),e.xp6(4),e.Q6J("label",n.labelCss),e.xp6(8),e.Q6J("href",n.urlCmAutocomplete+"#attributes-supported03",e.LSH),e.xp6(25),e.Q6J("checked","outlined"===n.exterior02d),e.xp6(1),e.Oqu(n.labelOutlined),e.xp6(1),e.Q6J("checked","underline"===n.exterior02d),e.xp6(1),e.Oqu(n.labelUnderline),e.xp6(1),e.Q6J("checked","standard"===n.exterior02d),e.xp6(1),e.Oqu(n.labelStandard),e.xp6(1),e.Q6J("formGroup",n.formGroup02d),e.xp6(7),e.Q6J("exterior",n.exterior02d)("glnAutocompleteTrigger",Ce),e.xp6(1),e.Q6J("visibleSize",6),e.xp6(2),e.Q6J("ngForOf",n.fruits),e.xp6(6),e.Q6J("exterior",n.exterior02d)("glnAutocompleteTrigger",we),e.xp6(3),e.Q6J("ngForOf",n.fruits),e.xp6(6),e.Q6J("exterior",n.exterior02d)("glnAutocompleteTrigger",ye),e.xp6(3),e.Q6J("ngForOf",n.fruitsB),e.xp6(6),e.Q6J("exterior",n.exterior02d)("glnAutocompleteTrigger",Fe),e.xp6(3),e.Q6J("ngForOf",n.fruitsB),e.xp6(6),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(16),e.Q6J("label",n.labelTs),e.xp6(4),e.Q6J("label",n.labelCss),e.xp6(8),e.Q6J("href",n.urlCmAutocomplete+"#attributes-supported04",e.LSH),e.xp6(19),e.Q6J("checked","outlined"===n.exterior02e),e.xp6(1),e.Oqu(n.labelOutlined),e.xp6(1),e.Q6J("checked","underline"===n.exterior02e),e.xp6(1),e.Oqu(n.labelUnderline),e.xp6(1),e.Q6J("checked","standard"===n.exterior02e),e.xp6(1),e.Oqu(n.labelStandard),e.xp6(1),e.Q6J("formGroup",n.formGroup02e),e.xp6(7),e.Q6J("exterior",n.exterior02e)("glnAutocompleteTrigger",Se),e.xp6(1),e.Q6J("visibleSize",6),e.xp6(2),e.Q6J("ngForOf",n.fruits),e.xp6(6),e.Q6J("exterior",n.exterior02e)("glnAutocompleteTrigger",Ne),e.xp6(1),e.Q6J("visibleSize",6),e.xp6(2),e.Q6J("ngForOf",n.fruits),e.xp6(7),e.Q6J("exterior",n.exterior02e)("glnAutocompleteTrigger",Je),e.xp6(1),e.Q6J("visibleSize",6),e.xp6(2),e.Q6J("ngForOf",n.fruits),e.xp6(6),e.Q6J("exterior",n.exterior02e)("glnAutocompleteTrigger",Oe),e.xp6(1),e.Q6J("visibleSize",6),e.xp6(2),e.Q6J("ngForOf",n.fruits),e.xp6(6),e.Q6J("exterior",n.exterior02e)("glnAutocompleteTrigger",Qe),e.xp6(1),e.Q6J("visibleSize",6),e.xp6(2),e.Q6J("ngForOf",n.fruits),e.xp6(6),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(4),e.Q6J("label",n.labelTs),e.xp6(4),e.Q6J("label",n.labelCss)}},dependencies:[g.sg,i._Y,i.JJ,i.JL,i.sg,i.u,Z.A9,Z.Yi,m.pp,m.ib,m.yz,m.yK,d.SP,d.uX,a.MY,a.jA,a.j7,a.WO],styles:["app-cm-autocomplete-attributes{display:block}app-cm-autocomplete-attributes .aca-middle{width:160px}app-cm-autocomplete-attributes .aca-medium{width:160px}app-cm-autocomplete-attributes .aca-panel-color{color:#00f;background-color:#f0fff0}app-cm-autocomplete-attributes .aca-normal{width:160px}app-cm-autocomplete-attributes .aca-elem{width:170px}\n"],encapsulation:2,changeDetection:0}),t})();var U=s(1135);function W(t,l){if(1&t&&(e.TgZ(0,"gln-option",33),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ","fruit - "+n.capitalizeFirstLetter(o)," ")}}function X(t,l){if(1&t&&(e.TgZ(0,"gln-option",33),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ","fruit - "+n.capitalizeFirstLetter(o)," ")}}function K(t,l){1&t&&e._UZ(0,"span",34)}function ee(t,l){1&t&&(e.ynx(0),e._UZ(1,"gln-option",35),e.TgZ(2,"div",36),e._uU(3," Loading... "),e.qZA(),e.BQk())}function ne(t,l){if(1&t&&(e.TgZ(0,"gln-option",33),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ","fruit - "+n.capitalizeFirstLetter(o)," ")}}function te(t,l){1&t&&(e.ynx(0),e._UZ(1,"gln-option",35),e.TgZ(2,"div",36),e._uU(3," Loading... "),e.qZA(),e.BQk())}function oe(t,l){if(1&t&&(e.TgZ(0,"gln-option",33),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ","fruit - "+n.capitalizeFirstLetter(o)," ")}}let le=(()=>{class t{constructor(){this.labelShowSource=r.sx,this.labelOutlined=r.SR,this.labelUnderline=r.kP,this.labelStandard=r.Qb,this.labelHtml=r.zC,this.labelTs=r.QS,this.labelCss=r.Er,this.urlCmAutocomplete="/"+c.g.get("URL_COMPONENTS")+"/"+c.g.get("URL_COMPONENTS_AUTOCOMPLETE"),this.fruits=["apple","apricot","avocado","banana","black currant","blackberry","blueberry","cherry","coconut","cranberry","dragonfruit","fig","goji berry","grape","grapefruit","grapes","guava","iwi","jackfruit","jamun","jujube","lemon","lime","longan","loquat","lychee","mandarin","mango","melon","mulberry","nectarine","kiwi","olive","orange","palm fruit","papaya","passion fruit","peach","pear","persimmon","pineapple","plum","pomegranate","prickly pear","pumpkin","quince","raspberry","red currant","sapodilla","satsuma","strawberry","sweet lemon","tamarind","tangerine","watermelon"],this.exterior03c="outlined",this.control03c={model03a:new i.NI(null,[]),model03b:new i.NI(null,[])},this.formGroup03c=new i.cw(this.control03c),this.value03a=[],this.value03b=[],this.exterior03d="outlined",this.control03d={model03c:new i.NI(null,[]),model03d:new i.NI(null,[])},this.formGroup03d=new i.cw(this.control03d),this.value03c$=new U.X([]),this.value03c=this.value03c$.asObservable(),this.value03d$=new U.X([]),this.value03d=this.value03d$.asObservable()}capitalizeFirstLetter(o){return o?o[0].toUpperCase()+o.slice(1):""}filtered(o,n){const p=(n||"").toLowerCase();return o?.filter(u=>u.toLowerCase().includes(p))||[]}filteredAsyn(o,n,p){const u=this;p.next(null),setTimeout(()=>{const h=u.filtered(o,n);p.next(h)},700)}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-cm-autocomplete-asynchrony"]],inputs:{labelShowSource:"labelShowSource",labelOutlined:"labelOutlined",labelUnderline:"labelUnderline",labelStandard:"labelStandard",labelHtml:"labelHtml",labelTs:"labelTs",labelCss:"labelCss"},decls:209,vars:54,consts:[["mr-vr",""],[1,"app-hover-link"],[3,"href"],["mr-vr","","id","asynchrony01a"],["source","html"],["source","ts"],["mr-vr","","id","asynchrony01b"],["value","exterior03c",3,"change"],["value","outlined",3,"checked"],["value","underline",3,"checked"],["value","standard",3,"checked"],["novalidate","","autocomplete","off",3,"formGroup"],[1,"app-group"],[1,"app-elem"],["formControlName","model03a","label","Fruit","helperText","Used: visibleSize=5.",1,"acs-middle",3,"exterior","glnAutocompleteTrigger","input"],[3,"visibleSize"],["autocomplete03a","glnAutocomplete"],[3,"value",4,"ngFor","ngForOf"],["type","text","formControlName","model03b",1,"acs-input","acs-middle",3,"glnAutocompleteTrigger","input"],["autocomplete03b","glnAutocomplete"],["animationDuration","0ms"],[3,"label"],["source","css"],["br-nn",""],["mr-vr","","id","asynchrony02a"],["mr-vr","","id","asynchrony02b"],["value","exterior03d",3,"change"],["formControlName","model03c","label","Fruit","helperText","Used: visibleSize=6.",2,"width","161px",3,"exterior","glnAutocompleteTrigger","input"],["gln-orn-rg","","class","acs-spinner-sun-rays",4,"ngIf"],["autocomplete03c","glnAutocomplete"],[4,"ngIf"],["type","text","formControlName","model03d",1,"acs-input",2,"width","161px",3,"glnAutocompleteTrigger","input"],["autocomplete03d","glnAutocomplete"],[3,"value"],["gln-orn-rg","",1,"acs-spinner-sun-rays"],[2,"display","none"],[2,"padding","10px 10px"]],template:function(o,n){if(1&o&&(e.TgZ(0,"section",0)(1,"h3",1),e._uU(2," Asynchrony "),e.TgZ(3,"a",2),e._uU(4,"#"),e.qZA()()(),e.TgZ(5,"section",3)(6,"h4",1),e._uU(7," Synchronous processing: "),e.TgZ(8,"a",2),e._uU(9,"#"),e.qZA()(),e.TgZ(10,"p"),e._uU(11," The GlnAutocomplete component displays a list of options on its panel. We can react to a change in the value in the input line and change the list of options. This will display, in the list of options, only the current values. "),e.qZA(),e.TgZ(12,"p"),e._uU(13,' For a synchronous update, let\'s define a method for handling the "input" event in the input line. This method fires when the user enters new values. And in this method we will call the function of filtering the entire list of options by the value entered in the input line. '),e.qZA(),e.TgZ(14,"span"),e._uU(15,"For example, this template:"),e.qZA(),e.TgZ(16,"code")(17,"pre",4),e._uU(18,'<gln-input formControlName="model03a"\n  [glnAutocompleteTrigger]="autocomplete03a"\n  (input)="value03a = filtered(fruits, control03c.model03a.value)">\n</gln-input>\n<gln-autocomplete #autocomplete03a="glnAutocomplete"\n  [visibleSize]="5">\n  <gln-option *ngFor="let item of value03a"\n    [value]="item">\n    '),e.TgZ(19,"b"),e._uU(20,"{"),e.qZA(),e._uU(21,"{ item }}\n  </gln-option>\n</gln-autocomplete>"),e.qZA()(),e._UZ(22,"br"),e.TgZ(23,"span"),e._uU(24,"For example, this component:"),e.qZA(),e.TgZ(25,"code")(26,"pre",5),e._uU(27,"export class AutocompleteComponent {\n\n  public control03c = {\n    model03a: new FormControl(null, []),\n  };\n\n  public formGroup03c: FormGroup = new FormGroup(this.control03c);\n  public value03a: string[] = [];\n\n  public filtered(list: string[] | null, value: string | null): string[] {\n    const valueStr = (value || '').toLowerCase();\n    return list?.filter((item) => item.toLowerCase().includes(valueStr)) || [];\n  }\n}"),e.qZA()()(),e.TgZ(28,"section",6)(29,"h4",1),e._uU(30," Let's look at an example 1: "),e.TgZ(31,"a",2),e._uU(32,"#"),e.qZA()()(),e.TgZ(33,"section",0)(34,"span"),e._uU(35,"exterior: "),e.qZA(),e.TgZ(36,"mat-button-toggle-group",7),e.NdJ("change",function(u){return n.exterior03c=u.value}),e.TgZ(37,"mat-button-toggle",8),e._uU(38),e.qZA(),e.TgZ(39,"mat-button-toggle",9),e._uU(40),e.qZA(),e.TgZ(41,"mat-button-toggle",10),e._uU(42),e.qZA()()(),e.TgZ(43,"form",11)(44,"div",12)(45,"div",13)(46,"div")(47,"small")(48,"em"),e._uU(49,"Synchronous mode for GlnInput."),e.qZA()()(),e.TgZ(50,"gln-input",14),e.NdJ("input",function(){return n.value03a=n.filtered(n.fruits,n.control03c.model03a.value)}),e.qZA(),e.TgZ(51,"gln-autocomplete",15,16),e.YNc(53,W,2,2,"gln-option",17),e.qZA()(),e.TgZ(54,"div",13)(55,"div")(56,"small")(57,"em"),e._uU(58,'Synchronous mode for native "input".'),e.qZA()()(),e.TgZ(59,"input",18),e.NdJ("input",function(){return n.value03b=n.filtered(n.fruits,n.control03c.model03b.value)}),e.qZA(),e.TgZ(60,"gln-autocomplete",15,19),e.YNc(62,X,2,2,"gln-option",17),e.qZA()()()(),e.TgZ(63,"section",0)(64,"mat-accordion")(65,"mat-expansion-panel")(66,"mat-expansion-panel-header")(67,"mat-panel-title"),e._uU(68),e.qZA()(),e.TgZ(69,"mat-tab-group",20)(70,"mat-tab",21)(71,"code")(72,"pre",4),e._uU(73,'<form [formGroup]="formGroup03c"\n  novalidate\n  autocomplete="off">\n\n  <div class="app-group">\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Synchronous mode for GlnInput.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model03a"\n        class="acs-middle"\n        label="Fruit"\n        [exterior]="exterior03c"\n        [glnAutocompleteTrigger]="autocomplete03a"\n        helperText="Used: visibleSize=5."\n        (input)="value03a = filtered(fruits, control03c.model03a.value)">\n      </gln-input>\n      <gln-autocomplete #autocomplete03a="glnAutocomplete"\n        [visibleSize]="5">\n        <gln-option *ngFor="let item of value03a"\n          [value]="item">\n          '),e.TgZ(74,"b"),e._uU(75,"{"),e.qZA(),e._uU(76,'{ \'fruit - \' + capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Synchronous mode for native "input".</em>\n        </small>\n      </div>\n      <input type="text"\n        class="acs-input acs-middle"\n        formControlName="model03b"\n        [glnAutocompleteTrigger]="autocomplete03b"\n        (input)="value03b = filtered(fruits, control03c.model03b.value)" />\n      <gln-autocomplete #autocomplete03b="glnAutocomplete"\n        [visibleSize]="5">\n        <gln-option *ngFor="let item of value03b"\n          [value]="item">\n          '),e.TgZ(77,"b"),e._uU(78,"{"),e.qZA(),e._uU(79,"{ 'fruit - ' + capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n  </div>\n\n</form>"),e.qZA()()(),e.TgZ(80,"mat-tab",21)(81,"code")(82,"pre",5),e._uU(83,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormGroup, FormControl \n} from '@angular/forms';\n\n@Component({\n  selector: 'app-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AutocompleteComponent {\n  public fruits = [\n  'apple'     , 'apricot'  , 'avocado'   , 'banana'    , 'black currant',\n  'blackberry', 'blueberry', 'cherry'    , 'coconut'   , 'cranberry'    ,\n  'dragonfruit', 'fig'     , 'goji berry', 'grape'     , 'grapefruit'   ,\n  'grapes'    , 'guava'    , 'iwi'       , 'jackfruit' , 'jamun'        ,\n  'jujube'    , 'lemon'    , 'lime'      , 'longan'    , 'loquat'       ,\n  'lychee'    , 'mandarin' , 'mango'     , 'melon'     , 'mulberry'     ,\n  'nectarine' , 'kiwi'     , 'olive'     , 'orange'    , 'palm fruit'   ,\n  'papaya', 'passion fruit', 'peach'     , 'pear'      , 'persimmon'    ,\n  'pineapple' , 'plum'  , 'pomegranate', 'prickly pear', 'pumpkin'      ,\n  'quince'    , 'raspberry', 'red currant', 'sapodilla', 'satsuma'      ,\n  'strawberry','sweet lemon', 'tamarind' , 'tangerine' , 'watermelon'\n  ];\n  // Block \"asynchrony01\"\n  public exterior03c = 'outlined';\n  public control03c = {\n    model03a: new FormControl(null, []),\n    model03b: new FormControl(null, []),\n  };\n  public formGroup03c: FormGroup = new FormGroup(this.control03c);\n  public value03a: string[] = [];\n  public value03b: string[] = [];\n\n  public capitalizeFirstLetter(value: string): string {\n    return value ? value[0].toUpperCase() + value.slice(1) : '';\n  }\n\n  public filtered(list: string[] | null, value: string | null): string[] {\n    const valueStr = (value || '').toLowerCase();\n    return list?.filter((item) => item.toLowerCase().includes(valueStr)) || [];\n  }\n}"),e.qZA()()(),e.TgZ(84,"mat-tab",21)(85,"code")(86,"pre",22),e._uU(87,"app-autocomplete {\n  .app-group {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .app-elem {\n    min-width: 26ch;\n    margin: 10px 10px;\n  }\n  .acs-middle {\n    width: 160px;\n  }\n  .acs-input {\n    border-width: 1px;\n    box-sizing: border-box;\n    font-size: 1em;\n    line-height: 2em;\n    margin-top: 0.4em;\n    padding: 2px 9px;\n  }\n}"),e.qZA()()()()()()(),e._UZ(88,"hr",23),e.TgZ(89,"section",24)(90,"h4",1),e._uU(91," Asynchronous processing: "),e.TgZ(92,"a",2),e._uU(93,"#"),e.qZA()(),e.TgZ(94,"p"),e._uU(95," For an asynchronous update, we do the same, only the filtering function will be asynchronous. "),e.qZA(),e.TgZ(96,"p"),e._uU(97," In asynchronous mode, the list of options is formed for some time. Only after the subscription to changes in the list of options has been triggered, you can open the options panel. "),e.qZA(),e.TgZ(98,"p"),e._uU(99," When performing an asynchronous load, the panel does not open and it is not clear to the user what is currently running. "),e.qZA(),e.TgZ(100,"p"),e._uU(101,' We want to display the sign of data loading with the string: "Loading...". In order for the panel to open, let\'s add one option and along with it add the "<div>Loading...</div>" block. '),e.qZA(),e.TgZ(102,"p"),e._uU(103,' Now, at the time of loading, a panel with the line "Loading ..." will be displayed. And so that the option that we added above is not visible, we indicate to it "display: none;". '),e.qZA(),e.TgZ(104,"span"),e._uU(105,"For example, this template:"),e.qZA(),e.TgZ(106,"code")(107,"pre",4),e._uU(108,'<gln-input formControlName="model03c"\n  [glnAutocompleteTrigger]="autocomplete03c"\n  (input)="'),e.TgZ(109,"strong"),e._uU(110,"filteredAsyn"),e.qZA(),e._uU(111,"(fruits, control03d.model03c.value, "),e.TgZ(112,"i")(113,"strong"),e._uU(114,"value03c$"),e.qZA()(),e._uU(115,');">\n  <span *ngIf="('),e.TgZ(116,"i")(117,"strong"),e._uU(118,"value03c"),e.qZA()(),e._uU(119,' | async) == null"\n    gln-orn-rg\n    class="acs-spinner-sun-rays">\n  </span>\n</gln-input>\n<gln-autocomplete #autocomplete03c="glnAutocomplete"\n  [visibleSize]="6">\n  <ng-container *ngIf="('),e.TgZ(120,"i")(121,"strong"),e._uU(122,"value03c"),e.qZA()(),e._uU(123,' | async) == null">\n    <gln-option style="display: none;">\n    </gln-option>\n    <div style="padding: 10px 10px;">\n      Loading...\n    </div>\n  </ng-container>\n  <gln-option *ngFor="let item of '),e.TgZ(124,"i")(125,"strong"),e._uU(126,"value03c"),e.qZA()(),e._uU(127,' | async"\n    [value]="item">\n    '),e.TgZ(128,"b"),e._uU(129,"{"),e.qZA(),e._uU(130,"{ item }}\n  </gln-option>\n</gln-autocomplete>"),e.qZA()(),e._UZ(131,"br"),e.TgZ(132,"span"),e._uU(133,"For example, this component:"),e.qZA(),e.TgZ(134,"code")(135,"pre",5),e._uU(136,"export class AutocompleteComponent {\n\n  public control03d = {\n    model03c: new FormControl(null, []),\n  };\n  public formGroup03d: FormGroup = new FormGroup(this.control03d);\n\n  public value03c$: Subject<string[] | null>\n    = new BehaviorSubject<string[] | null>([]);\n\n  public value03c: Observable<string[] | null>\n    = this.value03c$.asObservable();\n\n  public filtered(list: string[] | null, value: string | null): string[] {\n    const valueStr = (value || '').toLowerCase();\n    return list?.filter((item) => item.toLowerCase().includes(valueStr)) || [];\n  }\n\n  public "),e.TgZ(137,"strong"),e._uU(138,"filteredAsyn"),e.qZA(),e._uU(139,"(\n    list: string[] | null, value: string | null, result$: Subject<string[] | null>\n  ): void {\n    const this2 = this;\n    result$.next(null); // The null indicates that the data is being loaded.\n    setTimeout(() => {\n      result$.next(this2.filtered(list, value));\n    }, 700);\n  }\n}"),e.qZA()()(),e.TgZ(140,"section",25)(141,"h4",1),e._uU(142," Let's look at an example 2: "),e.TgZ(143,"a",2),e._uU(144,"#"),e.qZA()()(),e.TgZ(145,"section",0)(146,"span"),e._uU(147,"exterior: "),e.qZA(),e.TgZ(148,"mat-button-toggle-group",26),e.NdJ("change",function(u){return n.exterior03d=u.value}),e.TgZ(149,"mat-button-toggle",8),e._uU(150),e.qZA(),e.TgZ(151,"mat-button-toggle",9),e._uU(152),e.qZA(),e.TgZ(153,"mat-button-toggle",10),e._uU(154),e.qZA()()(),e.TgZ(155,"form",11)(156,"div",12)(157,"div",13)(158,"div")(159,"small")(160,"em"),e._uU(161,"Asynchronous mode for GlnInput."),e.qZA()()(),e.TgZ(162,"gln-input",27),e.NdJ("input",function(){return n.filteredAsyn(n.fruits,n.control03d.model03c.value,n.value03c$)}),e.YNc(163,K,1,0,"span",28),e.ALo(164,"async"),e.qZA(),e.TgZ(165,"gln-autocomplete",15,29),e.YNc(167,ee,4,0,"ng-container",30),e.ALo(168,"async"),e.YNc(169,ne,2,2,"gln-option",17),e.ALo(170,"async"),e.qZA()(),e.TgZ(171,"div",13)(172,"div")(173,"small")(174,"em"),e._uU(175,'Asynchronous mode for native "input".'),e.qZA()()(),e.TgZ(176,"input",31),e.NdJ("input",function(){return n.filteredAsyn(n.fruits,n.control03d.model03d.value,n.value03d$)}),e.qZA(),e.TgZ(177,"gln-autocomplete",15,32),e.YNc(179,te,4,0,"ng-container",30),e.ALo(180,"async"),e.YNc(181,oe,2,2,"gln-option",17),e.ALo(182,"async"),e.qZA()()()(),e.TgZ(183,"section",0)(184,"mat-accordion")(185,"mat-expansion-panel")(186,"mat-expansion-panel-header")(187,"mat-panel-title"),e._uU(188),e.qZA()(),e.TgZ(189,"mat-tab-group",20)(190,"mat-tab",21)(191,"code")(192,"pre",4),e._uU(193,'<form [formGroup]="formGroup03d"\n  novalidate\n  autocomplete="off">\n\n  <div class="app-group">\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Asynchronous mode for GlnInput.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model03c"\n        style="width: 161px;"\n        label="Fruit"\n        [exterior]="exterior03d"\n        [glnAutocompleteTrigger]="autocomplete03c"\n        helperText="Used: visibleSize=6."\n        (input)="filteredAsyn(fruits, control03d.model03c.value, value03c$);">\n        <span *ngIf="(value03c | async) == null"\n          gln-orn-rg\n          class="acs-spinner-sun-rays">\n        </span>\n      </gln-input>\n      <gln-autocomplete #autocomplete03c="glnAutocomplete"\n        [visibleSize]="6">\n        <ng-container *ngIf="(value03c | async) == null">\n          <gln-option style="display: none;">\n          </gln-option>\n          <div style="padding: 10px 10px;">\n            Loading...\n          </div>\n        </ng-container>\n        <gln-option *ngFor="let item of value03c | async"\n          [value]="item">\n          '),e.TgZ(194,"b"),e._uU(195,"{"),e.qZA(),e._uU(196,'{ \'fruit - \' + capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Asynchronous mode for native "input".</em>\n        </small>\n      </div>\n      <input type="text"\n        style="width: 161px;"\n        class="acs-input"\n        formControlName="model03d"\n        [glnAutocompleteTrigger]="autocomplete03d"\n        (input)="filteredAsyn(fruits, control03d.model03d.value, value03d$);" />\n      <gln-autocomplete #autocomplete03d="glnAutocomplete"\n        [visibleSize]="6">\n        <ng-container *ngIf="(value03d | async) == null">\n          <gln-option style="display: none;">\n          </gln-option>\n          <div style="padding: 10px 10px;">\n            Loading...\n          </div>\n        </ng-container>\n        <gln-option *ngFor="let item of value03d | async"\n          [value]="item">\n          '),e.TgZ(197,"b"),e._uU(198,"{"),e.qZA(),e._uU(199,"{ 'fruit - ' + capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n  </div>\n\n</form>"),e.qZA()()(),e.TgZ(200,"mat-tab",21)(201,"code")(202,"pre",5),e._uU(203,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormGroup, FormControl \n} from '@angular/forms';\n\n@Component({\n  selector: 'app-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AutocompleteComponent {\n  public fruits = [\n  'apple'     , 'apricot'  , 'avocado'   , 'banana'    , 'black currant',\n  'blackberry', 'blueberry', 'cherry'    , 'coconut'   , 'cranberry'    ,\n  'dragonfruit', 'fig'     , 'goji berry', 'grape'     , 'grapefruit'   ,\n  'grapes'    , 'guava'    , 'iwi'       , 'jackfruit' , 'jamun'        ,\n  'jujube'    , 'lemon'    , 'lime'      , 'longan'    , 'loquat'       ,\n  'lychee'    , 'mandarin' , 'mango'     , 'melon'     , 'mulberry'     ,\n  'nectarine' , 'kiwi'     , 'olive'     , 'orange'    , 'palm fruit'   ,\n  'papaya', 'passion fruit', 'peach'     , 'pear'      , 'persimmon'    ,\n  'pineapple' , 'plum'  , 'pomegranate', 'prickly pear', 'pumpkin'      ,\n  'quince'    , 'raspberry', 'red currant', 'sapodilla', 'satsuma'      ,\n  'strawberry','sweet lemon', 'tamarind' , 'tangerine' , 'watermelon'\n  ];\n  // Block \"asynchrony02\"\n  public exterior03d = 'outlined';\n  public control03d = {\n    model03c: new FormControl(null, []),\n    model03d: new FormControl(null, []),\n  };\n  public formGroup03d: FormGroup = new FormGroup(this.control03d);\n  public value03c$: Subject<string[] | null> = new BehaviorSubject<string[] | null>([]);\n  public value03c: Observable<string[] | null> = this.value03c$.asObservable();\n  public value03d$: Subject<string[] | null> = new BehaviorSubject<string[] | null>([]);\n  public value03d: Observable<string[] | null> = this.value03d$.asObservable();\n\n  public capitalizeFirstLetter(value: string): string {\n    return value ? value[0].toUpperCase() + value.slice(1) : '';\n  }\n\n  public filtered(list: string[] | null, value: string | null): string[] {\n    const valueStr = (value || '').toLowerCase();\n    return list?.filter((item) => item.toLowerCase().includes(valueStr)) || [];\n  }\n\n  public filteredAsyn(\n    list: string[] | null, value: string | null, result$: Subject<string[] | null>\n  ): void {\n    const this2 = this;\n    result$.next(null);\n    setTimeout(() => {\n      const result: string[] = this2.filtered(list, value);\n      result$.next(result);\n    }, 700);\n  }\n\n}"),e.qZA()()(),e.TgZ(204,"mat-tab",21)(205,"code")(206,"pre",22),e._uU(207,"app-autocomplete {\n  .app-group {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .app-elem {\n    min-width: 26ch;\n    margin: 10px 10px;\n  }\n  .acs-middle {\n    width: 160px;\n\t}\n  .acs-input {\n    border-width: 1px;\n    box-sizing: border-box;\n    font-size: 1em;\n    line-height: 2em;\n    margin-top: 0.4em;\n    padding: 2px 9px;\n  }\n  .acs-spinner-sun-rays {\n    animation: aca-kf-spinner-rotate 4s linear infinite;\n    background: center no-repeat;\n    background-image: url(\"data:image/svg+xml,\"\n    + \"<svg xmlns='http://www.w3.org/2000/svg' width='36' height='36'\"\n    + \" viewBox='0 0 48 48' fill='rgb(0 0 0 / 99%)'>\"\n    + \"<path d='M25 18c-.6 0-1-.4-1-1V9c0-.6.4-1 1-1s1 .4 1 1v8c0 .6-\"\n    + \".4 1-1 1z'/>\"\n    + \"<path opacity='.45' d='M25 42c-.6 0-1-.4-1-1v-8c0-.6.4-1 1-1s1 \"\n    + \".4 1 1v8c0 .6-.4 1-1 1z'/>\"\n    + \"<path opacity='.3' d='M29 19c-.2 0-.3 0-.5-.1-.4-.3-.6-.8-.3-1.3l\"\n    + \"4-6.9c.3-.4.8-.6 1.3-.3.4.3.6.8.3 1.3l-4 6.9c-.2.2-.5.4-.8.4z'/>\"\n    + \"<path opacity='.55' d='M17 39.8c-.2 0-.3 0-.5-.1-.4-.3-.6-.8-.3-1\"\n    + \".3l4-6.9c.3-.4.8-.6 1.3-.3.4.3.6.8.3 1.3l-4 6.9c-.2.2-.5.4-.8.4z'/>\"\n    + \"<path opacity='.93' d='M21 19c-.3 0-.6-.2-.8-.5l-4-6.9c-.3-.4-.1-\"\n    + \"1 .3-1.3.4-.3 1-.1 1.3.3l4 6.9c.3.4.1 1-.3 1.3-.2.2-.3.2-.5.2z'/>\"\n    + \"<path opacity='.3' d='M33 39.8c-.3 0-.6-.2-.8-.5l-4-6.9c-.3-.4-.1\"\n    + \"-1 .3-1.3.4-.3 1-.1 1.3.3l4 6.9c.3.4.1 1-.3 1.3-.2.1-.3.2-.5.2z'/>\"\n    + \"<path opacity='.75' d='M17 26H9c-.6 0-1-.4-1-1s.4-1 1-1h8c.6 0 1 \"\n    + \".4 1 1s-.4 1-1 1z'/>\"\n    + \"<path opacity='.3' d='M41 26h-8c-.6 0-1-.4-1-1s.4-1 1-1h8c.6 0 1 \"\n    + \".4 1 1s-.4 1-1 1z'/>\"\n    + \"<path opacity='.86' d='M18.1 21.9c-.2 0-.3 0-.5-.1l-6.9-4c-.4-.3-\"\n    + \".6-.8-.3-1.3.3-.4.8-.6 1.3-.3l6.9 4c.4.3.6.8.3 1.3-.2.3-.5.4-.8.4z'/>\"\n    + \"<path opacity='.3' d='M38.9 33.9c-.2 0-.3 0-.5-.1l-6.9-4c-.4-.3-.\"\n    + \"6-.8-.3-1.3.3-.4.8-.6 1.3-.3l6.9 4c.4.3.6.8.3 1.3-.2.3-.5.4-.8.4z'/>\"\n    + \"<path opacity='.65' d='M11.1 33.9c-.3 0-.6-.2-.8-.5-.3-.4-.1-1 .3\"\n    + \"-1.3l6.9-4c.4-.3 1-.1 1.3.3.3.4.1 1-.3 1.3l-6.9 4c-.1.2-.3.2-.5.2z'/>\"\n    + \"<path opacity='.3' d='M31.9 21.9c-.3 0-.6-.2-.8-.5-.3-.4-.1-1 .3-\"\n    + \"1.3l6.9-4c.4-.3 1-.1 1.3.3.3.4.1 1-.3 1.3l-6.9 4c-.2.2-.3.2-.5.2z'/>\"\n    + \"</svg>\");\n    background-position: center center;\n    background-repeat: no-repeat;\n    height: 36px;\n    width: 36px;\n  }\n  @keyframes aca-kf-spinner-rotate {\n    0% {\n      transform: rotate(0deg);\n    } 50% {\n      transform: rotate(540deg);\n    } 100% {\n      transform: rotate(1080deg);\n    }\n  }\n}"),e.qZA()()()()()()(),e._UZ(208,"hr",23)),2&o){const p=e.MAs(52),u=e.MAs(61),h=e.MAs(166),A=e.MAs(178);e.xp6(3),e.Q6J("href",n.urlCmAutocomplete+"#Asynchrony",e.LSH),e.xp6(5),e.Q6J("href",n.urlCmAutocomplete+"#asynchrony01a",e.LSH),e.xp6(23),e.Q6J("href",n.urlCmAutocomplete+"#asynchrony01b",e.LSH),e.xp6(6),e.Q6J("checked","outlined"===n.exterior03c),e.xp6(1),e.Oqu(n.labelOutlined),e.xp6(1),e.Q6J("checked","underline"===n.exterior03c),e.xp6(1),e.Oqu(n.labelUnderline),e.xp6(1),e.Q6J("checked","standard"===n.exterior03c),e.xp6(1),e.Oqu(n.labelStandard),e.xp6(1),e.Q6J("formGroup",n.formGroup03c),e.xp6(7),e.Q6J("exterior",n.exterior03c)("glnAutocompleteTrigger",p),e.xp6(1),e.Q6J("visibleSize",5),e.xp6(2),e.Q6J("ngForOf",n.value03a),e.xp6(6),e.Q6J("glnAutocompleteTrigger",u),e.xp6(1),e.Q6J("visibleSize",5),e.xp6(2),e.Q6J("ngForOf",n.value03b),e.xp6(6),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(10),e.Q6J("label",n.labelTs),e.xp6(4),e.Q6J("label",n.labelCss),e.xp6(8),e.Q6J("href",n.urlCmAutocomplete+"#asynchrony02a",e.LSH),e.xp6(51),e.Q6J("href",n.urlCmAutocomplete+"#asynchrony02b",e.LSH),e.xp6(6),e.Q6J("checked","outlined"===n.exterior03d),e.xp6(1),e.Oqu(n.labelOutlined),e.xp6(1),e.Q6J("checked","underline"===n.exterior03d),e.xp6(1),e.Oqu(n.labelUnderline),e.xp6(1),e.Q6J("checked","standard"===n.exterior03d),e.xp6(1),e.Oqu(n.labelStandard),e.xp6(1),e.Q6J("formGroup",n.formGroup03d),e.xp6(7),e.Q6J("exterior",n.exterior03d)("glnAutocompleteTrigger",h),e.xp6(1),e.Q6J("ngIf",null==e.lcZ(164,44,n.value03c)),e.xp6(2),e.Q6J("visibleSize",6),e.xp6(2),e.Q6J("ngIf",null==e.lcZ(168,46,n.value03c)),e.xp6(2),e.Q6J("ngForOf",e.lcZ(170,48,n.value03c)),e.xp6(7),e.Q6J("glnAutocompleteTrigger",A),e.xp6(1),e.Q6J("visibleSize",6),e.xp6(2),e.Q6J("ngIf",null==e.lcZ(180,50,n.value03d)),e.xp6(2),e.Q6J("ngForOf",e.lcZ(182,52,n.value03d)),e.xp6(7),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(10),e.Q6J("label",n.labelTs),e.xp6(4),e.Q6J("label",n.labelCss)}},dependencies:[g.sg,g.O5,i._Y,i.Fj,i.JJ,i.JL,i.sg,i.u,Z.A9,Z.Yi,m.pp,m.ib,m.yz,m.yK,d.SP,d.uX,a.MY,a.jA,a.j7,a.WO,g.Ov],styles:["app-cm-autocomplete-asynchrony{display:block}app-cm-autocomplete-asynchrony .acs-middle{width:160px}app-cm-autocomplete-asynchrony .acs-input{border-width:1px;box-sizing:border-box;font-size:1em;line-height:2em;margin-top:.4em;padding:2px 9px}app-cm-autocomplete-asynchrony .acs-spinner-sun-rays{animation:aca-kf-spinner-rotate 4s linear infinite;background:center no-repeat;background-image:url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='36' height='36' viewBox='0 0 48 48' fill='rgb(0 0 0 / 99%)'><path d='M25 18c-.6 0-1-.4-1-1V9c0-.6.4-1 1-1s1 .4 1 1v8c0 .6-.4 1-1 1z'/><path opacity='.45' d='M25 42c-.6 0-1-.4-1-1v-8c0-.6.4-1 1-1s1 .4 1 1v8c0 .6-.4 1-1 1z'/><path opacity='.3' d='M29 19c-.2 0-.3 0-.5-.1-.4-.3-.6-.8-.3-1.3l4-6.9c.3-.4.8-.6 1.3-.3.4.3.6.8.3 1.3l-4 6.9c-.2.2-.5.4-.8.4z'/><path opacity='.55' d='M17 39.8c-.2 0-.3 0-.5-.1-.4-.3-.6-.8-.3-1.3l4-6.9c.3-.4.8-.6 1.3-.3.4.3.6.8.3 1.3l-4 6.9c-.2.2-.5.4-.8.4z'/><path opacity='.93' d='M21 19c-.3 0-.6-.2-.8-.5l-4-6.9c-.3-.4-.1-1 .3-1.3.4-.3 1-.1 1.3.3l4 6.9c.3.4.1 1-.3 1.3-.2.2-.3.2-.5.2z'/><path opacity='.3' d='M33 39.8c-.3 0-.6-.2-.8-.5l-4-6.9c-.3-.4-.1-1 .3-1.3.4-.3 1-.1 1.3.3l4 6.9c.3.4.1 1-.3 1.3-.2.1-.3.2-.5.2z'/><path opacity='.75' d='M17 26H9c-.6 0-1-.4-1-1s.4-1 1-1h8c.6 0 1 .4 1 1s-.4 1-1 1z'/><path opacity='.3' d='M41 26h-8c-.6 0-1-.4-1-1s.4-1 1-1h8c.6 0 1 .4 1 1s-.4 1-1 1z'/><path opacity='.86' d='M18.1 21.9c-.2 0-.3 0-.5-.1l-6.9-4c-.4-.3-.6-.8-.3-1.3.3-.4.8-.6 1.3-.3l6.9 4c.4.3.6.8.3 1.3-.2.3-.5.4-.8.4z'/><path opacity='.3' d='M38.9 33.9c-.2 0-.3 0-.5-.1l-6.9-4c-.4-.3-.6-.8-.3-1.3.3-.4.8-.6 1.3-.3l6.9 4c.4.3.6.8.3 1.3-.2.3-.5.4-.8.4z'/><path opacity='.65' d='M11.1 33.9c-.3 0-.6-.2-.8-.5-.3-.4-.1-1 .3-1.3l6.9-4c.4-.3 1-.1 1.3.3.3.4.1 1-.3 1.3l-6.9 4c-.1.2-.3.2-.5.2z'/><path opacity='.3' d='M31.9 21.9c-.3 0-.6-.2-.8-.5-.3-.4-.1-1 .3-1.3l6.9-4c.4-.3 1-.1 1.3.3.3.4.1 1-.3 1.3l-6.9 4c-.2.2-.3.2-.5.2z'/></svg>\");background-position:center center;background-repeat:no-repeat;height:36px;width:36px}@keyframes aca-kf-spinner-rotate{0%{transform:rotate(0)}50%{transform:rotate(540deg)}to{transform:rotate(1080deg)}}\n"],encapsulation:2,changeDetection:0}),t})();function ie(t,l){if(1&t&&(e.TgZ(0,"gln-option",21),e._UZ(1,"span",22),e.ALo(2,"glnHighlight"),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.Q6J("innerHtml",e.xi3(2,2,"fruit - "+n.capitalizeFirstLetter(o),n.control06a.model06a.value),e.oJD)}}function ae(t,l){if(1&t&&(e.TgZ(0,"gln-option",21),e._UZ(1,"span",22),e.ALo(2,"glnHighlight"),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.Q6J("innerHtml",e.Dn7(2,2,"fruit - "+n.capitalizeFirstLetter(o),n.control06b.model06b.value,!0),e.oJD)}}let re=(()=>{class t{constructor(){this.labelShowSource=r.sx,this.labelOutlined=r.SR,this.labelUnderline=r.kP,this.labelStandard=r.Qb,this.labelHtml=r.zC,this.labelTs=r.QS,this.labelCss=r.Er,this.urlCmAutocomplete="/"+c.g.get("URL_COMPONENTS")+"/"+c.g.get("URL_COMPONENTS_AUTOCOMPLETE"),this.urlCmSelect="/"+c.g.get("URL_COMPONENTS")+"/"+c.g.get("URL_COMPONENTS_SELECT"),this.fruits=["apple","apricot","avocado","banana","black currant","blackberry","blueberry","cherry","coconut","cranberry","dragonfruit","fig","goji berry","grape","grapefruit","grapes","guava","iwi","jackfruit","jamun","jujube","lemon","lime","longan","loquat","lychee","mandarin","mango","melon","mulberry","nectarine","kiwi","olive","orange","palm fruit","papaya","passion fruit","peach","pear","persimmon","pineapple","plum","pomegranate","prickly pear","pumpkin","quince","raspberry","red currant","sapodilla","satsuma","strawberry","sweet lemon","tamarind","tangerine","watermelon"],this.control06a={model06a:new i.NI("",[])},this.formGroup06a=new i.cw(this.control06a),this.value06a=[],this.control06b={model06b:new i.NI("",[])},this.formGroup06b=new i.cw(this.control06b),this.value06b=[],this.control06a.model06a.setValue("red cur"),this.value06a=this.filtered2(this.fruits,this.control06a.model06a.value),this.control06b.model06b.setValue("red cur"),this.value06b=this.filtered2(this.fruits,this.control06b.model06b.value)}capitalizeFirstLetter(o){return o?o[0].toUpperCase()+o.slice(1):""}filtered2(o,n){const p=(n||"").toLowerCase().split(" ").filter(u=>u.length>0);return o?.filter(u=>p.some(h=>u.toLowerCase().includes(h)))||[]}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-cm-autocomplete-feature"]],inputs:{labelShowSource:"labelShowSource",labelOutlined:"labelOutlined",labelUnderline:"labelUnderline",labelStandard:"labelStandard",labelHtml:"labelHtml",labelTs:"labelTs",labelCss:"labelCss"},decls:215,vars:21,consts:[["mr-vr",""],[1,"app-hover-link"],[3,"href"],["mr-vr","","id","feature-close-all"],["source","html"],["source","ts"],["mr-vr","","id","feature-highlight"],["novalidate","","autocomplete","off",3,"formGroup"],[1,"app-group"],[1,"app-elem"],["formControlName","model06a","helperText","Used: glnHighlight.",1,"acf-middle",3,"glnAutocompleteTrigger","input"],[3,"visibleSize"],["autocomplete06a","glnAutocomplete"],[3,"value",4,"ngFor","ngForOf"],["animationDuration","0ms"],[3,"label"],["source","css"],["br-nn",""],["mr-vr","","id","feature-highlight2"],["formControlName","model06b","helperText","Used: glnHighlight.","autocomplete","off",1,"acf-middle",3,"glnAutocompleteTrigger","input"],["autocomplete06b","glnAutocomplete"],[3,"value"],[3,"innerHtml"]],template:function(o,n){if(1&o&&(e.TgZ(0,"section",0)(1,"h3",1),e._uU(2," Feature "),e.TgZ(3,"a",2),e._uU(4,"#"),e.qZA()(),e.TgZ(5,"p"),e._uU(6," The GlnAutocomplete component has the functionality of opening a panel to select available values. This panel closes when the user selects the desired value. Also, this panel is closed in case of loss of focus of the current input element. It is possible to forcibly close all open panels of GlnAutocomplete components, for example, when an emergency transition to another page occurs. "),e.qZA(),e.TgZ(7,"p"),e._uU(8," This situation is described in more detail in section "),e.TgZ(9,"a",2),e._uU(10,"Feature"),e.qZA(),e._uU(11," for GlnSelect. "),e.qZA()(),e.TgZ(12,"section",3)(13,"h4",1),e._uU(14," Usage example: "),e.TgZ(15,"a",2),e._uU(16,"#"),e.qZA()(),e.TgZ(17,"p"),e._uU(18," 1. set the scroll event handler for the parent component; "),e.qZA(),e.TgZ(19,"code")(20,"pre",4),e._uU(21,'<div style="height: 100%; overflow-y: auto;"\n  (scroll)="'),e.TgZ(22,"i")(23,"strong"),e._uU(24,"doScroll()"),e.qZA()(),e._uU(25,'">\n  <div class="main-side-content">\n\n    <gln-input\n      ['),e.TgZ(26,"strong"),e._uU(27,"glnAutocompleteTrigger"),e.qZA(),e._uU(28,']="'),e.TgZ(29,"i"),e._uU(30,"autocomplete04"),e.qZA(),e._uU(31,'">\n    </gln-input>\n    <'),e.TgZ(32,"strong"),e._uU(33,"gln-autocomplete"),e.qZA(),e._uU(34," #"),e.TgZ(35,"i"),e._uU(36,"autocomplete04"),e.qZA(),e._uU(37,'="glnAutocomplete">\n      <gln-option *ngFor="let item of value04" [value]="item">\n        '),e.TgZ(38,"b"),e._uU(39,"{"),e.qZA(),e._uU(40,"{ item }}\n      </gln-option>\n    </"),e.TgZ(41,"strong"),e._uU(42,"gln-autocomplete"),e.qZA(),e._uU(43,">\n\n    <gln-input\n      ["),e.TgZ(44,"strong"),e._uU(45,"glnAutocompleteTrigger"),e.qZA(),e._uU(46,']="'),e.TgZ(47,"i"),e._uU(48,"autocomplete05"),e.qZA(),e._uU(49,'">\n    </gln-input>\n    <'),e.TgZ(50,"strong"),e._uU(51,"gln-autocomplete"),e.qZA(),e._uU(52," #"),e.TgZ(53,"i"),e._uU(54,"autocomplete05"),e.qZA(),e._uU(55,'="glnAutocomplete">\n      <gln-option *ngFor="let item of value05" [value]="item">\n        '),e.TgZ(56,"b"),e._uU(57,"{"),e.qZA(),e._uU(58,"{ item }}\n      </gln-option>\n    </"),e.TgZ(59,"strong"),e._uU(60,"gln-autocomplete"),e.qZA(),e._uU(61,">\n\n    ...\n  </div>\n</div>"),e.qZA()(),e._UZ(62,"br"),e.TgZ(63,"code")(64,"pre",5),e._uU(65,"export class SiteComponent {\n  public "),e.TgZ(66,"i")(67,"strong"),e._uU(68,"doScroll()"),e.qZA()(),e._uU(69,": void {\n    // Close the open GlnAutocomplete panel.\n    GlnAutocompleteOpenUtil.closeAll();\n  }\n}"),e.qZA()(),e.TgZ(70,"p"),e._uU(71," 2. close the open panel of the GlnAutocomplete component; "),e.qZA(),e.TgZ(72,"p"),e._uU(73,' There is a static class GlnAutocompleteOpenUtil, which contains a list of all GlnAutocomplete components with an open panel. Calling the static method "closeAll()" will gracefully close all open panes. '),e.qZA()(),e.TgZ(74,"section",6)(75,"h4",1),e._uU(76," Highlight "),e.TgZ(77,"a",2),e._uU(78,"#"),e.qZA()(),e.TgZ(79,"p"),e._uU(80,' Sometimes it is required to select a fragment of the input line in the list of available values of the panel of the GlnAutocomplete component. You can use the "GlnHighlight" channel for this purpose. '),e.qZA(),e.TgZ(81,"span"),e._uU(82," To use this pipe GlnHighlight, in your module you need to add: "),e.qZA(),e.TgZ(83,"code")(84,"pre",5),e._uU(85,"import { GlnHighlightModule } from 'gelenium-ui';"),e.qZA()(),e.TgZ(86,"p"),e._uU(87,' It is required to add the "GlnHighlight" channel in the component template and pass the search value (input string value) as the first parameter to it. '),e.qZA(),e.TgZ(88,"span"),e._uU(89,"Template example:"),e.qZA(),e.TgZ(90,"code")(91,"pre",4),e._uU(92,'<gln-input formControlName="model05"\n  ['),e.TgZ(93,"strong"),e._uU(94,"glnAutocompleteTrigger"),e.qZA(),e._uU(95,']="'),e.TgZ(96,"i")(97,"strong"),e._uU(98,"autocomplete05"),e.qZA()(),e._uU(99,'">\n</gln-input>\n<'),e.TgZ(100,"strong"),e._uU(101,"gln-autocomplete"),e.qZA(),e._uU(102," #"),e.TgZ(103,"i")(104,"strong"),e._uU(105,"autocomplete05"),e.qZA()(),e._uU(106,'="glnAutocomplete">\n  <gln-option *ngFor="let item of value05" [value]="item">\n    <span\n      [innerHtml]="item | '),e.TgZ(107,"strong"),e._uU(108,"glnHighlight:"),e.qZA(),e._uU(109,' control05.model05.value">\n    </span>\n  </gln-option>\n</'),e.TgZ(110,"strong"),e._uU(111,"gln-autocomplete"),e.qZA(),e._uU(112,">"),e.qZA()()(),e.TgZ(113,"form",7)(114,"div",8)(115,"div",9)(116,"div")(117,"small")(118,"em"),e._uU(119,"Highlight of the input line."),e.qZA()()(),e.TgZ(120,"gln-input",10),e.NdJ("input",function(){return n.value06a=n.filtered2(n.fruits,n.control06a.model06a.value)}),e.qZA(),e.TgZ(121,"gln-autocomplete",11,12),e.YNc(123,ie,3,5,"gln-option",13),e.qZA()()()(),e.TgZ(124,"section",0)(125,"mat-accordion")(126,"mat-expansion-panel")(127,"mat-expansion-panel-header")(128,"mat-panel-title"),e._uU(129),e.qZA()(),e.TgZ(130,"mat-tab-group",14)(131,"mat-tab",15)(132,"code")(133,"pre",4),e._uU(134,'<form [formGroup]="formGroup06a"\n  novalidate\n  autocomplete="off">\n\n  <div class="app-group">\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Highlight of the input line.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model06a"\n        class="acf-middle"\n        [glnAutocompleteTrigger]="autocomplete06a"\n        helperText="Used: glnHighlight."\n        (input)="value06a = filtered2(fruits, control06a.model06a.value)">\n      </gln-input>\n      <gln-autocomplete #autocomplete06a="glnAutocomplete"\n        [visibleSize]="5">\n        <gln-option *ngFor="let item of value06a"\n          [value]="item">\n          <span [innerHtml]="\'fruit - \' + capitalizeFirstLetter(item)\n            | glnHighlight: control06a.model06a.value">\n          </span>\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n  </div>\n\n</form>'),e.qZA()()(),e.TgZ(135,"mat-tab",15)(136,"code")(137,"pre",5),e._uU(138,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormGroup, FormControl \n} from '@angular/forms';\n\n@Component({\n  selector: 'app-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AutocompleteComponent {\n  // prettier-ignore\n  public fruits = [\n    'apple'     , 'apricot'  , 'avocado'   , 'banana'    , 'black currant',\n    'blackberry', 'blueberry', 'cherry'    , 'coconut'   , 'cranberry'    ,\n    'dragonfruit', 'fig'     , 'goji berry', 'grape'     , 'grapefruit'   ,\n    'grapes'    , 'guava'    , 'iwi'       , 'jackfruit' , 'jamun'        ,\n    'jujube'    , 'lemon'    , 'lime'      , 'longan'    , 'loquat'       ,\n    'lychee'    , 'mandarin' , 'mango'     , 'melon'     , 'mulberry'     ,\n    'nectarine' , 'kiwi'     , 'olive'     , 'orange'    , 'palm fruit'   ,\n    'papaya', 'passion fruit', 'peach'     , 'pear'      , 'persimmon'    ,\n    'pineapple' , 'plum'  , 'pomegranate', 'prickly pear', 'pumpkin'      ,\n    'quince'    , 'raspberry', 'red currant', 'sapodilla', 'satsuma'      ,\n    'strawberry','sweet lemon', 'tamarind' , 'tangerine' , 'watermelon'\n  ];\n\n  public control06a = {\n    model06a: new FormControl('', []),\n  };\n  public formGroup06a: FormGroup = new FormGroup(this.control06a);\n  public value06a: string[] = [];\n\n  constructor() {\n    this.control06a.model06a.setValue('red cur');\n    this.value06a = this.filtered2(\n      this.fruits, this.control06a.model06a.value);\n  }\n\n  public capitalizeFirstLetter(value: string): string {\n    return value ? value[0].toUpperCase() + value.slice(1) : '';\n  }\n\n  public filtered2(\n    list: string[] | null, value: string | null\n  ): string[] {\n    const valueBuff = (value || '')\n      .toLowerCase()\n      .split(' ')\n      .filter((word) => word.length > 0);\n    return list?.filter((item) => valueBuff.some(\n      (item2) => item.toLowerCase().includes(item2))) || [];\n  }\n}"),e.qZA()()(),e.TgZ(139,"mat-tab",15)(140,"code")(141,"pre",16),e._uU(142,"app-autocomplete {\n  .app-group {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .app-elem {\n    min-width: 26ch;\n    margin: 10px 10px;\n  }\n  .acf-middle {\n    width: 160px;\n  }\n}"),e.qZA()()()()()()(),e._UZ(143,"hr",17),e.TgZ(144,"section",18)(145,"h4",1),e._uU(146," Highlight for each word "),e.TgZ(147,"a",2),e._uU(148,"#"),e.qZA()(),e.TgZ(149,"p"),e._uU(150,' The "GlnHighlight" channel has a second optional parameter "isSearchByAllWords". If you specify this parameter, the search string will be split into separate fragments. And these fragments will be highlighted. '),e.qZA(),e.TgZ(151,"p"),e._uU(152," The division into fragments is performed by the following symbols: "),e.qZA(),e.TgZ(153,"code")(154,"pre"),e._uU(155,"' ', '-', '[', ']', '/', '{', '}', '(', ')', '*', '+', '?', '.', '\\', '^', '$', '|'\n  "),e.qZA()(),e.TgZ(156,"span"),e._uU(157,"Template example:"),e.qZA(),e.TgZ(158,"code")(159,"pre",4),e._uU(160,'<gln-input formControlName="model05"\n  ['),e.TgZ(161,"strong"),e._uU(162,"glnAutocompleteTrigger"),e.qZA(),e._uU(163,']="'),e.TgZ(164,"i")(165,"strong"),e._uU(166,"autocomplete05"),e.qZA()(),e._uU(167,'">\n</gln-input>\n<'),e.TgZ(168,"strong"),e._uU(169,"gln-autocomplete"),e.qZA(),e._uU(170," #"),e.TgZ(171,"i")(172,"strong"),e._uU(173,"autocomplete05"),e.qZA()(),e._uU(174,'="glnAutocomplete">\n  <gln-option *ngFor="let item of value05" [value]="item">\n    <span\n      [innerHtml]="item | '),e.TgZ(175,"strong"),e._uU(176,"glnHighlight:"),e.qZA(),e._uU(177," control05.model05.value "),e.TgZ(178,"strong"),e._uU(179,": true"),e.qZA(),e._uU(180,'">\n    </span>\n  </gln-option>\n</'),e.TgZ(181,"strong"),e._uU(182,"gln-autocomplete"),e.qZA(),e._uU(183,">"),e.qZA()()(),e.TgZ(184,"form",7)(185,"div",8)(186,"div",9)(187,"div")(188,"small")(189,"em"),e._uU(190,"Highlight of the input line."),e.qZA()()(),e.TgZ(191,"gln-input",19),e.NdJ("input",function(){return n.value06b=n.filtered2(n.fruits,n.control06b.model06b.value)}),e.qZA(),e.TgZ(192,"gln-autocomplete",11,20),e.YNc(194,ae,3,6,"gln-option",13),e.qZA()()()(),e.TgZ(195,"section",0)(196,"mat-accordion")(197,"mat-expansion-panel")(198,"mat-expansion-panel-header")(199,"mat-panel-title"),e._uU(200),e.qZA()(),e.TgZ(201,"mat-tab-group",14)(202,"mat-tab",15)(203,"code")(204,"pre",4),e._uU(205,'<form [formGroup]="formGroup06b"\n  novalidate\n  autocomplete="off">\n\n  <div class="app-group">\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Highlight of the input line.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model06b"\n        class="acf-middle"\n        [glnAutocompleteTrigger]="autocomplete06b"\n        helperText="Used: glnHighlight."\n        (input)="value06b = filtered2(fruits, control06b.model06b.value)"\n        autocomplete="off">\n      </gln-input>\n      <gln-autocomplete #autocomplete06b="glnAutocomplete"\n        [visibleSize]="5">\n        <gln-option *ngFor="let item of value06b"\n          [value]="item">\n          <span [innerHtml]="\'fruit - \' + capitalizeFirstLetter(item)\n            | glnHighlight: control06b.model06b.value: true">\n          </span>\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n  </div>\n\n</form>'),e.qZA()()(),e.TgZ(206,"mat-tab",15)(207,"code")(208,"pre",5),e._uU(209,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormGroup, FormControl \n} from '@angular/forms';\n\n@Component({\n  selector: 'app-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AutocompleteComponent {\n  // prettier-ignore\n  public fruits = [\n    'apple'     , 'apricot'  , 'avocado'   , 'banana'    , 'black currant',\n    'blackberry', 'blueberry', 'cherry'    , 'coconut'   , 'cranberry'    ,\n    'dragonfruit', 'fig'     , 'goji berry', 'grape'     , 'grapefruit'   ,\n    'grapes'    , 'guava'    , 'iwi'       , 'jackfruit' , 'jamun'        ,\n    'jujube'    , 'lemon'    , 'lime'      , 'longan'    , 'loquat'       ,\n    'lychee'    , 'mandarin' , 'mango'     , 'melon'     , 'mulberry'     ,\n    'nectarine' , 'kiwi'     , 'olive'     , 'orange'    , 'palm fruit'   ,\n    'papaya', 'passion fruit', 'peach'     , 'pear'      , 'persimmon'    ,\n    'pineapple' , 'plum'  , 'pomegranate', 'prickly pear', 'pumpkin'      ,\n    'quince'    , 'raspberry', 'red currant', 'sapodilla', 'satsuma'      ,\n    'strawberry','sweet lemon', 'tamarind' , 'tangerine' , 'watermelon'\n  ];\n\n  public control06b = {\n    model06b: new FormControl('', []),\n  };\n  public formGroup06b: FormGroup = new FormGroup(this.control06b);\n  public value06b: string[] = [];\n\n  constructor() {\n    this.control06b.model06b.setValue('red cur');\n    this.value06b = this.filtered2(\n      this.fruits, this.control06b.model06b.value);\n  }\n\n  public capitalizeFirstLetter(value: string): string {\n    return value ? value[0].toUpperCase() + value.slice(1) : '';\n  }\n\n  public filtered2(\n    list: string[] | null, value: string | null\n  ): string[] {\n    const valueBuff = (value || '')\n      .toLowerCase()\n      .split(' ')\n      .filter((word) => word.length > 0);\n    return list?.filter((item) => valueBuff.some(\n      (item2) => item.toLowerCase().includes(item2))) || [];\n  }\n}"),e.qZA()()(),e.TgZ(210,"mat-tab",15)(211,"code")(212,"pre",16),e._uU(213,"app-autocomplete {\n  .app-group {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .app-elem {\n    min-width: 26ch;\n    margin: 10px 10px;\n  }\n  .acf-middle {\n    width: 160px;\n  }\n}"),e.qZA()()()()()()(),e._UZ(214,"hr",17)),2&o){const p=e.MAs(122),u=e.MAs(193);e.xp6(3),e.Q6J("href",n.urlCmAutocomplete+"#Feature",e.LSH),e.xp6(6),e.Q6J("href",n.urlCmSelect+"#Feature",e.LSH),e.xp6(6),e.Q6J("href",n.urlCmAutocomplete+"#feature-close-all",e.LSH),e.xp6(62),e.Q6J("href",n.urlCmAutocomplete+"#feature-highlight",e.LSH),e.xp6(36),e.Q6J("formGroup",n.formGroup06a),e.xp6(7),e.Q6J("glnAutocompleteTrigger",p),e.xp6(1),e.Q6J("visibleSize",5),e.xp6(2),e.Q6J("ngForOf",n.value06a),e.xp6(6),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(4),e.Q6J("label",n.labelTs),e.xp6(4),e.Q6J("label",n.labelCss),e.xp6(8),e.Q6J("href",n.urlCmAutocomplete+"#feature-highlight2",e.LSH),e.xp6(37),e.Q6J("formGroup",n.formGroup06b),e.xp6(7),e.Q6J("glnAutocompleteTrigger",u),e.xp6(1),e.Q6J("visibleSize",5),e.xp6(2),e.Q6J("ngForOf",n.value06b),e.xp6(6),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(4),e.Q6J("label",n.labelTs),e.xp6(4),e.Q6J("label",n.labelCss)}},dependencies:[g.sg,i._Y,i.JJ,i.JL,i.sg,i.u,m.pp,m.ib,m.yz,m.yK,d.SP,d.uX,a.MY,a.jA,a.j7,a.WO,a.JH],styles:["app-cm-autocomplete-feature{display:block}app-cm-autocomplete-feature .acf-middle{width:160px}\n"],encapsulation:2,changeDetection:0}),t})();function ue(t,l){if(1&t&&(e.TgZ(0,"gln-option",23),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ","fruit - "+n.capitalizeFirstLetter(o)," ")}}function pe(t,l){if(1&t&&(e.TgZ(0,"gln-option",23),e._uU(1),e.qZA()),2&t){const o=l.$implicit,n=e.oxw();e.Q6J("value",o),e.xp6(1),e.hij(" ","fruit - "+n.capitalizeFirstLetter(o)," ")}}const me={panelClass:["acc-panel"],position:"end",visibleSize:7};let se=(()=>{class t{constructor(){this.labelShowSource=r.sx,this.labelOutlined=r.SR,this.labelUnderline=r.kP,this.labelStandard=r.Qb,this.labelHtml=r.zC,this.labelTs=r.QS,this.labelCss=r.Er,this.urlCmAutocomplete="/"+c.g.get("URL_COMPONENTS")+"/"+c.g.get("URL_COMPONENTS_AUTOCOMPLETE"),this.fruits=["apple","apricot","avocado","banana","black currant","blackberry","blueberry","cherry","coconut","cranberry","dragonfruit","fig","goji berry","grape","grapefruit","grapes","guava","iwi","jackfruit","jamun","jujube","lemon","lime","longan","loquat","lychee","mandarin","mango","melon","mulberry","nectarine","kiwi","olive","orange","palm fruit","papaya","passion fruit","peach","pear","persimmon","pineapple","plum","pomegranate","prickly pear","pumpkin","quince","raspberry","red currant","sapodilla","satsuma","strawberry","sweet lemon","tamarind","tangerine","watermelon"],this.control08a={model08a:new i.NI(null,[]),model08b:new i.NI(null,[])},this.formGroup08a=new i.cw(this.control08a)}capitalizeFirstLetter(o){return o?o[0].toUpperCase()+o.slice(1):""}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-cm-autocomplete-config"]],inputs:{labelShowSource:"labelShowSource",labelOutlined:"labelOutlined",labelUnderline:"labelUnderline",labelStandard:"labelStandard",labelHtml:"labelHtml",labelTs:"labelTs",labelCss:"labelCss"},features:[e._Bn([{provide:a.gR,useValue:me}])],decls:252,vars:14,consts:[["mr-vr",""],[1,"app-hover-link"],[3,"href"],["source","ts"],["mr-vr","","id","config-interface"],[1,"app-tab"],[1,"app-mn-wd-22ch"],["mr-vr","","id","config-provide"],["mr-vr","","id","config-params"],["novalidate","","autocomplete","off",3,"formGroup"],[1,"app-group"],[1,"app-elem"],["formControlName","model08a","label","Fruit","helperText","Position: 'end', Size: 7.",2,"width","161px",3,"glnAutocompleteTrigger"],["autocomplete08a","glnAutocomplete"],[3,"value",4,"ngFor","ngForOf"],["formControlName","model08b","label","Fruit","helperText","Position: 'center', Size: 5.",2,"width","161px",3,"glnAutocompleteTrigger"],["position","center",3,"visibleSize"],["autocomplete08b","glnAutocomplete"],["animationDuration","0ms"],[3,"label"],["source","html"],["source","css"],["br-nn",""],[3,"value"]],template:function(o,n){if(1&o&&(e.TgZ(0,"section",0)(1,"h3",1),e._uU(2," Config "),e.TgZ(3,"a",2),e._uU(4,"#"),e.qZA()(),e.TgZ(5,"p"),e._uU(6," If your application will have a single style for GlnAutocomplete elements, then you can set a single configuration. To do this, you need to create an object with the GlnAutocompleteConfig interface and define the required values. Next, specify the resulting object in the list of providers for the entire application (at the level of the AppComponent). "),e.qZA(),e.TgZ(7,"code")(8,"pre",3),e._uU(9,"const glnAutocompleteConfigDefault: GlnAutocompleteConfig = {\n  position: 'center',\n  visibleSize: 7,\n};\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  providers: [\n    { provide: GLN_AUTOCOMPLETE_CONFIG, useValue: glnAutocompleteConfigDefault }\n  ],\n})\nexport class AppComponent {\n  title = 'demo';\n}"),e.qZA()(),e.TgZ(10,"p"),e._uU(11,' After that, all "GlnAutocomplete" components will have the same configuration. '),e.qZA()(),e.TgZ(12,"section",4)(13,"h4",1),e._uU(14," GlnAutocompleteConfig interface. "),e.TgZ(15,"a",2),e._uU(16,"#"),e.qZA()()(),e.TgZ(17,"table",5)(18,"tbody")(19,"tr")(20,"th",6),e._uU(21,"Name"),e.qZA(),e.TgZ(22,"th"),e._uU(23,"Description"),e.qZA()(),e.TgZ(24,"tr")(25,"td")(26,"code"),e._uU(27,"isClearOnEscape?:"),e._UZ(28,"br"),e._uU(29," \xa0\xa0boolean"),e._UZ(30,"br"),e._uU(31," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(32,"td")(33,"span"),e._uU(34," Clear the input field when pressing 'Escape'. "),e._UZ(35,"br"),e._uU(36,"(default = false;) "),e.qZA()()(),e.TgZ(37,"tr")(38,"td")(39,"code"),e._uU(40,"isMaxWd?:"),e._UZ(41,"br"),e._uU(42," \xa0\xa0boolean"),e._UZ(43,"br"),e._uU(44," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(45,"td")(46,"span"),e._uU(47," Set the width limit of the options list panel. "),e._UZ(48,"br"),e._uU(49,"(default = false;) "),e.qZA()()(),e.TgZ(50,"tr")(51,"td")(52,"code"),e._uU(53,"isNoAnimation?:"),e._UZ(54,"br"),e._uU(55," \xa0\xa0boolean"),e._UZ(56,"br"),e._uU(57," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(58,"td")(59,"span"),e._uU(60," Disable animation execution. "),e._UZ(61,"br"),e._uU(62,"(default = false;) "),e.qZA()()(),e.TgZ(63,"tr")(64,"td")(65,"code"),e._uU(66,"isNoCloseOnSelect?:"),e._UZ(67,"br"),e._uU(68," \xa0\xa0boolean"),e._UZ(69,"br"),e._uU(70," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(71,"td")(72,"span"),e._uU(73," The options panel will not close after an option is selected. "),e._UZ(74,"br"),e._uU(75,"(default = false;) "),e.qZA()()(),e.TgZ(76,"tr")(77,"td")(78,"code"),e._uU(79,"isNoOpenOnMouse?:"),e._UZ(80,"br"),e._uU(81," \xa0\xa0boolean"),e._UZ(82,"br"),e._uU(83," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(84,"td")(85,"span"),e._uU(86," The options panel will not open/close on mouse click. "),e._UZ(87,"br"),e._uU(88,"(default = false;) "),e.qZA()()(),e.TgZ(89,"tr")(90,"td")(91,"code"),e._uU(92,"isNoRipple?:"),e._UZ(93,"br"),e._uU(94," \xa0\xa0boolean"),e._UZ(95,"br"),e._uU(96," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(97,"td")(98,"span"),e._uU(99," Disables the ripple effect. "),e._UZ(100,"br"),e._uU(101,"(default = false;) "),e.qZA()()(),e.TgZ(102,"tr")(103,"td")(104,"code"),e._uU(105,"isOpenOnFocus?:"),e._UZ(106,"br"),e._uU(107," \xa0\xa0boolean"),e._UZ(108,"br"),e._uU(109," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(110,"td")(111,"span"),e._uU(112," The options panel opens after receiving input focus. "),e._UZ(113,"br"),e._uU(114,"(default = false;) "),e.qZA()()(),e.TgZ(115,"tr")(116,"td")(117,"code"),e._uU(118,"position?:"),e._UZ(119,"br"),e._uU(120," \xa0\xa0string"),e._UZ(121,"br"),e._uU(122," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(123,"td")(124,"span"),e._uU(125," Specifies how to horizontally align the options list panel. "),e.qZA(),e.TgZ(126,"ul")(127,"li"),e._uU(128,"'start' - align to the left of the main element; (default)"),e.qZA(),e.TgZ(129,"li"),e._uU(130,"'center' - align to the center of the main element;"),e.qZA(),e.TgZ(131,"li"),e._uU(132,"'end' - align to the right side of the main element;"),e.qZA()()()(),e.TgZ(133,"tr")(134,"td")(135,"code"),e._uU(136,"panelClass?:"),e._UZ(137,"br"),e._uU(138," \xa0\xa0string"),e._UZ(139,"br"),e._uU(140," \xa0\xa0| string[]"),e._UZ(141,"br"),e._uU(142," \xa0\xa0| Set<string>"),e._UZ(143,"br"),e._uU(144," \xa0\xa0| { [key: string]: unknown }"),e._UZ(145,"br"),e._uU(146," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(147,"td")(148,"span"),e._uU(149," Classes to be passed to the options panel. Supports the same syntax as 'ngClass'. "),e._UZ(150,"br"),e._uU(151,"(default = '';) "),e.qZA()()(),e.TgZ(152,"tr")(153,"td")(154,"code"),e._uU(155,"visibleSize?:"),e._UZ(156,"br"),e._uU(157," \xa0\xa0number"),e._UZ(158,"br"),e._uU(159," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(160,"td")(161,"span"),e._uU(162," Specifies the maximum number of visible option elements. This value is multiplied by the height of the option and defines the maximum height of the options panel. "),e._UZ(163,"br"),e._uU(164," If multiple option elements have the smallest height, then that will be the height of the option element. "),e.qZA()()()()(),e.TgZ(165,"section",7)(166,"h4",1),e._uU(167,' 1. Configuration with "panelClass", "position" and "visibleSize". '),e.TgZ(168,"a",2),e._uU(169,"#"),e.qZA()(),e.TgZ(170,"p"),e._uU(171," For example, let's prepare a configuration in which: "),e.qZA(),e.TgZ(172,"ul")(173,"li"),e._uU(174,"\"panelClass\" will have the value ['acc-panel']"),e.qZA(),e.TgZ(175,"li"),e._uU(176,"\"position\" will have the value 'end'"),e.qZA(),e.TgZ(177,"li"),e._uU(178,'"visibleSize" will have the value 7'),e.qZA()(),e.TgZ(179,"code")(180,"pre",3),e._uU(181,"const glnAutocompleteConfigDefault: GlnAutocompleteConfig = {\n  panelClass=['acc-panel']\n  position: 'end';\n  visibleSize: 7\n};"),e.qZA()()(),e.TgZ(182,"section",8)(183,"h4",1),e._uU(184,' 2. Configuration with "position" and "visibleSize". '),e.TgZ(185,"a",2),e._uU(186,"#"),e.qZA()(),e.TgZ(187,"p"),e._uU(188,' Suppose we have a provider in our application with "GlnAutocompleteConfig" and all Autocomplete elements accept its default values. We can change these values for an individual element. To do this, you need to specify in this element those properties that do not match the provider\'s configuration. '),e.qZA(),e.TgZ(189,"p"),e._uU(190," For example, let's specify the following parameters: "),e.qZA(),e.TgZ(191,"code")(192,"pre",3),e._uU(193,'position="center"\nvisibleSize=5'),e.qZA()(),e.TgZ(194,"p"),e._uU(195," In other words, there is the following order of determining the configuration parameters: "),e.qZA(),e.TgZ(196,"ul")(197,"li"),e._uU(198," Standard values are taken. "),e.TgZ(199,"code")(200,"pre",3),e._uU(201,"isClearOnEscape=false,\nisMaxWd=false,\nisNoAnimation=false,\nisNoCloseOnSelect=false,\nisNoOpenOnMouse=false,\nisNoRipple=false,\nisOpenOnFocus=false,\npanelClass='',\nposition='start',\nvisibleSize=0"),e.qZA()()(),e.TgZ(202,"li"),e._uU(203," Values from the default configuration provider (if there is one). "),e.qZA(),e.TgZ(204,"li"),e._uU(205," Values from input parameters (if there is one). "),e.qZA()()(),e.TgZ(206,"form",9)(207,"div",10)(208,"div",11)(209,"div")(210,"small")(211,"em"),e._uU(212,"Default: position: 'end', visibleSize: 7."),e.qZA()()(),e._UZ(213,"gln-input",12),e.TgZ(214,"gln-autocomplete",null,13),e.YNc(216,ue,2,2,"gln-option",14),e.qZA()(),e.TgZ(217,"div",11)(218,"div")(219,"small")(220,"em"),e._uU(221,"Params: position: 'center', visibleSize: 5."),e.qZA()()(),e._UZ(222,"gln-input",15),e.TgZ(223,"gln-autocomplete",16,17),e.YNc(225,pe,2,2,"gln-option",14),e.qZA()()()(),e.TgZ(226,"section",0)(227,"mat-accordion")(228,"mat-expansion-panel")(229,"mat-expansion-panel-header")(230,"mat-panel-title"),e._uU(231),e.qZA()(),e.TgZ(232,"mat-tab-group",18)(233,"mat-tab",19)(234,"code")(235,"pre",20),e._uU(236,'<form [formGroup]="formGroup08a"\n  novalidate\n  autocomplete="off">\n\n  <div class="app-group">\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Default: position: \'end\', visibleSize: 7.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model08a"\n        style="width: 161px;"\n        label="Fruit"\n        [glnAutocompleteTrigger]="autocomplete08a"\n        helperText="Position: \'end\', Size: 7.">\n      </gln-input>\n      <gln-autocomplete #autocomplete08a="glnAutocomplete">\n        <gln-option *ngFor="let item of fruits"\n          [value]="item">\n          '),e.TgZ(237,"b"),e._uU(238,"{"),e.qZA(),e._uU(239,'{ \'fruit - \' + capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>Params: position: \'center\', visibleSize: 5.</em>\n        </small>\n      </div>\n      <gln-input formControlName="model08b"\n        style="width: 161px;"\n        label="Fruit"\n        [glnAutocompleteTrigger]="autocomplete08b"\n        helperText="Position: \'center\', Size: 5.">\n      </gln-input>\n      <gln-autocomplete #autocomplete08b="glnAutocomplete"\n        position="center"\n        [visibleSize]="5">\n        <gln-option *ngFor="let item of fruits"\n          [value]="item">\n          '),e.TgZ(240,"b"),e._uU(241,"{"),e.qZA(),e._uU(242,"{ 'fruit - ' + capitalizeFirstLetter(item) }}\n        </gln-option>\n      </gln-autocomplete>\n    </div>\n\n  </div>\n\n</form>"),e.qZA()()(),e.TgZ(243,"mat-tab",19)(244,"code")(245,"pre",3),e._uU(246,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormGroup, FormControl \n} from '@angular/forms';\n\n@Component({\n  selector: 'app-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AutocompleteComponent {\n  // prettier-ignore\n  public fruits = [\n    'apple'     , 'apricot'  , 'avocado'   , 'banana'    , 'black currant',\n    'blackberry', 'blueberry', 'cherry'    , 'coconut'   , 'cranberry'    ,\n    'dragonfruit', 'fig'     , 'goji berry', 'grape'     , 'grapefruit'   ,\n    'grapes'    , 'guava'    , 'iwi'       , 'jackfruit' , 'jamun'        ,\n    'jujube'    , 'lemon'    , 'lime'      , 'longan'    , 'loquat'       ,\n    'lychee'    , 'mandarin' , 'mango'     , 'melon'     , 'mulberry'     ,\n    'nectarine' , 'kiwi'     , 'olive'     , 'orange'    , 'palm fruit'   ,\n    'papaya', 'passion fruit', 'peach'     , 'pear'      , 'persimmon'    ,\n    'pineapple' , 'plum'  , 'pomegranate', 'prickly pear', 'pumpkin'      ,\n    'quince'    , 'raspberry', 'red currant', 'sapodilla', 'satsuma'      ,\n    'strawberry','sweet lemon', 'tamarind' , 'tangerine' , 'watermelon'\n  ];\n\n  public control08a = {\n    model08a: new FormControl(null, []),\n    model08b: new FormControl(null, []),\n  };\n  public formGroup08a: FormGroup = new FormGroup(this.control08a);\n\n  public capitalizeFirstLetter(value: string): string {\n    return value ? value[0].toUpperCase() + value.slice(1) : '';\n  }\n}"),e.qZA()()(),e.TgZ(247,"mat-tab",19)(248,"code")(249,"pre",21),e._uU(250,"app-autocomplete {\n  .app-group {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .app-elem {\n    min-width: 26ch;\n    margin: 10px 10px;\n  }\n  gln-autocomplete .glnac-panel.acc-panel {\n    --glnac-border-radius: 10px;\n    background-color: hsla(160, 100%, 75%, 4%);\n    box-shadow: #276566de 0 5px 5px -3px\n      , #27656694 0 8px 10px 1px\n      , #27656694 0 5px 14px 2px;\n  }\n}"),e.qZA()()()()()()(),e._UZ(251,"hr",22)),2&o){const p=e.MAs(215),u=e.MAs(224);e.xp6(3),e.Q6J("href",n.urlCmAutocomplete+"#Config",e.LSH),e.xp6(12),e.Q6J("href",n.urlCmAutocomplete+"#config-interface",e.LSH),e.xp6(153),e.Q6J("href",n.urlCmAutocomplete+"#config-provide",e.LSH),e.xp6(17),e.Q6J("href",n.urlCmAutocomplete+"#config-params",e.LSH),e.xp6(21),e.Q6J("formGroup",n.formGroup08a),e.xp6(7),e.Q6J("glnAutocompleteTrigger",p),e.xp6(3),e.Q6J("ngForOf",n.fruits),e.xp6(6),e.Q6J("glnAutocompleteTrigger",u),e.xp6(1),e.Q6J("visibleSize",5),e.xp6(2),e.Q6J("ngForOf",n.fruits),e.xp6(6),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(10),e.Q6J("label",n.labelTs),e.xp6(4),e.Q6J("label",n.labelCss)}},dependencies:[g.sg,i._Y,i.JJ,i.JL,i.sg,i.u,m.pp,m.ib,m.yz,m.yK,d.SP,d.uX,a.MY,a.jA,a.j7,a.WO],styles:["app-cm-autocomplete-config{display:block}app-cm-autocomplete-config gln-autocomplete .glnac-panel.acc-panel{--glnac-border-radius: 10px;background-color:#80ffd40a;box-shadow:#276566de 0 5px 5px -3px,#27656694 0 8px 10px 1px,#27656694 0 5px 14px 2px}\n"],encapsulation:2,changeDetection:0}),t})(),ce=(()=>{class t{constructor(){this.urlCmAutocomplete="/"+c.g.get("URL_COMPONENTS")+"/"+c.g.get("URL_COMPONENTS_AUTOCOMPLETE")}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-cm-autocomplete-api"]],decls:597,vars:7,consts:[["mr-vr",""],[1,"app-hover-link"],[3,"href"],["fw500",""],["mr-vr","","id","api-properties"],[1,"app-tab"],[1,"app-mn-wd-22ch"],["mr-vr","","id","api-methods"],["colspan","2"],["br-nn",""],["mr-vr","","id","api-methods2"],["mr-vr","","id","api-css-variables-optional"],["source","html"],["source","css"]],template:function(o,n){1&o&&(e.TgZ(0,"section",0)(1,"h3",1),e._uU(2," API: GlnAutocomplete. "),e.TgZ(3,"a",2),e._uU(4,"#"),e.qZA()(),e.TgZ(5,"p"),e._uU(6," Selector: "),e.TgZ(7,"span",3),e._uU(8,"gln-autocomplete"),e.qZA()(),e.TgZ(9,"p"),e._uU(10," Exported as: "),e.TgZ(11,"span",3),e._uU(12,"glnAutocomplete"),e.qZA()()(),e.TgZ(13,"section",4)(14,"h4",1),e._uU(15," Properties. "),e.TgZ(16,"a",2),e._uU(17,"#"),e.qZA()()(),e.TgZ(18,"table",5)(19,"thead")(20,"tr")(21,"th",6),e._uU(22,"Name"),e.qZA(),e.TgZ(23,"th"),e._uU(24,"Description"),e.qZA()()(),e.TgZ(25,"tbody")(26,"tr")(27,"td")(28,"code"),e._uU(29,"@Input()"),e.qZA(),e.TgZ(30,"code"),e._uU(31,"id: string;"),e.qZA()(),e.TgZ(32,"td")(33,"span"),e._uU(34," ID of the native input element."),e._UZ(35,"br"),e._uU(36,"(default = `glnac-${uniqueIdCounter++}`;) "),e.qZA()()(),e.TgZ(37,"tr")(38,"td")(39,"code"),e._uU(40,"@Input()"),e.qZA(),e.TgZ(41,"code"),e._uU(42,"config: GlnAutocompleteConfig"),e._UZ(43,"br"),e._uU(44," \xa0\xa0| null"),e._UZ(45,"br"),e._uU(46," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(47,"td")(48,"span"),e._uU(49,"Defines a configuration object."),e.qZA(),e._UZ(50,"br"),e.TgZ(51,"a",2),e._uU(52,"More details."),e.qZA()()(),e.TgZ(53,"tr")(54,"td")(55,"code"),e._uU(56,"@Input()"),e.qZA(),e.TgZ(57,"code"),e._uU(58,"isClearOnEscape: string"),e._UZ(59,"br"),e._uU(60," \xa0\xa0| boolean"),e._UZ(61,"br"),e._uU(62," \xa0\xa0| null"),e._UZ(63,"br"),e._uU(64," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(65,"td")(66,"span"),e._uU(67,' Flag for clearing the input field when "Escape" is pressed.'),e._UZ(68,"br"),e._uU(69," (default = false;) Attribute (no content). "),e.qZA()()(),e.TgZ(70,"tr")(71,"td")(72,"code"),e._uU(73,"@Input()"),e.qZA(),e.TgZ(74,"code"),e._uU(75,"isDisabled: string"),e._UZ(76,"br"),e._uU(77," \xa0\xa0| boolean"),e._UZ(78,"br"),e._uU(79," \xa0\xa0| null"),e._UZ(80,"br"),e._uU(81," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(82,"td")(83,"span"),e._uU(84," Indicates that the element is disabled."),e._UZ(85,"br"),e._uU(86," (default = false;) Attribute (no content). "),e.qZA()()(),e.TgZ(87,"tr")(88,"td")(89,"code"),e._uU(90,"@Input()"),e.qZA(),e.TgZ(91,"code"),e._uU(92,"isMaxWd: string"),e._UZ(93,"br"),e._uU(94," \xa0\xa0| boolean"),e._UZ(95,"br"),e._uU(96," \xa0\xa0| null"),e._UZ(97,"br"),e._uU(98," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(99,"td")(100,"span"),e._uU(101," Flag for setting the maximum width when expanding the drop-down list of options. "),e._UZ(102,"br"),e._uU(103," Without this setting, the maximum width of the options panel is determined by its content. "),e._UZ(104,"br"),e._uU(105," The value of the minimum width of the options panel is always equal to the width of the parent. "),e._UZ(106,"br"),e._uU(107," (default = false;) Attribute (no content). "),e._UZ(108,"br"),e._uU(109," Also, the minimum/maximum width of the options panel can be set via css parameters: '--glnac-min-width', '--glnac-max-width'. "),e.qZA()()(),e.TgZ(110,"tr")(111,"td")(112,"code"),e._uU(113,"@Input()"),e.qZA(),e.TgZ(114,"code"),e._uU(115,"isNoAnimation: string"),e._UZ(116,"br"),e._uU(117," \xa0\xa0| boolean"),e._UZ(118,"br"),e._uU(119," \xa0\xa0| null"),e._UZ(120,"br"),e._uU(121," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(122,"td")(123,"span"),e._uU(124," Flag for disable animation when opening a drop-down list of options."),e._UZ(125,"br"),e._uU(126," (default = false;) Attribute (no content). "),e.qZA()()(),e.TgZ(127,"tr")(128,"td")(129,"code"),e._uU(130,"@Input()"),e.qZA(),e.TgZ(131,"code"),e._uU(132,"isNoCloseOnSelect: string"),e._UZ(133,"br"),e._uU(134," \xa0\xa0| boolean"),e._UZ(135,"br"),e._uU(136," \xa0\xa0| null"),e._UZ(137,"br"),e._uU(138," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(139,"td")(140,"span"),e._uU(141," Flag for canceling the closing of the options list panel when an option is selected."),e._UZ(142,"br"),e._uU(143," (default = false;) Attribute (no content). "),e.qZA()()(),e.TgZ(144,"tr")(145,"td")(146,"code"),e._uU(147,"@Input()"),e.qZA(),e.TgZ(148,"code"),e._uU(149,"isNoOpenOnMouse: string"),e._UZ(150,"br"),e._uU(151," \xa0\xa0| boolean"),e._UZ(152,"br"),e._uU(153," \xa0\xa0| null"),e._UZ(154,"br"),e._uU(155," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(156,"td")(157,"span"),e._uU(158," Flag for disabling opening/closing of the options list panel when the mouse button is pressed over the input field. "),e._UZ(159,"br"),e._uU(160," (default = false;) Attribute (no content). "),e.qZA()()(),e.TgZ(161,"tr")(162,"td")(163,"code"),e._uU(164,"@Input()"),e.qZA(),e.TgZ(165,"code"),e._uU(166,"isNoRipple: string"),e._UZ(167,"br"),e._uU(168," \xa0\xa0| boolean"),e._UZ(169,"br"),e._uU(170," \xa0\xa0| null"),e._UZ(171,"br"),e._uU(172," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(173,"td")(174,"span"),e._uU(175," Flag for disabling the ripple effect."),e._UZ(176,"br"),e._uU(177," (default = false;) Attribute (no content). "),e.qZA(),e._UZ(178,"br"),e.qZA()(),e.TgZ(179,"tr")(180,"td")(181,"code"),e._uU(182,"@Input()"),e.qZA(),e.TgZ(183,"code"),e._uU(184,"isOpenOnFocus: string"),e._UZ(185,"br"),e._uU(186," \xa0\xa0| boolean"),e._UZ(187,"br"),e._uU(188," \xa0\xa0| null"),e._UZ(189,"br"),e._uU(190," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(191,"td")(192,"span"),e._uU(193," Flag for opening the options list panel when receiving input focus."),e._UZ(194,"br"),e._uU(195," (default = false;) Attribute (no content). "),e.qZA(),e._UZ(196,"br"),e.qZA()(),e.TgZ(197,"tr")(198,"td")(199,"code"),e._uU(200,"@Input()"),e.qZA(),e.TgZ(201,"code"),e._uU(202,"panelClass: string"),e._UZ(203,"br"),e._uU(204," \xa0\xa0| string[]"),e._UZ(205,"br"),e._uU(206," \xa0\xa0| Set<string>"),e._UZ(207,"br"),e._uU(208," \xa0\xa0| { [key: string]: unknown }"),e._UZ(209,"br"),e._uU(210," = ''"),e.qZA()(),e.TgZ(211,"td")(212,"span"),e._uU(213," Classes to be passed to the options panel. Supports the same syntax as 'ngClass'."),e._UZ(214,"br"),e._uU(215," (default = '';) "),e.qZA()()(),e.TgZ(216,"tr")(217,"td")(218,"code"),e._uU(219,"@Input()"),e.qZA(),e.TgZ(220,"code"),e._uU(221,"position: string"),e._UZ(222,"br"),e._uU(223," \xa0\xa0| null"),e._UZ(224,"br"),e._uU(225," \xa0\xa0| undefined;"),e.qZA()(),e.TgZ(226,"td")(227,"span"),e._uU(228," Specifies how to horizontally align the options list panel. "),e.qZA(),e.TgZ(229,"ul")(230,"li"),e._uU(231,"'start' - align to the left of the main element; (default)"),e.qZA(),e.TgZ(232,"li"),e._uU(233,"'center' - align to the center of the main element;"),e.qZA(),e.TgZ(234,"li"),e._uU(235,"'end' - align to the right side of the main element;"),e.qZA()()()(),e.TgZ(236,"tr")(237,"td")(238,"code"),e._uU(239,"@Input()"),e.qZA(),e.TgZ(240,"code"),e._uU(241,"visibleSize: number;"),e.qZA()(),e.TgZ(242,"td")(243,"span"),e._uU(244," Specifies the maximum number of visible option elements. "),e._UZ(245,"br"),e._uU(246," The options list panel is set to "),e.TgZ(247,"i"),e._uU(248,"max-height = optionHeight * visibleSize"),e.qZA(),e._uU(249,". "),e._UZ(250,"br"),e._uU(251," Where option height is "),e.TgZ(252,"i"),e._uU(253,"optionHeight = lineHeight + 2 * 0.375 * fontSize"),e.qZA(),e._uU(254,"; "),e._UZ(255,"br"),e._uU(256,"(default = 0;) "),e.qZA()()(),e.TgZ(257,"tr")(258,"td")(259,"code"),e._uU(260,"@Output()"),e.qZA(),e.TgZ(261,"code"),e._uU(262,"opened: EventEmitter<void>;"),e.qZA()(),e.TgZ(263,"td")(264,"span"),e._uU(265,"Fires when the options list panel opens."),e.qZA()()(),e.TgZ(266,"tr")(267,"td")(268,"code"),e._uU(269,"@Output()"),e.qZA(),e.TgZ(270,"code"),e._uU(271,"closed: EventEmitter<void>;"),e.qZA()(),e.TgZ(272,"td")(273,"span"),e._uU(274,"Fires when the options list panel closes."),e.qZA()()(),e.TgZ(275,"tr")(276,"td")(277,"code"),e._uU(278,"@Output()"),e.qZA(),e.TgZ(279,"code"),e._uU(280,"selected: EventEmitter"),e._UZ(281,"br"),e._uU(282," \xa0<option: GlnOption> "),e.qZA()(),e.TgZ(283,"td")(284,"span"),e._uU(285," Fires when an option is selected."),e._UZ(286,"br"),e._uU(287," Passes the value of the selected option. "),e.qZA()()()()(),e.TgZ(288,"section",7)(289,"h4",1),e._uU(290," GlnAutocomplete interface methods: "),e.TgZ(291,"a",2),e._uU(292,"#"),e.qZA()()(),e.TgZ(293,"table",5)(294,"thead")(295,"th",8)(296,"span",3),e._uU(297,"isOpen(): boolean;"),e.qZA()()(),e.TgZ(298,"tbody")(299,"tr",8)(300,"td"),e._uU(301," Returns the flag for the open options list panel (true - open, false - closed). "),e.qZA()()()(),e._UZ(302,"hr",9),e.TgZ(303,"table",5)(304,"thead")(305,"th",8)(306,"span",3),e._uU(307,"open(): void;"),e.qZA()()(),e.TgZ(308,"tbody")(309,"tr",8)(310,"td"),e._uU(311," Opens the autocomplete options list panel. "),e.qZA()()()(),e._UZ(312,"hr",9),e.TgZ(313,"table",5)(314,"thead")(315,"th",8)(316,"span",3),e._uU(317,"close(options?: { noAnimation?: boolean }): void;"),e.qZA()()(),e.TgZ(318,"tbody")(319,"tr",8)(320,"td"),e._uU(321," Closes the autocomplete options list panel. "),e.qZA()()()(),e.TgZ(322,"table",5)(323,"thead")(324,"th",8)(325,"code"),e._uU(326,"Parameters (optionale)"),e.qZA()()(),e.TgZ(327,"tbody")(328,"tr")(329,"td",6)(330,"code"),e._uU(331,"options?: {"),e._UZ(332,"br"),e._uU(333," \xa0\xa0noAnimation?: boolean"),e._UZ(334,"br"),e._uU(335," }"),e.qZA()(),e.TgZ(336,"td"),e._uU(337," Flag for disable animation when closing a drop-down list of options. "),e.qZA()()()(),e._UZ(338,"hr",9),e.TgZ(339,"table",5)(340,"thead")(341,"th",8)(342,"span",3),e._uU(343,"getMarkedOption(): GlnOption | null;"),e.qZA()()(),e.TgZ(344,"tbody")(345,"tr",8)(346,"td"),e._uU(347," Get the option marked. "),e.qZA()()()(),e._UZ(348,"hr",9),e.TgZ(349,"table",5)(350,"thead")(351,"th",8)(352,"span",3),e._uU(353,"moveMarkedOptionByKey(keyboardKey: string): void;"),e.qZA()()(),e.TgZ(354,"tbody")(355,"tr",8)(356,"td"),e._uU(357," Move the marked option according to the pressed key. "),e.qZA()()()(),e.TgZ(358,"table",5)(359,"thead")(360,"th",8)(361,"code"),e._uU(362,"Parameters"),e.qZA()()(),e.TgZ(363,"tbody")(364,"tr")(365,"td",6)(366,"code"),e._uU(367,"keyboardKey: string"),e.qZA()(),e.TgZ(368,"td"),e._uU(369," The value of the key pressed. "),e.qZA()()()(),e._UZ(370,"hr",9),e.TgZ(371,"table",5)(372,"thead")(373,"th",8)(374,"span",3),e._uU(375,"setMarkedOptionAsSelected(): void;"),e.qZA()()(),e.TgZ(376,"tbody")(377,"tr",8)(378,"td"),e._uU(379," Set the marked option as selected. "),e.qZA()()()(),e._UZ(380,"hr",9),e.TgZ(381,"table",5)(382,"thead")(383,"th",8)(384,"span",3),e._uU(385,"setTrigger(trigger: GlnAutocompleteTrigger | null): void;"),e.qZA()()(),e.TgZ(386,"tbody")(387,"tr",8)(388,"td"),e._uU(389," Set trigger object for autocomplete. "),e.qZA()()()(),e.TgZ(390,"table",5)(391,"thead")(392,"th",8)(393,"code"),e._uU(394,"Parameters"),e.qZA()()(),e.TgZ(395,"tbody")(396,"tr")(397,"td",6)(398,"code"),e._uU(399,"trigger:"),e._UZ(400,"br"),e._uU(401," \xa0\xa0GlnAutocompleteTrigger"),e._UZ(402,"br"),e._uU(403," \xa0\xa0| null"),e.qZA()(),e.TgZ(404,"td"),e._uU(405," Set the trigger object to interact with the autocomplete object. "),e.qZA()()()(),e._UZ(406,"hr",9),e.TgZ(407,"section",10)(408,"h4",1),e._uU(409," GlnOptionParent interface methods: "),e.TgZ(410,"a",2),e._uU(411,"#"),e.qZA()()(),e.TgZ(412,"table",5)(413,"thead")(414,"th",8)(415,"span",3),e._uU(416,"setOptionSelected(option: GlnOption | null): void;"),e.qZA()()(),e.TgZ(417,"tbody")(418,"tr",8)(419,"td"),e._uU(420," Set the option as selected. "),e.qZA()()()(),e.TgZ(421,"table",5)(422,"thead")(423,"th",8)(424,"code"),e._uU(425,"Parameters"),e.qZA()()(),e.TgZ(426,"tbody")(427,"tr")(428,"td",6)(429,"code"),e._uU(430,"option: GlnOption"),e._UZ(431,"br"),e._uU(432," \xa0\xa0| null"),e.qZA()(),e.TgZ(433,"td"),e._uU(434," The option object to make selected. "),e.qZA()()()(),e._UZ(435,"hr",9),e.TgZ(436,"section",11)(437,"h4",1),e._uU(438," Css variables, optional. You can override the default values. "),e.TgZ(439,"a",2),e._uU(440,"#"),e.qZA()()(),e.TgZ(441,"table",5)(442,"thead")(443,"tr")(444,"th",6),e._uU(445,"Name"),e.qZA(),e.TgZ(446,"th"),e._uU(447,"Description"),e.qZA()()(),e.TgZ(448,"tbody")(449,"tr")(450,"td")(451,"code"),e._uU(452,"--glnac-max-height:"),e._UZ(453,"br"),e._uU(454," \xa0100vw;"),e.qZA()(),e.TgZ(455,"td")(456,"span"),e._uU(457," Defines the maximum height of the option list dropdown list of options. "),e.qZA()()(),e.TgZ(458,"tr")(459,"td")(460,"code"),e._uU(461,"--glnac-max-width:"),e._UZ(462,"br"),e._uU(463," \xa0100vw;"),e.qZA()(),e.TgZ(464,"td")(465,"span"),e._uU(466," Defines the maximum width of the option list dropdown list of options. "),e.qZA()()(),e.TgZ(467,"tr")(468,"td")(469,"code"),e._uU(470,"--glnac-min-width:"),e._UZ(471,"br"),e._uU(472," \xa0"),e.TgZ(473,"i"),e._uU(474,"original"),e.qZA(),e._uU(475,";"),e.qZA()(),e.TgZ(476,"td")(477,"span"),e._uU(478," Defines the minimum width of the option list dropdown list of options. "),e.qZA()()(),e.TgZ(479,"tr")(480,"td")(481,"code"),e._uU(482,"--glnac-def-bg-cl:"),e._UZ(483,"br"),e._uU(484," var(--glnac--default-bg-cl);"),e.qZA()(),e.TgZ(485,"td")(486,"span"),e._uU(487,' The value of the "background-color" property for the options list ("glnac-wrap" element).'),e._UZ(488,"br"),e.qZA()()(),e.TgZ(489,"tr")(490,"td")(491,"code"),e._uU(492,"--glnac-def-cl:"),e._UZ(493,"br"),e._uU(494," var(--glnac--default-cl);"),e.qZA()(),e.TgZ(495,"td")(496,"span"),e._uU(497,' The value of the "color" property for the options list ("glnac-wrap" element).'),e._UZ(498,"br"),e.qZA()()(),e.TgZ(499,"tr")(500,"td")(501,"code"),e._uU(502,"--glnac-border-radius:"),e._UZ(503,"br"),e._uU(504," \xa0(triggerRect.height / 10) + 'px';"),e.qZA()(),e.TgZ(505,"td")(506,"span"),e._uU(507,' Defines the value of the "border-radius" property for the options list panel. This will make rounded edges for the options dropdown panel.'),e._UZ(508,"br"),e._uU(509," (default \"(triggerRect.height / 10) + 'px'\"). "),e.qZA(),e.TgZ(510,"span"),e._uU(511,"Example:"),e.qZA(),e.TgZ(512,"code")(513,"pre",12),e._uU(514,'<gln-input formControlName="model01a"\n  [glnAutocompleteTrigger]="'),e.TgZ(515,"i"),e._uU(516,"autocomplete01"),e.qZA(),e._uU(517,'">\n</gln-input>\n<'),e.TgZ(518,"strong"),e._uU(519,"gln-autocomplete"),e.qZA(),e._uU(520," #"),e.TgZ(521,"i"),e._uU(522,"autocomplete01"),e.qZA(),e._uU(523,'="glnAutocomplete"\n  '),e.TgZ(524,"i")(525,"strong"),e._uU(526,'class="app-border-radius"'),e.qZA()(),e._uU(527,">\n  ...\n<"),e.TgZ(528,"strong"),e._uU(529,"gln-autocomplete"),e.qZA(),e._uU(530,">"),e.qZA()(),e.TgZ(531,"code")(532,"pre",13),e._uU(533,"gln-autocomplete"),e.TgZ(534,"i")(535,"strong"),e._uU(536,".app-border-radius"),e.qZA()(),e._uU(537," {\n--glnac-border-radius: 7px;\n}"),e.qZA()()()(),e.TgZ(538,"tr")(539,"td")(540,"code"),e._uU(541,"--glnac-elevation:"),e._UZ(542,"br"),e._uU(543," \xa0undefined"),e.qZA()(),e.TgZ(544,"td")(545,"span"),e._uU(546,' To block the display of a shadow, you must specify "--glnac-elevation: none;". '),e.qZA(),e._UZ(547,"br"),e.TgZ(548,"span"),e._uU(549,"Example:"),e.qZA(),e.TgZ(550,"code")(551,"pre",12),e._uU(552,'<gln-input formControlName="model01a"\n  [glnAutocompleteTrigger]="'),e.TgZ(553,"i"),e._uU(554,"autocomplete01"),e.qZA(),e._uU(555,'">\n</gln-input>\n<'),e.TgZ(556,"strong"),e._uU(557,"gln-autocomplete"),e.qZA(),e._uU(558," #"),e.TgZ(559,"i"),e._uU(560,"autocomplete01"),e.qZA(),e._uU(561,'="glnAutocomplete"\n  '),e.TgZ(562,"i")(563,"strong"),e._uU(564,'class="app-no-elevation"'),e.qZA()(),e._uU(565,">\n  ...\n<"),e.TgZ(566,"strong"),e._uU(567,"gln-autocomplete"),e.qZA(),e._uU(568,">"),e.qZA()(),e.TgZ(569,"code")(570,"pre",13),e._uU(571,"gln-autocomplete"),e.TgZ(572,"i")(573,"strong"),e._uU(574,".app-no-elevation"),e.qZA()(),e._uU(575," {\n  --glnac-elevation: none;\n}"),e.qZA()()()(),e.TgZ(576,"tr")(577,"td")(578,"code"),e._uU(579,"--glnac-z-index:"),e._UZ(580,"br"),e._uU(581," \xa01000;"),e.qZA()(),e.TgZ(582,"td")(583,"span"),e._uU(584," Defines the value 'z-index' of the option list dropdown list of options. "),e.qZA()()(),e.TgZ(585,"tr")(586,"td")(587,"code"),e._uU(588,"css: font-size: 1.125em;"),e.qZA()(),e.TgZ(589,"td")(590,"span"),e._uU(591," You can change the font size for the GlnAutocomplete element and that font size will be applied to the available options in the list. "),e._UZ(592,"br"),e._uU(593," More details "),e.TgZ(594,"a",2),e._uU(595," attributes-supported04"),e.qZA(),e._uU(596,". "),e.qZA()()()()()),2&o&&(e.xp6(3),e.Q6J("href",n.urlCmAutocomplete+"#Api",e.LSH),e.xp6(13),e.Q6J("href",n.urlCmAutocomplete+"#api-properties",e.LSH),e.xp6(35),e.Q6J("href",n.urlCmAutocomplete+"#config-interface",e.LSH),e.xp6(240),e.Q6J("href",n.urlCmAutocomplete+"#api-methods",e.LSH),e.xp6(119),e.Q6J("href",n.urlCmAutocomplete+"#api-methods2",e.LSH),e.xp6(29),e.Q6J("href",n.urlCmAutocomplete+"#api-css-variables-optional",e.LSH),e.xp6(155),e.Q6J("href",n.urlCmAutocomplete+"#attributes-supported04",e.LSH))},styles:["app-cm-autocomplete-api{display:block}app-cm-autocomplete-api .app-mn-wd-22ch{width:22ch}\n"],encapsulation:2,changeDetection:0}),t})();function ge(t,l){1&t&&(e.TgZ(0,"div",6),e._UZ(1,"app-cm-autocomplete-basic")(2,"hr",7),e.qZA())}function de(t,l){1&t&&(e.TgZ(0,"div",8),e._UZ(1,"app-cm-autocomplete-attributes")(2,"hr",7),e.qZA())}function Ze(t,l){1&t&&(e.TgZ(0,"div",9),e._UZ(1,"app-cm-autocomplete-asynchrony")(2,"hr",7),e.qZA())}function he(t,l){1&t&&(e.TgZ(0,"div",10),e._UZ(1,"app-cm-autocomplete-feature")(2,"hr",7),e.qZA())}function Ae(t,l){1&t&&(e.TgZ(0,"div",11),e._UZ(1,"app-cm-autocomplete-config")(2,"hr",7),e.qZA())}function _e(t,l){1&t&&(e.TgZ(0,"div",12),e._UZ(1,"app-cm-autocomplete-api")(2,"hr",7),e.qZA())}const T="ComponentsAutocomplete",be=[{path:"",component:(()=>{class t{constructor(o){this.ngZone=o,this.showNum="",this.urlPlSelect="/"+c.g.get("URL_PALETTE")+"/"+c.g.get("URL_PALETTE_SELECT"),this.handlerEventSiteSchemeScroll=()=>{a.ou.closeAll()},console.time(T),f.M.add(r.Lx,this.handlerEventSiteSchemeScroll)}ngOnDestroy(){f.M.remove(r.Lx,this.handlerEventSiteSchemeScroll)}ngAfterViewInit(){Promise.resolve().then(()=>{S.R.scrollByFragmentFromPath()}),this.ngZone.onStable.pipe((0,F.P)()).subscribe(()=>{console.timeEnd(T)})}}return t.\u0275fac=function(o){return new(o||t)(e.Y36(e.R0b))},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-cm-autocomplete"]],decls:8,vars:6,consts:[["id","Basic",4,"ngIf"],["id","Attributes",4,"ngIf"],["id","Asynchrony",4,"ngIf"],["id","Feature",4,"ngIf"],["id","Config",4,"ngIf"],["id","Api",4,"ngIf"],["id","Basic"],["br-tp",""],["id","Attributes"],["id","Asynchrony"],["id","Feature"],["id","Config"],["id","Api"]],template:function(o,n){1&o&&(e.TgZ(0,"h3"),e._uU(1,'Component: "GlnAutocomplete"'),e.qZA(),e.YNc(2,ge,3,0,"div",0),e.YNc(3,de,3,0,"div",1),e.YNc(4,Ze,3,0,"div",2),e.YNc(5,he,3,0,"div",3),e.YNc(6,Ae,3,0,"div",4),e.YNc(7,_e,3,0,"div",5)),2&o&&(e.xp6(2),e.Q6J("ngIf",!n.showNum||"01"===n.showNum),e.xp6(1),e.Q6J("ngIf",!n.showNum||"02"===n.showNum),e.xp6(1),e.Q6J("ngIf",!n.showNum||"03"===n.showNum),e.xp6(1),e.Q6J("ngIf",!n.showNum||"04"===n.showNum),e.xp6(1),e.Q6J("ngIf",!n.showNum||"08"===n.showNum),e.xp6(1),e.Q6J("ngIf",!n.showNum||"09"===n.showNum))},dependencies:[g.O5,J,V,le,re,se,ce],styles:["app-cm-autocomplete{display:block}app-cm-autocomplete .a-items{display:flex;flex-wrap:wrap}app-cm-autocomplete .a-items>:first-child{margin-left:3%}app-cm-autocomplete .a-items>:not(first-child){margin-left:7%}\n"],encapsulation:2,changeDetection:0}),t})()}];let fe=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[b.Bz.forChild(be),b.Bz]}),t})(),Ue=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[g.ez,v,q,x,C,w,y,fe]}),t})()}}]);