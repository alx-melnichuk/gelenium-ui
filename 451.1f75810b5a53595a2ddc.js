"use strict";(self.webpackChunkgelenium_ui_demo=self.webpackChunkgelenium_ui_demo||[]).push([[451],{1451:(Ge,y,g)=>{g.r(y),g.d(y,{LmDirectivesModule:()=>Ne});var c=g(8583),s=g(171),I=g(7181),_=g(7255),S=g(8987);class p extends S.R{}p.add("URL_DIRECTIVES","directives");var l=g(665),h=g(4489),m=g(6581),e=g(3018);let B=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[c.ez,l.u5,l.UX,s.To,h.Nh,m.Ru]]}),t})(),J=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[c.ez]]}),t})();p.add("URL_AUTO_FOCUSE","auto-focuse");const R="/"+p.get("URL_DIRECTIVES")+"/"+p.get("URL_AUTO_FOCUSE");_.T.addItem("Directives","AutoFocuse",{label:"AutoFocuse",siteUrls:[{label:"Basic",url:R,fragment:"Basic"},{label:"Api",url:R,fragment:"Api"}]});let O=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[c.ez,B,J]]}),t})();var T=g(2542);let L=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[c.ez,l.u5,l.UX,T.vV,s.To,h.Nh,m.eB,m.rw]]}),t})(),$=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[c.ez]]}),t})();p.add("URL_REGEX_CHECK","regex-check");const F="/"+p.get("URL_DIRECTIVES")+"/"+p.get("URL_REGEX_CHECK");_.T.addItem("Directives","RegexCheck",{label:"RegexCheck",siteUrls:[{label:"Basic",url:F,fragment:"Basic"},{label:"Api",url:F,fragment:"Api"}]});let P=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[c.ez,L,$]]}),t})(),z=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[c.ez,l.u5,l.UX,T.vV,s.To,h.Nh,m.eB,m.rw]]}),t})(),V=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[c.ez]]}),t})();p.add("URL_REGEX_MATCH","regex-match");const M="/"+p.get("URL_DIRECTIVES")+"/"+p.get("URL_REGEX_MATCH");_.T.addItem("Directives","RegexMatch",{label:"RegexMatch",siteUrls:[{label:"Basic",url:M,fragment:"Basic"},{label:"Api",url:M,fragment:"Api"}]});let H=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[c.ez,z,V]]}),t})(),W=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[c.ez,l.u5,l.UX,T.vV,s.To,h.Nh,m.eB,m.rw]]}),t})(),j=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[c.ez]]}),t})();p.add("URL_REGEX_REMOVE","regex-remove");const k="/"+p.get("URL_DIRECTIVES")+"/"+p.get("URL_REGEX_REMOVE");_.T.addItem("Directives","RegexRemove",{label:"RegexRemove",siteUrls:[{label:"Basic",url:k,fragment:"Basic"},{label:"Api",url:k,fragment:"Api"}]});let K=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[c.ez,W,j]]}),t})(),ee=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[c.ez,O,P,H,K]]}),t})();var b=g(9736),u=g(1226);const w="mode",f="mode1a",q="mode1b";let te=(()=>{class t{constructor(o){this.changeDetectorRef=o,this.labelShowSource=u.sx,this.labelHtml=u.zC,this.labelTs=u.QS,this.labelCss=u.Er,this.mode="A",this.mode1a="surname",this.formGroup01a=new l.cw({surname01a:new l.NI("surname",[]),name01a:new l.NI("name",[]),patronymic01a:new l.NI("patronymic",[])}),this.mode1b="surname",this.formGroup01b=new l.cw({surname01b:new l.NI("surname",[]),name01b:new l.NI("name",[]),patronymic01b:new l.NI("patronymic",[])})}ngOnInit(){this.mode=this.getPrm(location.href,w)||this.mode,this.mode1a=this.getPrm(location.href,f)||this.mode1a,this.mode1b=this.getPrm(location.href,q)||this.mode1b,this.doChangeMode(this.mode)}doChangeMode(o){"A"===o?(this.formGroup01a.enable(),this.formGroup01b.disable(),location.href=this.removePrm(location.href,q),location.href=this.addPrm(location.href,w,this.mode),location.href=this.addPrm(location.href,f,this.mode1a),this.changeDetectorRef.markForCheck()):"B"===o&&(this.formGroup01a.disable(),this.formGroup01b.enable(),location.href=this.removePrm(location.href,f),location.href=this.addPrm(location.href,w,this.mode),location.href=this.addPrm(location.href,q,this.mode1b),this.changeDetectorRef.markForCheck())}doChangeMode1a(o){location.href=this.addPrm(location.href,f,o)}doChangeMode1b(o){location.href=this.addPrm(location.href,q,o)}getPrm(o,n){let i="";if(o&&n){const a=o.split("?"),v=a.length>1?a[1].split("&"):[];for(let d=0;d<v.length;d++){const Z=v[d],A=Z?Z.split("="):[];if(A.length>1&&n===A[0]){i=A[1]||"";break}}}return i}addPrm(o,n,i){let a=o;if(o&&n){let v=!1;const d=o.split("?"),Z=d.length>1?d[1].split("&"):[];if(d.length>1){a=d[0]+"?";let A=0;for(let U=0;U<Z.length;U++){const x=Z[U]?Z[U].split("="):[];if(x.length>1){let G=x[1]||"";x[0]===n&&(G=i,v=!0),a+=(A>0?"&":"")+x[0]+"="+G,A++}}}if(!v){const A=0===Z.length?"?":"";a+=(Z.length>0?"&":A)+n+"="+i}}return a}removePrm(o,n){let i=o;if(o&&n){const a=o.split("?"),v=a.length>1?a[1].split("&"):[];if(a.length>1){i=a[0]+"?";for(let d=0;d<v.length;d++){const Z=v[d]?v[d].split("="):[];if(Z.length>1){const A=Z[1]||"";if(Z[0]===n)continue;i+=(d>0?"&":"")+Z[0]+"="+A}}}}return i}}return t.\u0275fac=function(o){return new(o||t)(e.Y36(e.sBO))},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-auto-focuse-basic"]],inputs:{labelShowSource:"labelShowSource",labelHtml:"labelHtml",labelTs:"labelTs",labelCss:"labelCss"},decls:148,vars:26,consts:[["mr-vr",""],[1,"afb-focuse-owner"],["type","radio","name","mode","value","A",3,"ngModel","ngModelChange","change"],["type","radio","name","mode1a","value","surname",3,"ngModel","ngModelChange","change"],["type","radio","name","mode1a","value","name",3,"ngModel","ngModelChange","change"],["type","radio","name","mode1a","value","patronymic",3,"ngModel","ngModelChange","change"],["novalidate","","autocomplete","off",3,"formGroup"],[1,"app-group"],[1,"app-elem"],["type","text","formControlName","surname01a",3,"glnAutoFocuse"],["type","text","formControlName","name01a",3,"glnAutoFocuse"],["type","text","formControlName","patronymic01a",3,"glnAutoFocuse"],["mr-vr2",""],["animationDuration","0ms"],[3,"label"],["source","html"],["source","ts"],["source","css"],["type","radio","name","mode","value","B",3,"ngModel","ngModelChange","change"],["type","radio","name","mode1b","value","surname",3,"ngModel","ngModelChange","change"],["type","radio","name","mode1b","value","name",3,"ngModel","ngModelChange","change"],["type","radio","name","mode1b","value","patronymic",3,"ngModel","ngModelChange","change"],["glnAutoFocuseOwner","","novalidate","","autocomplete","off",3,"formGroup"],["type","text","formControlName","surname01b",3,"glnAutoFocuse"],["type","text","formControlName","name01b",3,"glnAutoFocuse"],["type","text","formControlName","patronymic01b",3,"glnAutoFocuse"]],template:function(o,n){1&o&&(e.TgZ(0,"section",0),e.TgZ(1,"h3"),e._uU(2,"Basic"),e.qZA(),e.TgZ(3,"h4"),e._uU(4,"Introduction"),e.qZA(),e.TgZ(5,"p"),e._uU(6,' Sometimes a situation arises when, after rendering the page layout, you need to pass focus to a specific input element. To do this, you can use the standard HTML attribute "auto focus". '),e.qZA(),e.TgZ(7,"span"),e._uU(8," For example: "),e.qZA(),e.TgZ(9,"pre"),e._uU(10,'<form novalidation>\n  <label>\n    <input type="text" ([ngModel])="modelLogin" name="login" autofocuse /> Login\n  </label>\n  <label>\n    <input type="password" ([ngModel])="modelPassword" name="password" /> Password\n  </label>\n</form>'),e.qZA(),e.TgZ(11,"p"),e._uU(12," But this is not always done correctly. For example, when the page layout structure complex: many levels of nesting or input elements. Or is there a complex the logic for determining the required element to which the input focus should be given. In such cases, you can use the GlnAutoFocuse directive. "),e.qZA(),e.TgZ(13,"h4"),e._uU(14,"A simple example."),e.qZA(),e.TgZ(15,"p"),e._uU(16,' If the page layout has a relatively simple structure, then GlnAutoFocuse can be applied. This directive transfers input focus at the moment when the current element is already rendered. To do this, use the "OnAfterViewInit" hook and additionally call Promise.resolve(). '),e.qZA(),e.TgZ(17,"span"),e._uU(18," For example: "),e.qZA(),e.TgZ(19,"pre"),e._uU(20,'<form novalidation>\n  <label>\n    <input type="text" ([ngModel])="modelLogin" name="login" glnAutoFocuse /> Login\n  </label>\n  <label>\n    <input type="password" ([ngModel])="modelPassword" name="password" /> Password\n  </label>\n</form>'),e.qZA(),e.TgZ(21,"p"),e._uU(22," You can pass a boolean value to the GlnAutoFocuse directive, which will determine whether the parameter value is enabled or disabled. "),e.qZA(),e.TgZ(23,"span"),e._uU(24," For example: "),e.qZA(),e.TgZ(25,"pre"),e._uU(26,'<form novalidation>\n  <label>\n    <input type="text"\n     ([ngModel])="modelLogin"\n      name="login"\n      [glnAutoFocuse]="!modelLogin" />\n    Login\n  </label>\n  <label>\n    <input type="password"\n     ([ngModel])="modelPassword"\n      name="password"\n      [glnAutoFocuse]="!!modelLogin" />\n    Password\n  </label>\n</form>'),e.qZA(),e.TgZ(27,"p"),e._uU(28,' If the "Login" field is empty, then the input focus will be given to this element. Otherwise, the input focus will be given to the "Password" input element. '),e.qZA(),e.qZA(),e.TgZ(29,"section",0),e.TgZ(30,"label",1),e.TgZ(31,"input",2),e.NdJ("ngModelChange",function(a){return n.mode=a})("change",function(){return n.doChangeMode(n.mode)}),e.qZA(),e._uU(32,' Section "GlnAutoFocuse" is active. '),e.qZA(),e.TgZ(33,"p"),e._uU(34,"Set autofocus on page load on a field:"),e.qZA(),e.TgZ(35,"fieldset"),e.TgZ(36,"label"),e.TgZ(37,"input",3),e.NdJ("ngModelChange",function(a){return n.mode1a=a})("change",function(){return n.doChangeMode1a(n.mode1a)}),e.qZA(),e._uU(38," surname "),e.qZA(),e.TgZ(39,"label"),e.TgZ(40,"input",4),e.NdJ("ngModelChange",function(a){return n.mode1a=a})("change",function(){return n.doChangeMode1a(n.mode1a)}),e.qZA(),e._uU(41," name "),e.qZA(),e.TgZ(42,"label"),e.TgZ(43,"input",5),e.NdJ("ngModelChange",function(a){return n.mode1a=a})("change",function(){return n.doChangeMode1a(n.mode1a)}),e.qZA(),e._uU(44," patronymic "),e.qZA(),e.qZA(),e.qZA(),e.TgZ(45,"form",6),e.TgZ(46,"div",7),e.TgZ(47,"div",8),e.TgZ(48,"div"),e.TgZ(49,"small"),e.TgZ(50,"em"),e._uU(51,"Surname"),e.qZA(),e.qZA(),e.qZA(),e._UZ(52,"input",9),e.qZA(),e.TgZ(53,"div",8),e.TgZ(54,"div"),e.TgZ(55,"small"),e.TgZ(56,"em"),e._uU(57,"Name"),e.qZA(),e.qZA(),e.qZA(),e._UZ(58,"input",10),e.qZA(),e.TgZ(59,"div",8),e.TgZ(60,"div"),e.TgZ(61,"small"),e.TgZ(62,"em"),e._uU(63,"Patronymic"),e.qZA(),e.qZA(),e.qZA(),e._UZ(64,"input",11),e.qZA(),e.qZA(),e.qZA(),e.TgZ(65,"section",12),e.TgZ(66,"mat-accordion"),e.TgZ(67,"mat-expansion-panel"),e.TgZ(68,"mat-expansion-panel-header"),e.TgZ(69,"mat-panel-title"),e._uU(70),e.qZA(),e.qZA(),e.TgZ(71,"mat-tab-group",13),e.TgZ(72,"mat-tab",14),e.TgZ(73,"code"),e.TgZ(74,"pre",15),e._uU(75,'<form [formGroup]="formGroup01a"\n  novalidate\n  autocomplete="off">\n\n  <div class="app-group">\n\n    <div class="app-elem">\n      <div>\n        <small><em>Surname</em></small>\n      </div>\n      <input type="text"\n        formControlName="surname01a"\n        [glnAutoFocuse]="mode1a === \'surname\'" />\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small><em>Name</em></small>\n      </div>\n      <input type="text"\n        formControlName="name01a"\n        [glnAutoFocuse]="mode1a === \'name\'" />\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small><em>Patronymic</em></small>\n      </div>\n      <input type="text"\n        formControlName="patronymic01a"\n        [glnAutoFocuse]="mode1a === \'patronymic\'" />\n    </div>\n\n  </div>\n\n</form>'),e.qZA(),e.qZA(),e.qZA(),e.TgZ(76,"mat-tab",14),e.TgZ(77,"code"),e.TgZ(78,"pre",16),e._uU(79,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormControl, FormGroup\n} from '@angular/forms';\n\nconst CN_MODE1A = 'mode1a';\n\n@Component({\n  selector: 'app-auto-focuse',\n  templateUrl: './auto-focuse.component.html',\n  styleUrls: ['./auto-focuse.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AutoFocuseComponent implements OnInit {\n\n  public mode1a = 'surname';\n\n  public formGroup01a: FormGroup = new FormGroup({\n    surname01a: new FormControl('surname', []),\n    name01a: new FormControl('name', []),\n    patronymic01a: new FormControl('patronymic', []),\n  });\n\n  ngOnInit(): void {\n    this.mode1a = this.getPrm(location.href, CN_MODE1A) || this.mode1a;\n  }\n\n  // ** Public API **\n\n  private getPrm(url: string, prmName: string): string {\n    let result = '';\n    if (!!url && !!prmName) {\n      const buff = url.split('?');\n      const prms = buff.length > 1 ? buff[1].split('&') : [];\n      for (let i = 0; i < prms.length; i++) {\n        const prm = prms[i];\n        const data = prm ? prm.split('=') : [];\n        if (data.length > 1 && prmName === data[0]) {\n          result = data[1] || '';\n          break;\n        }\n      }\n    }\n    return result;\n  }\n}"),e.qZA(),e.qZA(),e.qZA(),e.TgZ(80,"mat-tab",14),e.TgZ(81,"code"),e.TgZ(82,"pre",17),e._uU(83,".app-group {\n  display: flex;\n  flex-wrap: wrap;\n}\n.app-elem {\n  min-width: 26ch;\n  margin: 10px 10px;\n}"),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.TgZ(84,"section",0),e.TgZ(85,"h4"),e._uU(86,"Complex example."),e.qZA(),e.TgZ(87,"p"),e._uU(88," If using GlnAutoFocuse does not give the desired result, then you can additionally use GlnAutoFocuseOwner. This situation can occur when the page layout is so complex that the directive GlnAutoFocuse doesn't work. In other words, the input element (on which GlnAutoFocuse is present) is drawn before than the whole page layout. Here we can add an additional GlnAutoFocuseOwner directive at the root level page layout. And this additional directive will be able to get the moment when the rendering of the page layout is completed. In doing so, it will determine the first child directive GlnAutoFocuse, whose input parameter true and will call its input focus transfer method. "),e.qZA(),e.TgZ(89,"span"),e._uU(90," For example: "),e.qZA(),e.TgZ(91,"pre"),e._uU(92,'  <form glnAutoFocuseOwner novalidation>\n    <div>\n      <div>\n        <div>\n          <label>\n            <input type="text"\n             ([ngModel])="model01"\n              name="model01"\n              [glnAutoFocuse]="!model01" />\n            Name01\n          </label>\n        </div>\n      </div>\n    </div>\n    ...\n    <div>\n      <div>\n        <div>\n          <label>\n            <input type="text"\n             ([ngModel])="model99"\n              name="model99"\n              [glnAutoFocuse]="!model99" />\n            Name99\n          </label>\n        </div>\n      </div>\n    </div>\n  </form>'),e.qZA(),e.qZA(),e.TgZ(93,"section",0),e.TgZ(94,"label",1),e.TgZ(95,"input",18),e.NdJ("ngModelChange",function(a){return n.mode=a})("change",function(){return n.doChangeMode(n.mode)}),e.qZA(),e._uU(96,' Section "GlnAutoFocuseOwner" is active. '),e.qZA(),e.TgZ(97,"p"),e._uU(98,"Set autofocus on page load on a field:"),e.qZA(),e.TgZ(99,"fieldset"),e.TgZ(100,"label"),e.TgZ(101,"input",19),e.NdJ("ngModelChange",function(a){return n.mode1b=a})("change",function(){return n.doChangeMode1b(n.mode1b)}),e.qZA(),e._uU(102," surname "),e.qZA(),e.TgZ(103,"label"),e.TgZ(104,"input",20),e.NdJ("ngModelChange",function(a){return n.mode1b=a})("change",function(){return n.doChangeMode1b(n.mode1b)}),e.qZA(),e._uU(105," name "),e.qZA(),e.TgZ(106,"label"),e.TgZ(107,"input",21),e.NdJ("ngModelChange",function(a){return n.mode1b=a})("change",function(){return n.doChangeMode1b(n.mode1b)}),e.qZA(),e._uU(108," patronymic "),e.qZA(),e.qZA(),e.qZA(),e.TgZ(109,"form",22),e.TgZ(110,"div",7),e.TgZ(111,"div",8),e.TgZ(112,"div"),e.TgZ(113,"small"),e.TgZ(114,"em"),e._uU(115,"Surname"),e.qZA(),e.qZA(),e.qZA(),e._UZ(116,"input",23),e.qZA(),e.TgZ(117,"div",8),e.TgZ(118,"div"),e.TgZ(119,"small"),e.TgZ(120,"em"),e._uU(121,"Name"),e.qZA(),e.qZA(),e.qZA(),e._UZ(122,"input",24),e.qZA(),e.TgZ(123,"div",8),e.TgZ(124,"div"),e.TgZ(125,"small"),e.TgZ(126,"em"),e._uU(127,"Patronymic"),e.qZA(),e.qZA(),e.qZA(),e._UZ(128,"input",25),e.qZA(),e.qZA(),e.qZA(),e.TgZ(129,"section",12),e.TgZ(130,"mat-accordion"),e.TgZ(131,"mat-expansion-panel"),e.TgZ(132,"mat-expansion-panel-header"),e.TgZ(133,"mat-panel-title"),e._uU(134),e.qZA(),e.qZA(),e.TgZ(135,"mat-tab-group",13),e.TgZ(136,"mat-tab",14),e.TgZ(137,"code"),e.TgZ(138,"pre",15),e._uU(139,'<form [formGroup]="formGroup01b"\n  glnAutoFocuseOwner\n  novalidate\n  autocomplete="off">\n\n  <div class="app-group">\n\n    <div class="app-elem">\n      <div>\n        <small><em>Surname</em></small>\n      </div>\n      <input type="text"\n        formControlName="surname01b"\n        [glnAutoFocuse]="mode1b === \'surname\'" />\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small><em>Name</em></small>\n      </div>\n      <input type="text"\n        formControlName="name01b"\n        [glnAutoFocuse]="mode1b === \'name\'" />\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small><em>Patronymic</em></small>\n      </div>\n      <input type="text"\n        formControlName="patronymic01b"\n        [glnAutoFocuse]="mode1b === \'patronymic\'" />\n    </div>\n\n  </div>\n\n</form>'),e.qZA(),e.qZA(),e.qZA(),e.TgZ(140,"mat-tab",14),e.TgZ(141,"code"),e.TgZ(142,"pre",16),e._uU(143,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormControl, FormGroup\n} from '@angular/forms';\n\nconst CN_MODE1B = 'mode1b';\n\n@Component({\n  selector: 'app-auto-focuse',\n  templateUrl: './auto-focuse.component.html',\n  styleUrls: ['./auto-focuse.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AutoFocuseComponent implements OnInit {\n\n  public mode1b = 'surname';\n\n  public formGroup01b: FormGroup = new FormGroup({\n    surname01b: new FormControl('surname', []),\n    name01b: new FormControl('name', []),\n    patronymic01b: new FormControl('patronymic', []),\n  });\n\n  ngOnInit(): void {\n    this.mode1b = this.getPrm(location.href, CN_MODE1B) || this.mode1b;\n  }\n\n  // ** Public API **\n\n  private getPrm(url: string, prmName: string): string {\n    let result = '';\n    if (!!url && !!prmName) {\n      const buff = url.split('?');\n      const prms = buff.length > 1 ? buff[1].split('&') : [];\n      for (let i = 0; i < prms.length; i++) {\n        const prm = prms[i];\n        const data = prm ? prm.split('=') : [];\n        if (data.length > 1 && prmName === data[0]) {\n          result = data[1] || '';\n          break;\n        }\n      }\n    }\n    return result;\n  }\n}"),e.qZA(),e.qZA(),e.qZA(),e.TgZ(144,"mat-tab",14),e.TgZ(145,"code"),e.TgZ(146,"pre",17),e._uU(147,".app-group {\n  display: flex;\n  flex-wrap: wrap;\n}\n.app-elem {\n  min-width: 26ch;\n  margin: 10px 10px;\n}"),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA()),2&o&&(e.xp6(31),e.Q6J("ngModel",n.mode),e.xp6(4),e.uIk("disabled","A"===n.mode?null:""),e.xp6(2),e.Q6J("ngModel",n.mode1a),e.xp6(3),e.Q6J("ngModel",n.mode1a),e.xp6(3),e.Q6J("ngModel",n.mode1a),e.xp6(2),e.Q6J("formGroup",n.formGroup01a),e.xp6(7),e.Q6J("glnAutoFocuse","surname"===n.mode1a),e.xp6(6),e.Q6J("glnAutoFocuse","name"===n.mode1a),e.xp6(6),e.Q6J("glnAutoFocuse","patronymic"===n.mode1a),e.xp6(6),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(4),e.Q6J("label",n.labelTs),e.xp6(4),e.Q6J("label",n.labelCss),e.xp6(15),e.Q6J("ngModel",n.mode),e.xp6(4),e.uIk("disabled","B"===n.mode?null:""),e.xp6(2),e.Q6J("ngModel",n.mode1b),e.xp6(3),e.Q6J("ngModel",n.mode1b),e.xp6(3),e.Q6J("ngModel",n.mode1b),e.xp6(2),e.Q6J("formGroup",n.formGroup01b),e.xp6(7),e.Q6J("glnAutoFocuse","surname"===n.mode1b),e.xp6(6),e.Q6J("glnAutoFocuse","name"===n.mode1b),e.xp6(6),e.Q6J("glnAutoFocuse","patronymic"===n.mode1b),e.xp6(6),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(4),e.Q6J("label",n.labelTs),e.xp6(4),e.Q6J("label",n.labelCss))},directives:[l._,l.Fj,l.JJ,l.On,l._Y,l.JL,l.sg,l.u,m.Zp,s.pp,s.ib,s.yz,s.yK,h.SP,h.uX,m.WF],styles:["app-auto-focuse-basic{display:block}app-auto-focuse-basic .afb-focuse-owner{font-weight:500;font-style:italic}\n"],encapsulation:2,changeDetection:0}),t})(),oe=(()=>{class t{constructor(){}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-auto-focuse-api"]],decls:63,vars:0,consts:[["mr-vr",""],["fw500",""],[1,"app-tab"]],template:function(o,n){1&o&&(e.TgZ(0,"section",0),e.TgZ(1,"h3"),e._uU(2,"API: GlnAutoFocuse"),e.qZA(),e.TgZ(3,"p"),e._uU(4," Selector: "),e.TgZ(5,"span",1),e._uU(6,"[glnAutoFocuse]"),e.qZA(),e.qZA(),e.TgZ(7,"p"),e._uU(8," Exported as: "),e.TgZ(9,"span",1),e._uU(10,"glnAutoFocuse"),e.qZA(),e.qZA(),e.TgZ(11,"p"),e._uU(12," The directive transfers input focus to the current element. "),e.qZA(),e.qZA(),e.TgZ(13,"section",0),e.TgZ(14,"h4"),e._uU(15,"Properties"),e.qZA(),e.qZA(),e.TgZ(16,"table",2),e.TgZ(17,"tr"),e.TgZ(18,"th"),e._uU(19,"Name"),e.qZA(),e.TgZ(20,"th"),e._uU(21,"Description"),e.qZA(),e.qZA(),e.TgZ(22,"tr"),e.TgZ(23,"td"),e.TgZ(24,"code"),e._uU(25,"@Input()"),e.qZA(),e.TgZ(26,"code"),e._uU(27,"glnAutoFocuse: string | boolean | null = null;"),e.qZA(),e.qZA(),e.TgZ(28,"td"),e.TgZ(29,"span"),e._uU(30,"Can take the following values:"),e.qZA(),e.TgZ(31,"ul"),e.TgZ(32,"li"),e.TgZ(33,"code"),e._uU(34,"empty string (default);"),e.qZA(),e.qZA(),e.TgZ(35,"li"),e.TgZ(36,"code"),e._uU(37,"true/false (boolean type);"),e.qZA(),e.qZA(),e.TgZ(38,"li"),e.TgZ(39,"code"),e._uU(40,'"true"/"false" (string type);'),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.TgZ(41,"section",0),e.TgZ(42,"h4"),e._uU(43,"Additionally."),e.qZA(),e.TgZ(44,"p"),e._uU(45,' When the input parameter is true or "empty string", the current element is given the "auto-focuse" attribute. This allows you to check the correct operation of this directive. '),e.qZA(),e.qZA(),e.TgZ(46,"section",0),e.TgZ(47,"h3"),e._uU(48,"API: GlnAutoFocuseOwner"),e.qZA(),e.TgZ(49,"p"),e._uU(50," Selector: "),e.TgZ(51,"span",1),e._uU(52,"[glnAutoFocuseOwner]"),e.qZA(),e.qZA(),e.TgZ(53,"p"),e._uU(54," Exported as: "),e.TgZ(55,"span",1),e._uU(56,"glnAutoFocuseOwner"),e.qZA(),e.qZA(),e.TgZ(57,"p"),e._uU(58," The directive allows you to transfer the input focus to the specified element with a complex page structure. "),e.qZA(),e.TgZ(59,"p"),e._uU(60,' The directive defines the first nested child GlnAutoFocuse directive with a positive input parameter value (or "empty string"). And after that, it calls the method of the child directive GlnAutoFocuse to transfer the input focus. '),e.qZA(),e.TgZ(61,"p"),e._uU(62,' This directive is placed as close as possible to the root of the current page. This is necessary to get the "OnAfterViewInit" hook at the moment when all child elements have already been rendered. In other words, it is required to determine the moment when the current page has completed its rendering. '),e.qZA(),e.qZA())},styles:["app-auto-focuse-api{display:block}\n"],encapsulation:2,changeDetection:0}),t})();function re(t,r){1&t&&(e.TgZ(0,"div",2),e._UZ(1,"app-auto-focuse-basic"),e._UZ(2,"hr",3),e.qZA())}function le(t,r){1&t&&(e.TgZ(0,"div",4),e._UZ(1,"app-auto-focuse-api"),e._UZ(2,"hr",3),e.qZA())}let ae=(()=>{class t{constructor(){this.showNum=""}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-auto-focuse"]],decls:6,vars:2,consts:[["id","Basic",4,"ngIf"],["id","Api",4,"ngIf"],["id","Basic"],["br-tp",""],["id","Api"]],template:function(o,n){1&o&&(e.TgZ(0,"h3"),e._uU(1,'Directives: "GlnAutoFocuse"'),e.qZA(),e.YNc(2,re,3,0,"div",0),e.YNc(3,le,3,0,"div",1),e._UZ(4,"br"),e._UZ(5,"br")),2&o&&(e.xp6(2),e.Q6J("ngIf",!n.showNum||"01"===n.showNum),e.xp6(1),e.Q6J("ngIf",!n.showNum||"02"===n.showNum))},directives:[c.O5,te,oe],styles:["app-auto-focuse{display:block}\n"],encapsulation:2,changeDetection:0}),t})();var C=g(4577);const ie=function(){return{standalone:!0}},ue=function(){return{checkLetters:"^(?=.*[a-zA-Z])[\\w\\W]{1,}$",checkDigits:"^(?=.*\\d)[\\w\\W]{1,}$",checkSymbols:"^(?=.*[!@#$%^&*])[\\w\\W]{1,}$"}};let se=(()=>{class t{constructor(){this.labelShowSource=u.sx,this.labelOutlined=u.SR,this.labelUnderline=u.kP,this.labelStandard=u.Qb,this.labelHtml=u.zC,this.labelTs=u.QS,this.labelCss=u.Er,this.demo01="1",this.control01={input01a:new l.NI("",[]),input01b:new l.NI("",[]),input01c:new l.NI("01/0",[]),input01d:new l.NI("01/0",[]),input01e:new l.NI("(99",[])},this.formGroup01=new l.cw(this.control01),this.exterior01="outlined"}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-regex-check-basic"]],inputs:{labelShowSource:"labelShowSource",labelOutlined:"labelOutlined",labelUnderline:"labelUnderline",labelStandard:"labelStandard",labelHtml:"labelHtml",labelTs:"labelTs",labelCss:"labelCss"},decls:260,vars:32,consts:[["mr-vr",""],["href","https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern","target","_blank"],[1,"app-group"],[1,"app-elem"],["type","text","name","demo01","pattern","[A-Za-z]{1,3}",1,"rcb-input",3,"ngModel","ngModelOptions","ngModelChange"],["ctrlDemo01","ngModel"],[3,"ngModel","ngModelChange"],["value","outlined"],["value","underline"],["value","standard"],["novalidate","","autocomplete","off",3,"formGroup"],["formControlName","input01a","wdFull","","pattern","(?=.*[a-zA-Z])[a-zA-Z\\d]{1,}","glnRegexCheck","(?=.*\\d)[a-zA-Z\\d]{1,}",3,"label","helperText","exterior"],["formControlName","input01b","wdFull","",3,"label","glnRegexCheck","helperText","exterior"],["formControlName","input01c","wdFull","","glnRegexCheck","/^[0-9]{2}[\\/][0-9]{2}[\\/][0-9]{4}$/i",3,"label","helperText","exterior"],["formControlName","input01d","wdFull","","glnRegexCheck","/^([0-9]{0,2}|[0-9]{2}[\\/]([0-9]{0,2}|[0-9]{2}[\\/][0-9]{0,4}))$/i",3,"label","helperText","exterior"],["formControlName","input01e","wdFull","","glnRegexCheck","/^([(][0-9]{0,3}|[(][0-9]{3}[)]([0-9]{0,3}|[0-9]{3}[-][0-9]{0,4}))$/i",3,"label","helperText","exterior"],["animationDuration","0ms"],[3,"label"],["source","html"],["source","ts"],["source","css"]],template:function(o,n){if(1&o&&(e.TgZ(0,"section",0),e.TgZ(1,"h3"),e._uU(2,"Basic"),e.qZA(),e.TgZ(3,"p"),e._uU(4," The GlnRegexCheck directive implements checking the value of an element against a regular expression. Sometimes you want to restrict user input to some kind of business logic. To do this, you can use the "),e.TgZ(5,"a",1),e._uU(6,'"pattern"'),e.qZA(),e._uU(7," attribute of the native input element. "),e.qZA(),e.TgZ(8,"p"),e._uU(9," For example, an input field can contain up to three letters. "),e.qZA(),e.TgZ(10,"pre"),e._uU(11,'    <style>\n      input.rcb-input.ng-invalid {\n        border: red solid 2px;\n        outline-color: red;\n      }\n    </style>\n    <input class="rcb-input"\n      type="text"\n      name="demo01"\n      [(ngModel)]="demo01"\n      [ngModelOptions]="{standalone: true}"\n      pattern="[A-Za-z]{1,3}"\n      #ctrlDemo01="ngModel" />\n    <code>\n      <small>\n        <pre>errors='),e.TgZ(12,"b"),e._uU(13,"{"),e.qZA(),e._uU(14,"{ ctrlDemo01.errors | json }}</pre>\n      </small>\n    </code>"),e.qZA(),e.qZA(),e.TgZ(15,"div",2),e.TgZ(16,"div",3),e.TgZ(17,"div"),e.TgZ(18,"small"),e.TgZ(19,"em"),e._uU(20,'pattern="[A-Za-z]{1,3}".'),e.qZA(),e.qZA(),e.qZA(),e.TgZ(21,"input",4,5),e.NdJ("ngModelChange",function(a){return n.demo01=a}),e.qZA(),e.TgZ(23,"code"),e.TgZ(24,"small"),e.TgZ(25,"pre"),e._uU(26),e.ALo(27,"json"),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.TgZ(28,"section",0),e.TgZ(29,"h4"),e._uU(30,'2. Use a "pattern" with RegExp and GlnRegexCheck.'),e.qZA(),e.TgZ(31,"p"),e._uU(32,' But there are situations when you need to apply several restrictions and display a separate error for each. In such cases, you can use the "GlnRegexCheck" directive. '),e.qZA(),e.TgZ(33,"p"),e._uU(34,' Let\'s consider the case that only letters and numbers can be valid, and otherwise - an error. To fulfill the condition contains letters, apply the "pattern" attribute. And to fulfill the condition contains digits, apply the "GlnRegexCheck" directive. '),e.qZA(),e.TgZ(35,"p"),e._uU(36," Let's prepare a regular expression to check for the presence of letters. Since we can have digits in addition to letters, this must be taken into account in the regular expression. Our expression has two parts: "),e.qZA(),e.TgZ(37,"ul"),e.TgZ(38,"li"),e._uU(39,"expression "),e.TgZ(40,"code"),e._uU(41,"(?=.*[a-zA-Z])"),e.qZA(),e._uU(42," - checks for letters;"),e.qZA(),e.TgZ(43,"li"),e._uU(44,"expression "),e.TgZ(45,"code"),e._uU(46,"[a-zA-Z\\d]{1,}"),e.qZA(),e._uU(47," - contains a set of valid characters (at least one); "),e.qZA(),e.qZA(),e.TgZ(48,"p"),e._uU(49,"As a result, we get:"),e.qZA(),e.TgZ(50,"ul"),e.TgZ(51,"li"),e._uU(52,"expression "),e.TgZ(53,"code"),e._uU(54,"^(?=.*[a-zA-Z])[a-zA-Z\\d]{1,}$"),e.qZA(),e._uU(55," - condition check contains letters;"),e.qZA(),e.TgZ(56,"li"),e._uU(57,"expression "),e.TgZ(58,"code"),e._uU(59,"^(?=.*[\\d])[a-zA-Z\\d]{1,}$"),e.qZA(),e._uU(60," - condition check contains digits;"),e.qZA(),e.qZA(),e.TgZ(61,"p"),e._uU(62,' The "GlnRegexCheck" directive supports the following forms for describing regular expressions: '),e.qZA(),e.TgZ(63,"ul"),e.TgZ(64,"li"),e.TgZ(65,"code"),e._uU(66,'glnRegexCheck="^-?(\\d+)$"'),e.qZA(),e.qZA(),e.TgZ(67,"li"),e.TgZ(68,"code"),e._uU(69,"[glnRegexCheck]=\"'^-?(\\\\d+)$'\""),e.qZA(),e.qZA(),e.TgZ(70,"li"),e.TgZ(71,"code"),e._uU(72,'glnRegexCheck="/^-?(\\d+)$/i"'),e.qZA(),e.qZA(),e.TgZ(73,"li"),e.TgZ(74,"code"),e._uU(75,"[glnRegexCheck]=\"'/^-?(\\\\d+)$/i'\""),e.qZA(),e.qZA(),e.qZA(),e.TgZ(76,"p"),e._uU(77,' If the value does not match the regular expression, then the "regexCheck" property is displayed in the error object (this is the default value). '),e.qZA(),e.TgZ(78,"p"),e._uU(79,' Let\'s say we need to apply three or more constraints on the value of an input field. The methods described earlier will not work here. But we can apply the "GlnRegexCheck" directive with the configuration. This directive as an input parameter can accept an object with fields: key, value. The key is the name of the property in the error object. The value is a regular expression string. '),e.qZA(),e.qZA(),e.TgZ(80,"section",0),e.TgZ(81,"h4"),e._uU(82,"3. GlnRegexCheck configuration"),e.qZA(),e.TgZ(83,"p"),e._uU(84," Suppose we need to define a new secret key (or password). The field value can contain various characters. The following conditions must be met: "),e.qZA(),e.TgZ(85,"ul"),e.TgZ(86,"li"),e._uU(87,"letters must be present"),e.qZA(),e.TgZ(88,"li"),e._uU(89,"digits must be present:"),e.qZA(),e.TgZ(90,"li"),e._uU(91,'symbols must be present: "!@#$%^&*"'),e.qZA(),e.qZA(),e.TgZ(92,"p"),e._uU(93," Let's prepare a regular expression to check for the presence of letters. Our expression has two parts: "),e.qZA(),e.TgZ(94,"ul"),e.TgZ(95,"li"),e._uU(96,"expression "),e.TgZ(97,"code"),e._uU(98,"(?=.*[a-zA-Z])"),e.qZA(),e._uU(99," - checks for letters;"),e.qZA(),e.TgZ(100,"li"),e._uU(101,"expression "),e.TgZ(102,"code"),e._uU(103,"[\\w\\W]{1,}"),e.qZA(),e._uU(104," - contains all possible characters (at least one);"),e.qZA(),e.qZA(),e.TgZ(105,"p"),e.TgZ(106,"code"),e._uU(107," \\w - Matches any letter, digit or underscore."),e._UZ(108,"br"),e._uU(109," Equivalent to [a-zA-Z0-9_]."),e._UZ(110,"br"),e._uU(111," \\W - Matches anything other than a letter, digit or underscore."),e._UZ(112,"br"),e._uU(113," Equivalent to [^a-zA-Z0-9_] "),e.qZA(),e.qZA(),e.TgZ(114,"p"),e._uU(115,"As a result, we get:"),e.qZA(),e.TgZ(116,"ul"),e.TgZ(117,"li"),e._uU(118,"expression "),e.TgZ(119,"code"),e._uU(120,"^(?=.*[a-zA-Z])[\\w\\W]{1,}$"),e.qZA(),e._uU(121," - condition check contains letters;"),e.qZA(),e.TgZ(122,"li"),e._uU(123,"expression "),e.TgZ(124,"code"),e._uU(125,"^(?=.*[\\d])[\\w\\W]{1,}$"),e.qZA(),e._uU(126," - condition check contains digits;"),e.qZA(),e.TgZ(127,"li"),e._uU(128," expression "),e.TgZ(129,"code"),e._uU(130,"^(?=.*[!@#$%^&*])[\\w\\W]{1,}$"),e.qZA(),e._uU(131,' - condition check contains symbols: "!@#$%^&*"; '),e.qZA(),e.qZA(),e.TgZ(132,"p"),e._uU(133," Thus, the application of the directive is as follows: "),e.qZA(),e.TgZ(134,"pre"),e._uU(135,"    [glnRegexCheck]=\"{\n      'checkLetters': '^(?=.*[a-zA-Z])[\\\\w\\\\W]{1,}$',\n      'checkDigits': '^(?=.*\\\\d)[\\\\w\\\\W]{1,}$',\n      'checkSymbols': '^(?=.*[!@#$%^&*])[\\\\w\\\\W]{1,}$'\n    }\"\n  "),e.qZA(),e.qZA(),e.TgZ(136,"section",0),e.TgZ(137,"h4"),e._uU(138,'4. "GlnRegexCheck" and date input.'),e.qZA(),e.TgZ(139,"p"),e._uU(140," Let's say we need to implement an initial check for entering a date value. Let's prepare a regular expression:"),e._UZ(141,"br"),e.TgZ(142,"code"),e._uU(143,"^[0-9]{2}[\\/][0-9]{2}[\\/][0-9]{4}$"),e.qZA(),e._UZ(144,"br"),e._uU(145," On testing, we can see that an error is displayed when entering a date value. And only when you enter the last digit, the error message disappears. This behavior is not entirely user-friendly. And we understand that a regular expression should be able to enter the value gradually. "),e.qZA(),e.TgZ(146,"p"),e._uU(147," Let's take another regular expression:"),e._UZ(148,"br"),e.TgZ(149,"code"),e._uU(150," ^([0-9]{0,2}|[0-9]{2}[\\/]([0-9]{0,2}|[0-9]{2}[\\/][0-9]{0,4}))$ "),e.qZA(),e._UZ(151,"br"),e._uU(152," Let's consider this expression in more detail. An expression has two main parts."),e._UZ(153,"br"),e._uU(154," First part "),e.TgZ(155,"code"),e._uU(156,"[0-9]{0,2}"),e.qZA(),e._uU(157,"."),e._UZ(158,"br"),e._uU(159," This expression allows you to enter the first number between 0 and 2 digits."),e._UZ(160,"br"),e._uU(161," Second part "),e.TgZ(162,"code"),e._uU(163," [0-9]{2}[\\/]([0-9]{0,2}|[0-9]{2}[\\/][0-9]{0,4}) "),e.qZA(),e._uU(164,"."),e._UZ(165,"br"),e._uU(166," The first snippet "),e.TgZ(167,"code"),e._uU(168,"[0-9]{2}[\\/]"),e.qZA(),e._uU(169," assumes that the first two-digit number and the forward slash have already been entered."),e._UZ(170,"br"),e._uU(171," Next in parentheses is the second snippet "),e.TgZ(172,"code"),e._uU(173,"[0-9]{0,2}|[0-9]{2}[\\/][0-9]{0,4}"),e.qZA(),e._uU(174,"."),e._UZ(175,"br"),e._uU(176," In this snippet, we again see two component parts. The first part "),e.TgZ(177,"code"),e._uU(178,"[0-9]{0,2}"),e.qZA(),e._uU(179," allows you to enter the second number between 0 and 2 digits. "),e._UZ(180,"br"),e._uU(181," And when this number is entered successfully, the second component becomes active "),e.TgZ(182,"code"),e._uU(183,"[0-9]{2}[\\/][0-9]{0,4}"),e.qZA(),e._uU(184,". This allows the next number from 0 to 4 digits to be entered."),e._UZ(185,"br"),e._uU(186," Therefore, the user can enter the date value gradually and without an error message. "),e.qZA(),e.qZA(),e.TgZ(187,"section",0),e.TgZ(188,"h4"),e._uU(189,"5. Entering a phone number."),e.qZA(),e.TgZ(190,"p"),e._uU(191,' Let\'s say we need to implement validation of entering a phone number value in the format "(999)999-9999". The regular expression that checks this format is:'),e._UZ(192,"br"),e.TgZ(193,"code"),e._uU(194,"^[(][0-9]{3}[)][0-9]{3}[-][0-9]{4}$"),e.qZA(),e._UZ(195,"br"),e._uU(196," And here is a regular expression that allows you to enter this format sequentially:"),e._UZ(197,"br"),e.TgZ(198,"code"),e._uU(199,"^([(][0-9]{0,3}|[(][0-9]{3}[)]([0-9]{0,3}|[0-9]{3}[-][0-9]{0,4}))$"),e.qZA(),e._UZ(200,"br"),e.qZA(),e._UZ(201,"p"),e.qZA(),e.TgZ(202,"section",0),e.TgZ(203,"span"),e._uU(204,"exterior: "),e.qZA(),e.TgZ(205,"mat-button-toggle-group",6),e.NdJ("ngModelChange",function(a){return n.exterior01=a}),e.TgZ(206,"mat-button-toggle",7),e._uU(207),e.qZA(),e.TgZ(208,"mat-button-toggle",8),e._uU(209),e.qZA(),e.TgZ(210,"mat-button-toggle",9),e._uU(211),e.qZA(),e.qZA(),e.qZA(),e.TgZ(212,"form",10),e.TgZ(213,"div",2),e.TgZ(214,"div",3),e.TgZ(215,"div"),e.TgZ(216,"small"),e.TgZ(217,"em"),e._uU(218,'2. pattern="[a-zA-Z]", glnRegexCheck="\\d".'),e.qZA(),e.qZA(),e.qZA(),e._UZ(219,"gln-input",11),e.qZA(),e.TgZ(220,"div",3),e.TgZ(221,"div"),e.TgZ(222,"small"),e.TgZ(223,"em"),e._uU(224,"3. Check: [a-zA-Z], [\\d], [!@#$%^&*]."),e.qZA(),e.qZA(),e.qZA(),e._UZ(225,"gln-input",12),e.qZA(),e.TgZ(226,"div",3),e.TgZ(227,"div"),e.TgZ(228,"small"),e.TgZ(229,"em"),e._uU(230,"4.a. Entering a date value."),e.qZA(),e.qZA(),e.qZA(),e._UZ(231,"gln-input",13),e.qZA(),e.TgZ(232,"div",3),e.TgZ(233,"div"),e.TgZ(234,"small"),e.TgZ(235,"em"),e._uU(236,"4.b. Entering a date value."),e.qZA(),e.qZA(),e.qZA(),e._UZ(237,"gln-input",14),e.qZA(),e.TgZ(238,"div",3),e.TgZ(239,"div"),e.TgZ(240,"small"),e.TgZ(241,"em"),e._uU(242,"5. Entering a phone number."),e.qZA(),e.qZA(),e.qZA(),e._UZ(243,"gln-input",15),e.qZA(),e.qZA(),e.qZA(),e.TgZ(244,"section",0),e.TgZ(245,"mat-accordion"),e.TgZ(246,"mat-expansion-panel"),e.TgZ(247,"mat-expansion-panel-header"),e.TgZ(248,"mat-panel-title"),e._uU(249),e.qZA(),e.qZA(),e.TgZ(250,"mat-tab-group",16),e.TgZ(251,"mat-tab",17),e.TgZ(252,"pre",18),e._uU(253,"<form [formGroup]=\"formGroup01\"\n  novalidate\n  autocomplete=\"off\">\n\n  <div class=\"app-group\">\n\n    <div class=\"app-elem\">\n      <div>\n        <small>\n          <em>2. pattern=\"[a-zA-Z]\", glnRegexCheck=\"\\d\".</em>\n        </small>\n      </div>\n      <gln-input formControlName=\"input01a\"\n        wdFull\n        [label]=\"!control01.input01a.value\n          ?'Enter a digit and symbol':'A digit and symbol'\"\n        pattern=\"(?=.*[a-zA-Z])[a-zA-Z\\d]{1,}\"\n        glnRegexCheck=\"(?=.*\\d)[a-zA-Z\\d]{1,}\"\n        [helperText]=\"\n        !control01.input01a.errors\n        ?(!control01.input01a.value\n          ? 'Enter value.':'The value is correct.'\n         )\n        :(control01.input01a.errors?.pattern\n          ? 'The field must have characters.'\n          : (control01.input01a.errors?.regexCheck\n             ?'The field must have digits.'\n             :'The value is not correct.')\n         )\"\n        [exterior]=\"exterior01\">\n      </gln-input>\n    </div>\n\n    <div class=\"app-elem\">\n      <div>\n        <small>\n          <em>3. Check: [a-zA-Z], [\\d], [!@#$%^&*].</em>\n        </small>\n      </div>\n      <gln-input formControlName=\"input01b\"\n        wdFull\n        [label]=\"!control01.input01b.value\n          ?'Enter parameter':'Parameter'\"\n        [glnRegexCheck]=\"{\n          'checkLetters': '^(?=.*[a-zA-Z])[\\\\w\\\\W]{1,}$',\n          'checkDigits': '^(?=.*\\\\d)[\\\\w\\\\W]{1,}$',\n          'checkSymbols': '^(?=.*[!@#$%^&*])[\\\\w\\\\W]{1,}$'\n        }\"\n        [helperText]=\"\n        !control01.input01b.errors\n        ?(!control01.input01b.value\n          ? 'Enter the parameter.':'The value is correct.'\n         )\n        :(control01.input01b.errors.checkLetters\n          ?'Letters must be present'\n          :(control01.input01b.errors.checkDigits\n             ?'Digits must be present.'\n             :(control01.input01b.errors.checkSymbols\n               ?'Must be characters from the set [!@#$%^&*].'\n               :'The value is not correct.'\n              )\n            )\n         )\"\n        [exterior]=\"exterior01\">\n      </gln-input>\n    </div>\n\n    <div class=\"app-elem\">\n      <div>\n        <small>\n          <em>4.a. Entering a date value.</em>\n        </small>\n      </div>\n      <gln-input formControlName=\"input01c\"\n        wdFull\n        [label]=\"!control01.input01c.value\n          ?'Enter the date':'Date value.'\"\n        glnRegexCheck=\"/^[0-9]{2}[\\/][0-9]{2}[\\/][0-9]{4}$/i\"\n        [helperText]=\"\n        !control01.input01c.errors\n        ?(!control01.input01c.value\n          ? 'Enter a date value.':'The date value is correct.'\n         )\n        :(control01.input01c.errors?.regexCheck\n          ? 'The value should be \\'01/01/2021\\'.'\n          : 'The value is not correct.'\n         )\"\n        [exterior]=\"exterior01\">\n      </gln-input>\n    </div>\n\n    <div class=\"app-elem\">\n      <div>\n        <small>\n          <em>4.b. Entering a date value.</em>\n        </small>\n      </div>\n      <gln-input formControlName=\"input01d\"\n        wdFull\n        [label]=\"!control01.input01d.value\n          ?'Enter the date':'Date value.'\"\n        glnRegexCheck=\"/^([0-9]{0,2}|[0-9]{2}[\\/]([0-9]{0,2}|[0-9]{2}[\\/][0-9]{0,4}))$/i\"\n        [helperText]=\"\n        !control01.input01d.errors\n        ?(!control01.input01d.value\n          ? 'Enter a date value.':'The date value is correct.'\n         )\n        :(control01.input01d.errors?.regexCheck\n          ? 'The value should be \\'01/01/2021\\'.'\n          : 'The value is not correct.'\n         )\"\n        [exterior]=\"exterior01\">\n      </gln-input>\n    </div>\n\n    <div class=\"app-elem\">\n      <div>\n        <small>\n          <em>5. Entering a phone number.</em>\n        </small>\n      </div>\n      <gln-input formControlName=\"input01e\"\n        wdFull\n        [label]=\"!control01.input01e.value\n          ?'Enter a phone number.':'Phone number.'\"\n        glnRegexCheck=\"/^([(][0-9]{0,3}|[(][0-9]{3}[)]([0-9]{0,3}|[0-9]{3}[-][0-9]{0,4}))$/i\"\n        [helperText]=\"\n        !control01.input01e.errors\n        ?(!control01.input01e.value\n          ? 'Enter a phone number.':'The phone number is correct.'\n         )\n        :(control01.input01e.errors?.regexCheck\n          ? 'The phone number should be \\'(999)999-9999\\'.'\n          : 'The phone number is not correct.'\n         )\"\n        [exterior]=\"exterior01\">\n      </gln-input>\n    </div>\n\n  </div>\n\n</form>"),e.qZA(),e.qZA(),e.TgZ(254,"mat-tab",17),e.TgZ(255,"pre",19),e._uU(256,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormControl, FormGroup, Validators\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-regex',\n  templateUrl: './regex.component.html',\n  styleUrls: ['./regex.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class RegexComponent {\n  public demo01 = '1';\n  public control01 = {\n    input01a: new FormControl('', []),\n    input01b: new FormControl('', []),\n    input01c: new FormControl('01/0', []),\n    input01d: new FormControl('01/0', []),\n    input01e: new FormControl('(99', []),\n  };\n  public formGroup01: FormGroup = new FormGroup(this.control01);\n  public exterior01 = 'outlined';\n}"),e.qZA(),e.qZA(),e.TgZ(257,"mat-tab",17),e.TgZ(258,"pre",20),e._uU(259,".app-group {\n  display: flex;\n  flex-wrap: wrap;\n}\n.app-elem {\n  min-width: 26ch;\n  margin: 10px 10px;\n}"),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA()),2&o){const i=e.MAs(22);e.xp6(21),e.Q6J("ngModel",n.demo01)("ngModelOptions",e.DdM(30,ie)),e.xp6(5),e.hij("errors=",e.lcZ(27,28,i.errors),""),e.xp6(179),e.Q6J("ngModel",n.exterior01),e.xp6(2),e.Oqu(n.labelOutlined),e.xp6(2),e.Oqu(n.labelUnderline),e.xp6(2),e.Oqu(n.labelStandard),e.xp6(1),e.Q6J("formGroup",n.formGroup01),e.xp6(7),e.Q6J("label",n.control01.input01a.value?"A digit and symbol":"Enter a digit and symbol")("helperText",n.control01.input01a.errors?null!=n.control01.input01a.errors&&n.control01.input01a.errors.pattern?"The field must have characters.":null!=n.control01.input01a.errors&&n.control01.input01a.errors.regexCheck?"The field must have digits.":"The value is not correct.":n.control01.input01a.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.control01.input01b.value?"Parameter":"Enter parameter")("glnRegexCheck",e.DdM(31,ue))("helperText",n.control01.input01b.errors?n.control01.input01b.errors.checkLetters?"Letters must be present":n.control01.input01b.errors.checkDigits?"Digits must be present.":n.control01.input01b.errors.checkSymbols?"Must be characters from the set [!@#$%^&*].":"The value is not correct.":n.control01.input01b.value?"The value is correct.":"Enter the parameter.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.control01.input01c.value?"Date value.":"Enter the date")("helperText",n.control01.input01c.errors?null!=n.control01.input01c.errors&&n.control01.input01c.errors.regexCheck?"The value should be '01/01/2021'.":"The value is not correct.":n.control01.input01c.value?"The date value is correct.":"Enter a date value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.control01.input01d.value?"Date value.":"Enter the date")("helperText",n.control01.input01d.errors?null!=n.control01.input01d.errors&&n.control01.input01d.errors.regexCheck?"The value should be '01/01/2021'.":"The value is not correct.":n.control01.input01d.value?"The date value is correct.":"Enter a date value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.control01.input01e.value?"Phone number.":"Enter a phone number.")("helperText",n.control01.input01e.errors?null!=n.control01.input01e.errors&&n.control01.input01e.errors.regexCheck?"The phone number should be '(999)999-9999'.":"The phone number is not correct.":n.control01.input01e.value?"The phone number is correct.":"Enter a phone number.")("exterior",n.exterior01),e.xp6(6),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(3),e.Q6J("label",n.labelTs),e.xp6(3),e.Q6J("label",n.labelCss)}},directives:[l.Fj,l.c5,l.JJ,l.On,T.A9,T.Yi,l._Y,l.JL,l.sg,m.j7,l.u,m.f7,s.pp,s.ib,s.yz,s.yK,h.SP,h.uX],pipes:[c.Ts],styles:["app-regex-check-basic{display:block}\n","\n  input.rcb-input.ng-invalid {\n    border: red solid 2px;\n    outline-color: red;\n  }\n"],encapsulation:2,changeDetection:0}),t})(),ce=(()=>{class t{constructor(){}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-regex-check-api"]],decls:75,vars:0,consts:[["mr-vr",""],["fw500",""],[1,"app-tab"]],template:function(o,n){1&o&&(e.TgZ(0,"section",0),e.TgZ(1,"h3"),e._uU(2,"API: GlnRegexCheck"),e.qZA(),e.TgZ(3,"p"),e._uU(4," Selector: "),e.TgZ(5,"span",1),e._uU(6,"[glnRegexCheck]"),e.qZA(),e.qZA(),e.TgZ(7,"p"),e._uU(8," Exported as: "),e.TgZ(9,"span",1),e._uU(10,"glnRegexCheck"),e.qZA(),e.qZA(),e.TgZ(11,"p"),e._uU(12,' The directive checks the value of the input against the specified regular expression. If a mismatch is detected, then an error occurs with the "regexCheck" property. '),e.qZA(),e.qZA(),e.TgZ(13,"section",0),e.TgZ(14,"h4"),e._uU(15,"Properties"),e.qZA(),e.qZA(),e.TgZ(16,"table",2),e.TgZ(17,"tr"),e.TgZ(18,"th"),e._uU(19,"Name"),e.qZA(),e.TgZ(20,"th"),e._uU(21,"Description"),e.qZA(),e.qZA(),e.TgZ(22,"tr"),e.TgZ(23,"td"),e.TgZ(24,"code"),e._uU(25,"@Input()"),e.qZA(),e.TgZ(26,"code"),e._uU(27,"glnRegexCheck: string | GlnRegexCheck | null;"),e.qZA(),e.qZA(),e.TgZ(28,"td"),e.TgZ(29,"span"),e._uU(30,"A regular expression value or configuration object. "),e._UZ(31,"br"),e._uU(32," Examples of input value as regular expression: "),e.qZA(),e.TgZ(33,"ul"),e.TgZ(34,"li"),e.TgZ(35,"code"),e._uU(36,'glnRegexCheck ="^-?(\\d+)$"'),e.qZA(),e.qZA(),e.TgZ(37,"li"),e.TgZ(38,"code"),e._uU(39,"[glnRegexCheck]=\"'^-?(\\\\d+)$'\""),e.qZA(),e.qZA(),e.TgZ(40,"li"),e.TgZ(41,"code"),e._uU(42,'glnRegexCheck ="/^-?(\\d+)$/i"'),e.qZA(),e.qZA(),e.TgZ(43,"li"),e.TgZ(44,"code"),e._uU(45,"[glnRegexCheck]=\"'/^-?(\\\\d+)$/i'\""),e.qZA(),e.qZA(),e.qZA(),e.TgZ(46,"span"),e._uU(47," An example of an input value as a configuration:"),e._UZ(48,"br"),e.TgZ(49,"code"),e._uU(50,' [glnRegexCheck]="{'),e._UZ(51,"br"),e._uU(52," 'Letters': '^(?=.*[a-zA-Z])[\\\\w\\\\W]{1,}$',"),e._UZ(53,"br"),e._uU(54," 'Digits': '^(?=.*\\\\d)[\\\\w\\\\W]{1,}$',"),e._UZ(55,"br"),e._uU(56," 'Symbols': '^(?=.*[!@#$%^&*])[\\\\w\\\\W]{1,}$'"),e._UZ(57,"br"),e._uU(58,' }" '),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.TgZ(59,"section",0),e.TgZ(60,"h4"),e._uU(61,"Additionally."),e.qZA(),e.TgZ(62,"p"),e._uU(63,' At the moment of creation, the "GlnRegexCheck" directive adds its validation function to the Form Control. This works great if it\'s a simple control. For example, the GlnInput component is a complex control. Since it has its internal control element (FormControl), to which all validation functions apply. It turns out that the "GlnRegexCheck" directive can pass its validation function only to the external implementation of the "GlnInput" component. And the internal control element of the "GlnInput" component will not know anything about the new validation function. As a result, the "GlnInput" component will not be able to correctly apply the new validation function. '),e.qZA(),e.TgZ(64,"p"),e._uU(65,' To solve this problem, a mechanism of interaction between the "GlnRegexCheck" directive and the "GlnInput" component has been implemented. The "GlnInput" component implements the provider with the "GRN_NODE_INTERNAL_VALIDATOR" token. The "GlnRegexCheck" directive, when created, gets an instance of this provider, if any. The provider instance has its own "GrnNodeInternalValidator" interface. This interface provides methods for adding validation functions. '),e.qZA(),e.TgZ(66,"ul"),e.TgZ(67,"li"),e.TgZ(68,"code"),e._uU(69,"addValidators(validators: ValidatorFn | ValidatorFn[]): void;"),e.qZA(),e.qZA(),e.TgZ(70,"li"),e.TgZ(71,"code"),e._uU(72,"addAsyncValidators(validators: AsyncValidatorFn | AsyncValidatorFn[]): void;"),e.qZA(),e.qZA(),e.qZA(),e.TgZ(73,"p"),e._uU(74,' Thus, the "GlnRegexCheck" directive passes its check functions to the "GlnInput" component. And the "GlnInput" component in turn applies the new validation function to its internal control (FormControl). And everything works great. '),e.qZA(),e.qZA())},styles:["app-regex-check-api{display:block}\n"],encapsulation:2,changeDetection:0}),t})();function pe(t,r){1&t&&(e.TgZ(0,"div",2),e._UZ(1,"app-regex-check-basic"),e._UZ(2,"hr",3),e.qZA())}function ge(t,r){1&t&&(e.TgZ(0,"div",4),e._UZ(1,"app-regex-check-api"),e._UZ(2,"hr",3),e.qZA())}let me=(()=>{class t{constructor(){this.showNum=""}ngAfterViewInit(){Promise.resolve().then(()=>{C.R.scrollByFragmentFromPath()})}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-regex-check"]],decls:6,vars:2,consts:[["id","Basic",4,"ngIf"],["id","Api",4,"ngIf"],["id","Basic"],["br-tp",""],["id","Api"]],template:function(o,n){1&o&&(e.TgZ(0,"h3"),e._uU(1,'Directives: "GlnRegexCheck"'),e.qZA(),e.YNc(2,pe,3,0,"div",0),e.YNc(3,ge,3,0,"div",1),e._UZ(4,"br"),e._UZ(5,"br")),2&o&&(e.xp6(2),e.Q6J("ngIf",!n.showNum||"01"===n.showNum),e.xp6(1),e.Q6J("ngIf",!n.showNum||"02"===n.showNum))},directives:[c.O5,se,ce],styles:["app-regex-check{display:block}\n"],encapsulation:2,changeDetection:0}),t})(),de=(()=>{class t{constructor(){this.labelShowSource=u.sx,this.labelOutlined=u.SR,this.labelUnderline=u.kP,this.labelStandard=u.Qb,this.labelHtml=u.zC,this.labelTs=u.QS,this.labelCss=u.Er,this.control01={input01a:new l.NI("",[]),input01b:new l.NI("-1234567890123456.12345",[]),input01c:new l.NI("-12345678901234567890",[]),input01d:new l.NI("12345678901234567890.12",[]),input01e:new l.NI("123456789012.12",[]),input01f:new l.NI("123456789012",[]),input01g:new l.NI("123456789012.12",[])},this.formGroup01=new l.cw(this.control01),this.exterior01="outlined"}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-regex-match-basic"]],inputs:{labelShowSource:"labelShowSource",labelOutlined:"labelOutlined",labelUnderline:"labelUnderline",labelStandard:"labelStandard",labelHtml:"labelHtml",labelTs:"labelTs",labelCss:"labelCss"},decls:140,vars:31,consts:[["mr-vr",""],[1,"app-tab"],["href","https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event","target","_blank"],[3,"ngModel","ngModelChange"],["value","outlined"],["value","underline"],["value","standard"],["novalidate","","autocomplete","off",3,"formGroup"],[1,"app-group"],[1,"app-elem"],["formControlName","input01a","wdFull","","glnRegexMatch","/^-?(\\d+)$/",3,"label","helperText","exterior"],["formControlName","input01b","wdFull","",3,"label","glnRegexMatch","helperText","exterior"],["formControlName","input01c","wdFull","","glnRegexMatch","#numeric",3,"label","helperText","exterior"],["formControlName","input01d","wdFull","","glnRegexMatch","#numeric(,2)",3,"label","helperText","exterior"],["formControlName","input01e","wdFull","","glnRegexMatch","#numeric(12,2)",3,"label","helperText","exterior"],["formControlName","input01f","wdFull","","glnRegexMatch","#numeric(12)",3,"label","helperText","exterior"],["formControlName","input01g","wdFull","","glnRegexMatch","#numeric12_2",3,"label","helperText","exterior"],["animationDuration","0ms"],[3,"label"],["source","html"],["source","ts"],["source","css"]],template:function(o,n){1&o&&(e.TgZ(0,"section",0),e.TgZ(1,"h3"),e._uU(2,"Basic"),e.qZA(),e.TgZ(3,"p"),e._uU(4,' The "GlnRegexMatch" directive allows you to enter only those values that match the specified regular expression. If the new value does not match the regular expression, then it is not accepted. This allows the required business logic to be implemented without displaying an error. '),e.qZA(),e.qZA(),e.TgZ(5,"section",0),e.TgZ(6,"h4"),e._uU(7,"1. Allow: digits only."),e.qZA(),e.TgZ(8,"p"),e._uU(9," For example, you want to allow only numbers to be entered."),e._UZ(10,"br"),e._uU(11," To do this, we will use the following regular expression:"),e._UZ(12,"br"),e.TgZ(13,"code"),e._uU(14,"/^-?(\\d+)$/"),e.qZA(),e.qZA(),e.TgZ(15,"p"),e._uU(16,' The "GlnRegexMatch" directive supports the following forms for describing regular expressions: '),e.qZA(),e.TgZ(17,"ul"),e.TgZ(18,"li"),e.TgZ(19,"code"),e._uU(20,'glnRegexMatch="^-?(\\d+)$"'),e.qZA(),e.qZA(),e.TgZ(21,"li"),e.TgZ(22,"code"),e._uU(23,"[glnRegexMatch]=\"'^-?(\\\\d+)$'\""),e.qZA(),e.qZA(),e.TgZ(24,"li"),e.TgZ(25,"code"),e._uU(26,'glnRegexMatch="/^-?(\\d+)$/i"'),e.qZA(),e.qZA(),e.TgZ(27,"li"),e.TgZ(28,"code"),e._uU(29,"[glnRegexMatch]=\"'/^-?(\\\\d+)$/i'\""),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.TgZ(30,"section",0),e.TgZ(31,"h4"),e._uU(32,"2. Allow: real number."),e.qZA(),e.TgZ(33,"p"),e._uU(34," Suppose you want to allow only a real number to be entered without using an exponent. To do this, we will use the following regular expression:"),e._UZ(35,"br"),e.TgZ(36,"code"),e._uU(37,"/^-?(\\d+(\\.\\d*)?|\\.\\d+)$/"),e.qZA(),e.qZA(),e.qZA(),e.TgZ(38,"section",0),e.TgZ(39,"h4"),e._uU(40,"3. Allow: '#numeric'."),e.qZA(),e.TgZ(41,"p"),e._uU(42," The GlnRegexMatch directive has its own patterns, each of which matches a special regular expression. By using these patterns, you can reduce the time you spend developing and testing your regular expressions. "),e.qZA(),e.TgZ(43,"p"),e._uU(44," Sample templates: "),e.qZA(),e.TgZ(45,"table",1),e.TgZ(46,"tr"),e.TgZ(47,"th"),e._uU(48,"Template"),e.qZA(),e.TgZ(49,"th"),e._uU(50,"Regular expression"),e.qZA(),e.qZA(),e.TgZ(51,"tr"),e.TgZ(52,"td"),e.TgZ(53,"code"),e._uU(54,"'#numeric'"),e.qZA(),e.qZA(),e.TgZ(55,"td"),e.TgZ(56,"code"),e._uU(57,"'^-?(\\\\d+)$'"),e.qZA(),e.qZA(),e.qZA(),e.TgZ(58,"tr"),e.TgZ(59,"td"),e.TgZ(60,"code"),e._uU(61,"'#numeric()'"),e.qZA(),e.qZA(),e.TgZ(62,"td"),e.TgZ(63,"code"),e._uU(64,"'^-?(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d*)$'"),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.TgZ(65,"p"),e._uU(66," The GlnRegexMatch directive fires only when the element's value has changed. In other words, the directive listens for "),e.TgZ(67,"a",2),e._uU(68,"input"),e.qZA(),e._uU(69," event. And for this reason, the directive cannot perform its actions when the value of the input element is initially incorrect. "),e.qZA(),e.qZA(),e.TgZ(70,"section",0),e.TgZ(71,"span"),e._uU(72,"exterior: "),e.qZA(),e.TgZ(73,"mat-button-toggle-group",3),e.NdJ("ngModelChange",function(a){return n.exterior01=a}),e.TgZ(74,"mat-button-toggle",4),e._uU(75),e.qZA(),e.TgZ(76,"mat-button-toggle",5),e._uU(77),e.qZA(),e.TgZ(78,"mat-button-toggle",6),e._uU(79),e.qZA(),e.qZA(),e.qZA(),e.TgZ(80,"form",7),e.TgZ(81,"div",8),e.TgZ(82,"div",9),e.TgZ(83,"div"),e.TgZ(84,"small"),e.TgZ(85,"em"),e._uU(86,'1. Digits only. Regex="/^-?(\\d+)$/"'),e.qZA(),e.qZA(),e.qZA(),e._UZ(87,"gln-input",10),e.qZA(),e.TgZ(88,"div",9),e.TgZ(89,"div"),e.TgZ(90,"small"),e.TgZ(91,"em"),e._uU(92,'2. Real number. Regex="/^-?(\\d+)$/"'),e.qZA(),e.qZA(),e.qZA(),e._UZ(93,"gln-input",11),e.qZA(),e.TgZ(94,"div",9),e.TgZ(95,"div"),e.TgZ(96,"small"),e.TgZ(97,"em"),e._uU(98,'3. glnRegexMatch="#numeric".'),e.qZA(),e.qZA(),e.qZA(),e._UZ(99,"gln-input",12),e.qZA(),e.TgZ(100,"div",9),e.TgZ(101,"div"),e.TgZ(102,"small"),e.TgZ(103,"em"),e._uU(104,'3. glnRegexMatch="#numeric(,2)".'),e.qZA(),e.qZA(),e.qZA(),e._UZ(105,"gln-input",13),e.qZA(),e.TgZ(106,"div",9),e.TgZ(107,"div"),e.TgZ(108,"small"),e.TgZ(109,"em"),e._uU(110,'3. glnRegexMatch="#numeric(12,2)".'),e.qZA(),e.qZA(),e.qZA(),e._UZ(111,"gln-input",14),e.qZA(),e.TgZ(112,"div",9),e.TgZ(113,"div"),e.TgZ(114,"small"),e.TgZ(115,"em"),e._uU(116,'3. glnRegexMatch="#numeric(12)".'),e.qZA(),e.qZA(),e.qZA(),e._UZ(117,"gln-input",15),e.qZA(),e.TgZ(118,"div",9),e.TgZ(119,"div"),e.TgZ(120,"small"),e.TgZ(121,"em"),e._uU(122,'3. glnRegexMatch="#numeric12_2".'),e.qZA(),e.qZA(),e.qZA(),e._UZ(123,"gln-input",16),e.qZA(),e.qZA(),e.qZA(),e.TgZ(124,"section",0),e.TgZ(125,"mat-accordion"),e.TgZ(126,"mat-expansion-panel"),e.TgZ(127,"mat-expansion-panel-header"),e.TgZ(128,"mat-panel-title"),e._uU(129),e.qZA(),e.qZA(),e.TgZ(130,"mat-tab-group",17),e.TgZ(131,"mat-tab",18),e.TgZ(132,"pre",19),e._uU(133,'<form [formGroup]="formGroup01"\n  novalidate\n  autocomplete="off">\n\n  <div class="app-group">\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>1. Digits only. Regex="/^-?(\\d+)$/"</em>\n        </small>\n      </div>\n      <gln-input formControlName="input01a"\n        wdFull\n        [label]="!control01.input01a.value\n          ?\'Enter a digits\':\'A digits\'"\n        glnRegexMatch="/^-?(\\d+)$/"\n        [helperText]="!control01.input01a.errors\n        ?(!control01.input01a.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>2. Real number. Regex="/^-?(\\d+)$/"</em>\n        </small>\n      </div>\n      <gln-input formControlName="input01b"\n        wdFull\n        [label]="!control01.input01b.value\n          ?\'Enter a real number\':\'A real number\'"\n        [glnRegexMatch]="\'/^-?(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)$/\'"\n        [helperText]="!control01.input01b.errors\n        ?(!control01.input01b.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>3. glnRegexMatch="#numeric".</em>\n        </small>\n      </div>\n      <gln-input formControlName="input01c"\n        wdFull\n        [label]="!formGroup01.controls.input01c.value\n          ?\'Enter number\':\'Number\'"\n        glnRegexMatch="#numeric"\n        [helperText]="!control01.input01c.errors\n        ?(!control01.input01c.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>3. glnRegexMatch="#numeric(,2)".</em>\n        </small>\n      </div>\n      <gln-input formControlName="input01d"\n        wdFull\n        [label]="!formGroup01.controls.input01d.value\n          ?\'Enter number\':\'Number\'"\n        glnRegexMatch="#numeric(,2)"\n        [helperText]="!control01.input01d.errors\n        ?(!control01.input01d.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>3. glnRegexMatch="#numeric(12,2)".</em>\n        </small>\n      </div>\n      <gln-input formControlName="input01e"\n        wdFull\n        [label]="!formGroup01.controls.input01e.value\n          ?\'Enter number\':\'Number\'"\n        glnRegexMatch="#numeric(12,2)"\n        [helperText]="!control01.input01e.errors\n        ?(!control01.input01e.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>3. glnRegexMatch="#numeric(12)".</em>\n        </small>\n      </div>\n      <gln-input formControlName="input01f"\n        wdFull\n        [label]="!formGroup01.controls.input01f.value\n          ?\'Enter number\':\'Number\'"\n        glnRegexMatch="#numeric(12)"\n        [helperText]="!control01.input01f.errors\n        ?(!control01.input01f.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>3. glnRegexMatch="#numeric12_2".</em>\n        </small>\n      </div>\n      <gln-input formControlName="input01g"\n        wdFull\n        [label]="!formGroup01.controls.input01g.value\n          ?\'Enter number\':\'Number\'"\n        glnRegexMatch="#numeric12_2"\n        [helperText]="!control01.input01g.errors\n        ?(!control01.input01g.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n  </div>\n\n</form>'),e.qZA(),e.qZA(),e.TgZ(134,"mat-tab",18),e.TgZ(135,"pre",20),e._uU(136,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormControl, FormGroup, Validators\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-regex',\n  templateUrl: './regex.component.html',\n  styleUrls: ['./regex.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class RegexComponent {\n  public control01 = {\n    input01a: new FormControl('', []),\n    input01b: new FormControl('-1234567890123456.12345', []),\n    input01c: new FormControl('-12345678901234567890', []),\n    input01d: new FormControl('12345678901234567890.12', []),\n    input01e: new FormControl('123456789012.12', []),\n    input01f: new FormControl('123456789012', []),\n    input01g: new FormControl('123456789012.12', []),\n  };\n  public formGroup01: FormGroup = new FormGroup(this.control01);\n  public exterior01 = 'outlined';\n}"),e.qZA(),e.qZA(),e.TgZ(137,"mat-tab",18),e.TgZ(138,"pre",21),e._uU(139,".app-group {\n  display: flex;\n  flex-wrap: wrap;\n}\n.app-elem {\n  min-width: 26ch;\n  margin: 10px 10px;\n}"),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA()),2&o&&(e.xp6(73),e.Q6J("ngModel",n.exterior01),e.xp6(2),e.Oqu(n.labelOutlined),e.xp6(2),e.Oqu(n.labelUnderline),e.xp6(2),e.Oqu(n.labelStandard),e.xp6(1),e.Q6J("formGroup",n.formGroup01),e.xp6(7),e.Q6J("label",n.control01.input01a.value?"A digits":"Enter a digits")("helperText",n.control01.input01a.errors?"The value is not correct.":n.control01.input01a.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.control01.input01b.value?"A real number":"Enter a real number")("glnRegexMatch","/^-?(\\d+(\\.\\d*)?|\\.\\d+)$/")("helperText",n.control01.input01b.errors?"The value is not correct.":n.control01.input01b.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.formGroup01.controls.input01c.value?"Number":"Enter number")("helperText",n.control01.input01c.errors?"The value is not correct.":n.control01.input01c.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.formGroup01.controls.input01d.value?"Number":"Enter number")("helperText",n.control01.input01d.errors?"The value is not correct.":n.control01.input01d.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.formGroup01.controls.input01e.value?"Number":"Enter number")("helperText",n.control01.input01e.errors?"The value is not correct.":n.control01.input01e.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.formGroup01.controls.input01f.value?"Number":"Enter number")("helperText",n.control01.input01f.errors?"The value is not correct.":n.control01.input01f.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.formGroup01.controls.input01g.value?"Number":"Enter number")("helperText",n.control01.input01g.errors?"The value is not correct.":n.control01.input01g.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(3),e.Q6J("label",n.labelTs),e.xp6(3),e.Q6J("label",n.labelCss))},directives:[T.A9,l.JJ,l.On,T.Yi,l._Y,l.JL,l.sg,m.j7,l.u,m.XE,s.pp,s.ib,s.yz,s.yK,h.SP,h.uX],styles:["app-regex-match-basic{display:block}\n"],encapsulation:2,changeDetection:0}),t})(),Ze=(()=>{class t{constructor(){}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-regex-match-api"]],decls:118,vars:0,consts:[["mr-vr",""],["fw500",""],[1,"app-tab"],["href","https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation","target","_blank"],["href","https://github.com/angular/angular/issues/9587","target","_blank"],["source","ts"]],template:function(o,n){1&o&&(e.TgZ(0,"section",0),e.TgZ(1,"h3"),e._uU(2,"API: GlnRegexMatch"),e.qZA(),e.TgZ(3,"p"),e._uU(4," Selector: "),e.TgZ(5,"span",1),e._uU(6,"[glnRegexMatch]"),e.qZA(),e.qZA(),e.TgZ(7,"p"),e._uU(8," Exported as: "),e.TgZ(9,"span",1),e._uU(10,"glnRegexMatch"),e.qZA(),e.qZA(),e.TgZ(11,"p"),e._uU(12," The directive allows you to enter only those values that match the specified regular expression. "),e.qZA(),e.qZA(),e.TgZ(13,"section",0),e.TgZ(14,"h4"),e._uU(15,"Properties"),e.qZA(),e.qZA(),e.TgZ(16,"table",2),e.TgZ(17,"tr"),e.TgZ(18,"th"),e._uU(19,"Name"),e.qZA(),e.TgZ(20,"th"),e._uU(21,"Description"),e.qZA(),e.qZA(),e.TgZ(22,"tr"),e.TgZ(23,"td"),e.TgZ(24,"code"),e._uU(25,"@Input()"),e.qZA(),e.TgZ(26,"code"),e._uU(27,"glnRegexMatch: string | null;"),e.qZA(),e.qZA(),e.TgZ(28,"td"),e.TgZ(29,"span"),e._uU(30,"A regular expression value."),e.qZA(),e.TgZ(31,"ul"),e.TgZ(32,"li"),e.TgZ(33,"code"),e._uU(34,'glnRegexMatch="^-?(\\d+)$"'),e.qZA(),e.qZA(),e.TgZ(35,"li"),e.TgZ(36,"code"),e._uU(37,"[glnRegexMatch]=\"'^-?(\\\\d+)$'\""),e.qZA(),e.qZA(),e.TgZ(38,"li"),e.TgZ(39,"code"),e._uU(40,'glnRegexMatch="/^-?(\\d+)$/i"'),e.qZA(),e.qZA(),e.TgZ(41,"li"),e.TgZ(42,"code"),e._uU(43,"[glnRegexMatch]=\"'/^-?(\\\\d+)$/i'\""),e.qZA(),e.qZA(),e.qZA(),e.TgZ(44,"span"),e._uU(45," An example of an input value as a configuration:"),e._UZ(46,"br"),e.TgZ(47,"code"),e._uU(48,' [glnRegexCheck]="{'),e._UZ(49,"br"),e._uU(50," 'Letters': '^(?=.*[a-zA-Z])[\\\\w\\\\W]{1,}$',"),e._UZ(51,"br"),e._uU(52," 'Digits': '^(?=.*\\\\d)[\\\\w\\\\W]{1,}$',"),e._UZ(53,"br"),e._uU(54," 'Symbols': '^(?=.*[!@#$%^&*])[\\\\w\\\\W]{1,}$'"),e._UZ(55,"br"),e._uU(56,' }" '),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.TgZ(57,"section",0),e.TgZ(58,"p"),e._uU(59," The following templates can be used as an input parameter: "),e.qZA(),e.qZA(),e.TgZ(60,"table",2),e.TgZ(61,"tr"),e.TgZ(62,"th"),e._uU(63,"Template"),e.qZA(),e.TgZ(64,"th"),e._uU(65,"Regular expression"),e.qZA(),e.qZA(),e.TgZ(66,"tr"),e.TgZ(67,"td"),e.TgZ(68,"code"),e._uU(69,"'#numeric'"),e.qZA(),e.qZA(),e.TgZ(70,"td"),e.TgZ(71,"code"),e._uU(72,"'^-?(\\\\d+)$'"),e.qZA(),e.qZA(),e.qZA(),e.TgZ(73,"tr"),e.TgZ(74,"td"),e.TgZ(75,"code"),e._uU(76,"'#numeric-exp'"),e.qZA(),e.qZA(),e.TgZ(77,"td"),e.TgZ(78,"code"),e._uU(79,"'^-?[\\\\d.]+(?:e-?\\\\d*)?$'"),e.qZA(),e.qZA(),e.qZA(),e.TgZ(80,"tr"),e.TgZ(81,"td"),e.TgZ(82,"code"),e._uU(83,"'#numeric()'"),e.qZA(),e.qZA(),e.TgZ(84,"td"),e.TgZ(85,"code"),e._uU(86,"'^-?(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d*)$'"),e.qZA(),e.qZA(),e.qZA(),e.TgZ(87,"tr"),e.TgZ(88,"td"),e.TgZ(89,"code"),e._uU(90,"'#numeric12_2'"),e.qZA(),e.qZA(),e.TgZ(91,"td"),e.TgZ(92,"code"),e._uU(93,"'^-?(\\\\d{1,12}(\\\\.\\\\d{0,2})?|\\\\.\\\\d{0,2})$'"),e.qZA(),e.qZA(),e.qZA(),e.TgZ(94,"tr"),e.TgZ(95,"td"),e.TgZ(96,"code"),e._uU(97,"'#numeric(X,Y)'"),e.qZA(),e.qZA(),e.TgZ(98,"td"),e.TgZ(99,"code"),e._uU(100,"'^-?(\\\\d{1,X}(\\\\.\\\\d{0,Y})?|\\\\.\\\\d{0,Y})$'"),e.qZA(),e.TgZ(101,"small"),e._uU(102,"where X and Y are integers greater than zero;"),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.TgZ(103,"section",0),e.TgZ(104,"h4"),e._uU(105,"Additionally."),e.qZA(),e.TgZ(106,"p"),e._uU(107,' In angular, directives are created in the order of their description, and for this reason, it is advisable to specify the first GlnRegexMatch directive. Because it filters changes to the value of the input element. When the GlnRegexMatch directive cancels the input changes it calls "event.stopImmediatePropagation();". This should have canceled calls to other subscriptions on this node. ('),e.TgZ(108,"a",3),e._uU(109,"Event.stopImmediatePropagation();"),e.qZA(),e._uU(110,") However, this does not happen ( "),e.TgZ(111,"a",4),e._uU(112,"event.stopImmediatePropagation() called from listeners not working"),e.qZA(),e._uU(113,'). For this reason, it is required to check the value of "event.cancelBubble" in subscriptions. If the value is "false", then the event.stopImmediatePropagation () method was not called and you can continue working. When the value is "true" - the method was called and no action is required. This check will help prevent further processing in cases where the GlnRegexMatch directive canceled changes. '),e.qZA(),e.TgZ(114,"pre",5),e._uU(115,"@HostListener('input', ['$event'])\npublic doInput(event: Event): void {\n  // https://github.com/angular/angular/issues/9587\n  // \"event.stopImmediatePropagation() called from listeners not working\"\n  // Added Event.cancelBubble check to make sure there was no call \n  // to event.stopImmediatePropagation() in previous handlers.\n  if (!!event && !event.cancelBubble) {\n    // Further processing.\n  }\n}\n  "),e.qZA(),e.TgZ(116,"p"),e._uU(117," Important! Remember that a regular expression must allow you to enter data sequentially. "),e.qZA(),e.qZA())},styles:["app-regex-match-api{display:block}\n"],encapsulation:2,changeDetection:0}),t})();function he(t,r){1&t&&(e.TgZ(0,"div",2),e._UZ(1,"app-regex-match-basic"),e._UZ(2,"hr",3),e.qZA())}function Ae(t,r){1&t&&(e.TgZ(0,"div",4),e._UZ(1,"app-regex-match-api"),e._UZ(2,"hr",3),e.qZA())}let Te=(()=>{class t{constructor(){this.showNum=""}ngAfterViewInit(){Promise.resolve().then(()=>{C.R.scrollByFragmentFromPath()})}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-regex-match"]],decls:6,vars:2,consts:[["id","Basic",4,"ngIf"],["id","Api",4,"ngIf"],["id","Basic"],["br-tp",""],["id","Api"]],template:function(o,n){1&o&&(e.TgZ(0,"h3"),e._uU(1,'Directives: "GlnRegexMatch"'),e.qZA(),e.YNc(2,he,3,0,"div",0),e.YNc(3,Ae,3,0,"div",1),e._UZ(4,"br"),e._UZ(5,"br")),2&o&&(e.xp6(2),e.Q6J("ngIf",!n.showNum||"01"===n.showNum),e.xp6(1),e.Q6J("ngIf",!n.showNum||"02"===n.showNum))},directives:[c.O5,de,Ze],styles:["app-regex-match{display:block}\n"],encapsulation:2,changeDetection:0}),t})(),ve=(()=>{class t{constructor(){this.labelShowSource=u.sx,this.labelOutlined=u.SR,this.labelUnderline=u.kP,this.labelStandard=u.Qb,this.labelHtml=u.zC,this.labelTs=u.QS,this.labelCss=u.Er,this.control01={input01a:new l.NI("123",[]),input01b:new l.NI("Alex",[]),input01c:new l.NI("New level 12",[]),input01d:new l.NI("Sarah Chauncey Woolsey",[])},this.formGroup01=new l.cw(this.control01),this.exterior01="outlined"}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-regex-remove-basic"]],inputs:{labelShowSource:"labelShowSource",labelOutlined:"labelOutlined",labelUnderline:"labelUnderline",labelStandard:"labelStandard",labelHtml:"labelHtml",labelTs:"labelTs",labelCss:"labelCss"},decls:116,vars:21,consts:[["mr-vr",""],[3,"ngModel","ngModelChange"],["value","outlined"],["value","underline"],["value","standard"],["novalidate","","autocomplete","off",3,"formGroup"],[1,"app-group"],[1,"app-elem"],["formControlName","input01a","wdFull","","glnRegexRemove","/[^\\d]/gm",3,"label","helperText","exterior"],["formControlName","input01b","wdFull","","glnRegexRemove","/[^A-Za-z]/gm",3,"label","helperText","exterior"],["formControlName","input01c","wdFull","","glnRegexRemove","/[^\\ \\dA-Za-z]/gm",3,"label","helperText","exterior"],["formControlName","input01d","wdFull","","glnRegexRemove","/(^[ ]+)|((?<=[ ])[ ]+)/g",3,"label","helperText","exterior","change"],["animationDuration","0ms"],[3,"label"],["source","html"],["source","ts"],["source","css"]],template:function(o,n){1&o&&(e.TgZ(0,"section",0),e.TgZ(1,"h3"),e._uU(2,"Basic"),e.qZA(),e.TgZ(3,"p"),e._uU(4," When changing the value, the GlnRegexRemove directive deletes the data that matches the specified regular expression. The regular expression must contain those characters that should not be present in the resulting string. In other words, if for a character the regex check returned true, then this character is not included in the resulting string. This allows the required business logic to be implemented without displaying an error. "),e.qZA(),e.qZA(),e.TgZ(5,"section",0),e.TgZ(6,"h4"),e._uU(7,"1. Allow: digits only."),e.qZA(),e.TgZ(8,"p"),e._uU(9," For example, you want to allow only numbers to be entered."),e._UZ(10,"br"),e._uU(11," To do this, we will use the following regular expression: "),e.TgZ(12,"code"),e._uU(13,"/[^\\d]/gm"),e.qZA(),e._UZ(14,"br"),e._uU(15," For this expression, all non-numeric values will be removed. "),e.qZA(),e.qZA(),e.TgZ(16,"section",0),e.TgZ(17,"h4"),e._uU(18,"2. Allow: letters only."),e.qZA(),e.TgZ(19,"p"),e._uU(20," For example, you want to allow only letters to be entered."),e._UZ(21,"br"),e._uU(22," To do this, we will use the following regular expression: "),e.TgZ(23,"code"),e._uU(24,"/[^A-Za-z]/gm"),e.qZA(),e._UZ(25,"br"),e._uU(26," For this expression, all non-letter values will be removed. "),e.qZA(),e.qZA(),e.TgZ(27,"section",0),e.TgZ(28,"h4"),e._uU(29,"3. Allow: letters, digits and space."),e.qZA(),e.TgZ(30,"p"),e._uU(31," For example, you want to allow only letters, digits and space to be entered."),e._UZ(32,"br"),e._uU(33," To do this, we will use the following regular expression: "),e.TgZ(34,"code"),e._uU(35,"/[^\\ \\dA-Za-z]/gm"),e.qZA(),e._UZ(36,"br"),e._uU(37," All other values will be removed for this expression. "),e.qZA(),e.qZA(),e.TgZ(38,"section",0),e.TgZ(39,"h4"),e._uU(40,"4. Allow: Single spaces only."),e.qZA(),e.TgZ(41,"p"),e._uU(42," For example, suppose you want to prevent a second consecutive space from being entered. And also prohibit leading spaces. For this we will use the following regular expression:"),e._UZ(43,"br"),e.TgZ(44,"code"),e._uU(45,"/(^[ ]+)|((?<=[ ])[ ]+)/g"),e.qZA(),e._UZ(46,"br"),e.qZA(),e.TgZ(47,"p"),e._uU(48," The expression "),e.TgZ(49,"code"),e._uU(50,"(?<=...)"),e.qZA(),e._uU(51," is retrospective and means that it precedes it. "),e.qZA(),e.TgZ(52,"p"),e._uU(53," For this expression, the following will be removed: "),e.qZA(),e.TgZ(54,"ul"),e.TgZ(55,"li"),e._uU(56,"leading spaces;"),e.qZA(),e.TgZ(57,"li"),e._uU(58,"all the second consecutive spaces;"),e.qZA(),e.qZA(),e.TgZ(59,"p"),e._uU(60,' We cannot remove trailing spaces with a regular pattern, since the user will not be able to enter a new word. Trailing spaces can be removed using the "change" event.'),e._UZ(61,"br"),e.TgZ(62,"code"),e._uU(63,'(change)="control01.input01d.setValue(control01.input01d.value?.trim())"'),e.qZA(),e.qZA(),e.qZA(),e.TgZ(64,"section",0),e.TgZ(65,"span"),e._uU(66,"exterior: "),e.qZA(),e.TgZ(67,"mat-button-toggle-group",1),e.NdJ("ngModelChange",function(a){return n.exterior01=a}),e.TgZ(68,"mat-button-toggle",2),e._uU(69),e.qZA(),e.TgZ(70,"mat-button-toggle",3),e._uU(71),e.qZA(),e.TgZ(72,"mat-button-toggle",4),e._uU(73),e.qZA(),e.qZA(),e.qZA(),e.TgZ(74,"form",5),e.TgZ(75,"div",6),e.TgZ(76,"div",7),e.TgZ(77,"div"),e.TgZ(78,"small"),e.TgZ(79,"em"),e._uU(80,'1. Digits only. Regex="/[^\\d]/gm"'),e.qZA(),e.qZA(),e.qZA(),e._UZ(81,"gln-input",8),e.qZA(),e.TgZ(82,"div",7),e.TgZ(83,"div"),e.TgZ(84,"small"),e.TgZ(85,"em"),e._uU(86,'2. Letters only. Regex="/[^A-Za-z]/gm"'),e.qZA(),e.qZA(),e.qZA(),e._UZ(87,"gln-input",9),e.qZA(),e.TgZ(88,"div",7),e.TgZ(89,"div"),e.TgZ(90,"small"),e.TgZ(91,"em"),e._uU(92,'3. Regex="/[^\\ \\dA-Za-z]/gm"'),e.qZA(),e.qZA(),e.qZA(),e._UZ(93,"gln-input",10),e.qZA(),e.TgZ(94,"div",7),e.TgZ(95,"div"),e.TgZ(96,"small"),e.TgZ(97,"em"),e._uU(98,"4. Single spaces only."),e.qZA(),e.qZA(),e.qZA(),e.TgZ(99,"gln-input",11),e.NdJ("change",function(){return n.control01.input01d.setValue(null==n.control01.input01d.value?null:n.control01.input01d.value.trim())}),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.TgZ(100,"section",0),e.TgZ(101,"mat-accordion"),e.TgZ(102,"mat-expansion-panel"),e.TgZ(103,"mat-expansion-panel-header"),e.TgZ(104,"mat-panel-title"),e._uU(105),e.qZA(),e.qZA(),e.TgZ(106,"mat-tab-group",12),e.TgZ(107,"mat-tab",13),e.TgZ(108,"pre",14),e._uU(109,'<form [formGroup]="formGroup01"\n  novalidate\n  autocomplete="off">\n\n  <div class="app-group">\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>1. Digits only. Regex="/[^\\d]/gm"</em>\n        </small>\n      </div>\n      <gln-input formControlName="input01a"\n        wdFull\n        [label]="!control01.input01a.value\n          ?\'Enter a digits\':\'A digits\'"\n        glnRegexRemove="/[^\\d]/gm"\n        [helperText]="!control01.input01a.errors\n        ?(!control01.input01a.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>2. Letters only. Regex="/[^A-Za-z]/gm"</em>\n        </small>\n      </div>\n      <gln-input formControlName="input01b"\n        wdFull\n        [label]="!control01.input01b.value\n          ?\'Enter a letters\':\'A letters\'"\n        glnRegexRemove="/[^A-Za-z]/gm"\n        [helperText]="!control01.input01b.errors\n        ?(!control01.input01b.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>3. Regex="/[^\\ \\dA-Za-z]/gm"</em>\n        </small>\n      </div>\n      <gln-input formControlName="input01c"\n        wdFull\n        [label]="!control01.input01c.value\n          ?\'Enter a letters, digits, space\'\n          :\'A letters, digits, space\'"\n        glnRegexRemove="/[^\\ \\dA-Za-z]/gm"\n        [helperText]="!control01.input01c.errors\n        ?(!control01.input01c.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>4. Single spaces only.</em>\n        </small>\n      </div>\n      <gln-input formControlName="input01d"\n        wdFull\n        [label]="!control01.input01d.value\n          ?\'Enter a surname and name\':\'Surname and name\'"\n        glnRegexRemove="/(^[ ]+)|((?<=[ ])[ ]+)/g"\n        [helperText]="!control01.input01d.errors\n        ?(!control01.input01d.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        (change)="control01.input01d.setValue(\n          control01.input01d.value?.trim())"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n  </div>\n\n</form>'),e.qZA(),e.qZA(),e.TgZ(110,"mat-tab",13),e.TgZ(111,"pre",15),e._uU(112,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormControl, FormGroup, Validators\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-regex',\n  templateUrl: './regex.component.html',\n  styleUrls: ['./regex.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class RegexComponent {\n  public control01 = {\n    input01a: new FormControl('123', []),\n    input01b: new FormControl('Alex', []),\n    input01c: new FormControl('New level 12', []),\n    input01d: new FormControl('Sarah Chauncey Woolsey', []),\n  };\n  public formGroup01: FormGroup = new FormGroup(this.control01);\n  public exterior01 = 'outlined';\n}"),e.qZA(),e.qZA(),e.TgZ(113,"mat-tab",13),e.TgZ(114,"pre",16),e._uU(115,".app-group {\n  display: flex;\n  flex-wrap: wrap;\n}\n.app-elem {\n  min-width: 26ch;\n  margin: 10px 10px;\n}"),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA()),2&o&&(e.xp6(67),e.Q6J("ngModel",n.exterior01),e.xp6(2),e.Oqu(n.labelOutlined),e.xp6(2),e.Oqu(n.labelUnderline),e.xp6(2),e.Oqu(n.labelStandard),e.xp6(1),e.Q6J("formGroup",n.formGroup01),e.xp6(7),e.Q6J("label",n.control01.input01a.value?"A digits":"Enter a digits")("helperText",n.control01.input01a.errors?"The value is not correct.":n.control01.input01a.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.control01.input01b.value?"A letters":"Enter a letters")("helperText",n.control01.input01b.errors?"The value is not correct.":n.control01.input01b.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.control01.input01c.value?"A letters, digits, space":"Enter a letters, digits, space")("helperText",n.control01.input01c.errors?"The value is not correct.":n.control01.input01c.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.control01.input01d.value?"Surname and name":"Enter a surname and name")("helperText",n.control01.input01d.errors?"The value is not correct.":n.control01.input01d.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(3),e.Q6J("label",n.labelTs),e.xp6(3),e.Q6J("label",n.labelCss))},directives:[T.A9,l.JJ,l.On,T.Yi,l._Y,l.JL,l.sg,m.j7,l.u,m.h7,s.pp,s.ib,s.yz,s.yK,h.SP,h.uX],styles:["app-regex-remove-basic{display:block}\n"],encapsulation:2,changeDetection:0}),t})(),_e=(()=>{class t{constructor(){}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-regex-remove-api"]],decls:38,vars:0,consts:[["mr-vr",""],["fw500",""],[1,"app-tab"]],template:function(o,n){1&o&&(e.TgZ(0,"section",0),e.TgZ(1,"h3"),e._uU(2,"API: GlnRegexRemove"),e.qZA(),e.TgZ(3,"p"),e._uU(4," Selector: "),e.TgZ(5,"span",1),e._uU(6,"[glnRegexRemove]"),e.qZA(),e.qZA(),e.TgZ(7,"p"),e._uU(8," Exported as: "),e.TgZ(9,"span",1),e._uU(10,"glnRegexRemove"),e.qZA(),e.qZA(),e.TgZ(11,"p"),e._uU(12," When changing the value, the directive deletes the data that matches the specified regular expression. "),e.qZA(),e.qZA(),e.TgZ(13,"section",0),e.TgZ(14,"h4"),e._uU(15,"Properties"),e.qZA(),e.qZA(),e.TgZ(16,"table",2),e.TgZ(17,"tr"),e.TgZ(18,"th"),e._uU(19,"Name"),e.qZA(),e.TgZ(20,"th"),e._uU(21,"Description"),e.qZA(),e.qZA(),e.TgZ(22,"tr"),e.TgZ(23,"td"),e.TgZ(24,"code"),e._uU(25,"@Input()"),e.qZA(),e.TgZ(26,"code"),e._uU(27,"glnRegexRemove: string | null;"),e.qZA(),e.qZA(),e.TgZ(28,"td"),e.TgZ(29,"span"),e._uU(30,"Regular expression for entering numbers only."),e.qZA(),e.TgZ(31,"ul"),e.TgZ(32,"li"),e.TgZ(33,"code"),e._uU(34,'glnRegexRemove="/[^\\d]/gm"'),e.qZA(),e.qZA(),e.TgZ(35,"li"),e.TgZ(36,"code"),e._uU(37,"[glnRegexRemove]=\"'/[^\\\\d]/gm'\""),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA(),e.qZA())},styles:["app-regex-remove-api{display:block}\n"],encapsulation:2,changeDetection:0}),t})();function be(t,r){1&t&&(e.TgZ(0,"div",2),e._UZ(1,"app-regex-remove-basic"),e._UZ(2,"hr",3),e.qZA())}function fe(t,r){1&t&&(e.TgZ(0,"div",4),e._UZ(1,"app-regex-remove-api"),e._UZ(2,"hr",3),e.qZA())}let qe=(()=>{class t{constructor(){this.showNum=""}ngAfterViewInit(){Promise.resolve().then(()=>{C.R.scrollByFragmentFromPath()})}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-regex-remove"]],decls:6,vars:2,consts:[["id","Basic",4,"ngIf"],["id","Api",4,"ngIf"],["id","Basic"],["br-tp",""],["id","Api"]],template:function(o,n){1&o&&(e.TgZ(0,"h3"),e._uU(1,'Directives: "GlnRegexRemove"'),e.qZA(),e.YNc(2,be,3,0,"div",0),e.YNc(3,fe,3,0,"div",1),e._UZ(4,"br"),e._UZ(5,"br")),2&o&&(e.xp6(2),e.Q6J("ngIf",!n.showNum||"01"===n.showNum),e.xp6(1),e.Q6J("ngIf",!n.showNum||"02"===n.showNum))},directives:[c.O5,ve,_e],styles:["app-regex-remove{display:block}\n"],encapsulation:2,changeDetection:0}),t})();var Ue=g(3652);const xe=function(t){return[t]};function we(t,r){if(1&t&&(e.TgZ(0,"li"),e.TgZ(1,"a",9),e._uU(2),e.qZA(),e.qZA()),2&t){const o=r.$implicit;e.xp6(1),e.Q6J("routerLink",e.VKq(3,xe,o.url))("fragment",o.fragment),e.xp6(1),e.Oqu(o.label)}}function Ce(t,r){if(1&t&&(e.TgZ(0,"mat-expansion-panel",5),e.TgZ(1,"mat-expansion-panel-header",6),e.TgZ(2,"mat-panel-title"),e._uU(3),e.qZA(),e.qZA(),e.TgZ(4,"ul",7),e.YNc(5,we,3,5,"li",8),e.qZA(),e.qZA()),2&t){const o=r.$implicit,n=e.oxw();e.Q6J("expanded",o.expanded),e.xp6(1),e.Q6J("expandedHeight",n.expandedHeight),e.xp6(2),e.Oqu(o.label),e.xp6(2),e.Q6J("ngForOf",o.siteUrls)("ngForTrackBy",n.trackByUrlItem)}}let ye=(()=>{class t{constructor(){this.expandedHeight=u.uT,this.itemDataList=_.T.getItems("Directives");for(let n=0;n<this.itemDataList.length;n++)this.itemDataList[n].expanded=!1;const o=_.T.findSiteItemByUrl(this.itemDataList,location.pathname);o&&(o.expanded=!0)}trackByItemData(o,n){return n.order}trackByUrlItem(o,n){return n.url+"#"+n.fragment}}return t.\u0275fac=function(o){return new(o||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-lm-directives"]],decls:8,vars:2,consts:[["sideLeftPanel",""],[1,"ss-item"],["displayMode","flat"],[3,"expanded",4,"ngFor","ngForOf","ngForTrackBy"],["sideMainPanel",""],[3,"expanded"],[3,"expandedHeight"],[1,"ss-ul"],[4,"ngFor","ngForOf","ngForTrackBy"],[3,"routerLink","fragment"]],template:function(o,n){1&o&&(e.TgZ(0,"app-site-scheme"),e.TgZ(1,"div",0),e.TgZ(2,"div",1),e._uU(3,"Directives"),e.qZA(),e.TgZ(4,"mat-accordion",2),e.YNc(5,Ce,6,5,"mat-expansion-panel",3),e.qZA(),e.qZA(),e.TgZ(6,"div",4),e._UZ(7,"router-outlet"),e.qZA(),e.qZA()),2&o&&(e.xp6(5),e.Q6J("ngForOf",n.itemDataList)("ngForTrackBy",n.trackByItemData))},directives:[Ue.V,s.pp,c.sg,b.lC,s.ib,s.yz,s.yK,b.yS],styles:["app-lm-directives{display:block;height:100%}\n"],encapsulation:2}),t})();const Re=p.get("URL_AUTO_FOCUSE"),N=p.get("URL_REGEX_CHECK"),ke=[{path:"",component:ye,children:[{path:Re,component:ae},{path:N,component:me},{path:p.get("URL_REGEX_MATCH"),component:Te},{path:p.get("URL_REGEX_REMOVE"),component:qe},{path:"**",redirectTo:N}]}];let Ee=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[b.Bz.forChild(ke)],b.Bz]}),t})(),Ne=(()=>{class t{}return t.\u0275fac=function(o){return new(o||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[[c.ez,s.To,Ee,I.u,ee]]}),t})()}}]);