"use strict";(self.webpackChunkgelenium_ui_demo=self.webpackChunkgelenium_ui_demo||[]).push([[288],{3288:(C,p,t)=>{t.r(p),t.d(p,{DrRegexMatchModule:()=>w});var c=t(6895),a=t(433),m=t(811),u=t(7084),g=t(3848),s=t(4196),e=t(1571);let Z=(()=>{class r{}return r.\u0275fac=function(l){return new(l||r)},r.\u0275mod=e.oAB({type:r}),r.\u0275inj=e.cJS({imports:[c.ez,a.UX,m.vV,u.To,g.Nh,s.eB,s.rw]}),r})(),x=(()=>{class r{}return r.\u0275fac=function(l){return new(l||r)},r.\u0275mod=e.oAB({type:r}),r.\u0275inj=e.cJS({imports:[c.ez]}),r})();var h=t(6001),T=t(590),b=t(4577),d=t(4171),i=t(6986);let f=(()=>{class r{constructor(){this.labelShowSource=i.sx,this.labelOutlined=i.SR,this.labelUnderline=i.kP,this.labelStandard=i.Qb,this.labelHtml=i.zC,this.labelTs=i.QS,this.labelCss=i.Er,this.urlDrRegexMatch="/"+d.g.get("URL_DIRECTIVES")+"/"+d.g.get("URL_DIRECTIVES_REGEX_MATCH"),this.control01={model01a:new a.NI("",[]),model01b:new a.NI("-1234567890123456.12345",[]),model01c:new a.NI("-12345678901234567890",[]),model01d:new a.NI("12345678901234567890.12",[]),model01e:new a.NI("123456789012.12",[]),model01f:new a.NI("123456789012",[]),model01g:new a.NI("123456789012.12",[])},this.formGroup01=new a.cw(this.control01),this.exterior01="outlined"}}return r.\u0275fac=function(l){return new(l||r)},r.\u0275cmp=e.Xpm({type:r,selectors:[["app-dr-regex-match-basic"]],inputs:{labelShowSource:"labelShowSource",labelOutlined:"labelOutlined",labelUnderline:"labelUnderline",labelStandard:"labelStandard",labelHtml:"labelHtml",labelTs:"labelTs",labelCss:"labelCss"},decls:148,vars:37,consts:[["mr-vr",""],[1,"app-hover-link"],[3,"href"],["id","allow-digits",1,"app-hover-link"],["id","allow-real-number",1,"app-hover-link"],["id","allow-numeric",1,"app-hover-link"],[1,"app-tab"],["href","https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event","target","_blank"],["value","exterior01",3,"change"],["value","outlined",3,"checked"],["value","underline",3,"checked"],["value","standard",3,"checked"],["novalidate","","autocomplete","off",3,"formGroup"],[1,"app-group"],[1,"app-elem"],["formControlName","model01a","wdFull","","glnRegexMatch","/^-?(\\d+)$/",3,"label","helperText","exterior"],["formControlName","model01b","wdFull","",3,"label","glnRegexMatch","helperText","exterior"],["formControlName","model01c","wdFull","","glnRegexMatch","#numeric",3,"label","helperText","exterior"],["formControlName","model01d","wdFull","","glnRegexMatch","#numeric(,2)",3,"label","helperText","exterior"],["formControlName","model01e","wdFull","","glnRegexMatch","#numeric(12,2)",3,"label","helperText","exterior"],["formControlName","model01f","wdFull","","glnRegexMatch","#numeric(12)",3,"label","helperText","exterior"],["formControlName","model01g","wdFull","","glnRegexMatch","#numeric12_2",3,"label","helperText","exterior"],["animationDuration","0ms"],[3,"label"],["source","html"],["source","ts"],["source","css"]],template:function(l,n){1&l&&(e.TgZ(0,"section",0)(1,"h3",1),e._uU(2," Basic. "),e.TgZ(3,"a",2),e._uU(4,"#"),e.qZA()(),e.TgZ(5,"p"),e._uU(6,' The "GlnRegexMatch" directive allows you to enter only those values that match the specified regular expression. If the new value does not match the regular expression, then it is not accepted. This allows the required business logic to be implemented without displaying an error. '),e.qZA()(),e.TgZ(7,"section",0)(8,"h4",3),e._uU(9," 1. Allow: digits only. "),e.TgZ(10,"a",2),e._uU(11,"#"),e.qZA()(),e.TgZ(12,"p"),e._uU(13," For example, you want to allow only numbers to be entered."),e._UZ(14,"br"),e._uU(15," To do this, we will use the following regular expression:"),e._UZ(16,"br"),e.TgZ(17,"code"),e._uU(18,"/^-?(\\d+)$/"),e.qZA()(),e.TgZ(19,"p"),e._uU(20,' The "GlnRegexMatch" directive supports the following forms for describing regular expressions: '),e.qZA(),e.TgZ(21,"ul")(22,"li")(23,"code"),e._uU(24,'glnRegexMatch="^-?(\\d+)$"'),e.qZA()(),e.TgZ(25,"li")(26,"code"),e._uU(27,"[glnRegexMatch]=\"'^-?(\\\\d+)$'\""),e.qZA()(),e.TgZ(28,"li")(29,"code"),e._uU(30,'glnRegexMatch="/^-?(\\d+)$/i"'),e.qZA()(),e.TgZ(31,"li")(32,"code"),e._uU(33,"[glnRegexMatch]=\"'/^-?(\\\\d+)$/i'\""),e.qZA()()()(),e.TgZ(34,"section",0)(35,"h4",4),e._uU(36," 2. Allow: real number. "),e.TgZ(37,"a",2),e._uU(38,"#"),e.qZA()(),e.TgZ(39,"p"),e._uU(40," Suppose you want to allow only a real number to be entered without using an exponent. To do this, we will use the following regular expression:"),e._UZ(41,"br"),e.TgZ(42,"code"),e._uU(43,"/^-?(\\d+(\\.\\d*)?|\\.\\d+)$/"),e.qZA()()(),e.TgZ(44,"section",0)(45,"h4",5),e._uU(46," 3. Allow: '#numeric'. "),e.TgZ(47,"a",2),e._uU(48,"#"),e.qZA()(),e.TgZ(49,"p"),e._uU(50," The GlnRegexMatch directive has its own patterns, each of which matches a special regular expression. By using these patterns, you can reduce the time you spend developing and testing your regular expressions. "),e.qZA(),e.TgZ(51,"p"),e._uU(52," Sample templates: "),e.qZA(),e.TgZ(53,"table",6)(54,"tr")(55,"th"),e._uU(56,"Template"),e.qZA(),e.TgZ(57,"th"),e._uU(58,"Regular expression"),e.qZA()(),e.TgZ(59,"tr")(60,"td")(61,"code"),e._uU(62,"'#numeric'"),e.qZA()(),e.TgZ(63,"td")(64,"code"),e._uU(65,"'^-?(\\\\d+)$'"),e.qZA()()(),e.TgZ(66,"tr")(67,"td")(68,"code"),e._uU(69,"'#numeric()'"),e.qZA()(),e.TgZ(70,"td")(71,"code"),e._uU(72,"'^-?(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d*)$'"),e.qZA()()()(),e.TgZ(73,"p"),e._uU(74," The GlnRegexMatch directive fires only when the element's value has changed. In other words, the directive listens for "),e.TgZ(75,"a",7),e._uU(76,"input"),e.qZA(),e._uU(77," event. And for this reason, the directive cannot perform its actions when the value of the input element is initially incorrect. "),e.qZA()(),e.TgZ(78,"section",0)(79,"span"),e._uU(80,"exterior: "),e.qZA(),e.TgZ(81,"mat-button-toggle-group",8),e.NdJ("change",function(q){return n.exterior01=q.value}),e.TgZ(82,"mat-button-toggle",9),e._uU(83),e.qZA(),e.TgZ(84,"mat-button-toggle",10),e._uU(85),e.qZA(),e.TgZ(86,"mat-button-toggle",11),e._uU(87),e.qZA()()(),e.TgZ(88,"form",12)(89,"div",13)(90,"div",14)(91,"div")(92,"small")(93,"em"),e._uU(94,'1. Digits only. Regex="/^-?(\\d+)$/"'),e.qZA()()(),e._UZ(95,"gln-input",15),e.qZA(),e.TgZ(96,"div",14)(97,"div")(98,"small")(99,"em"),e._uU(100,'2. Real number. Regex="/^-?(\\d+)$/"'),e.qZA()()(),e._UZ(101,"gln-input",16),e.qZA(),e.TgZ(102,"div",14)(103,"div")(104,"small")(105,"em"),e._uU(106,'3. glnRegexMatch="#numeric".'),e.qZA()()(),e._UZ(107,"gln-input",17),e.qZA(),e.TgZ(108,"div",14)(109,"div")(110,"small")(111,"em"),e._uU(112,'3. glnRegexMatch="#numeric(,2)".'),e.qZA()()(),e._UZ(113,"gln-input",18),e.qZA(),e.TgZ(114,"div",14)(115,"div")(116,"small")(117,"em"),e._uU(118,'3. glnRegexMatch="#numeric(12,2)".'),e.qZA()()(),e._UZ(119,"gln-input",19),e.qZA(),e.TgZ(120,"div",14)(121,"div")(122,"small")(123,"em"),e._uU(124,'3. glnRegexMatch="#numeric(12)".'),e.qZA()()(),e._UZ(125,"gln-input",20),e.qZA(),e.TgZ(126,"div",14)(127,"div")(128,"small")(129,"em"),e._uU(130,'3. glnRegexMatch="#numeric12_2".'),e.qZA()()(),e._UZ(131,"gln-input",21),e.qZA()()(),e.TgZ(132,"section",0)(133,"mat-accordion")(134,"mat-expansion-panel")(135,"mat-expansion-panel-header")(136,"mat-panel-title"),e._uU(137),e.qZA()(),e.TgZ(138,"mat-tab-group",22)(139,"mat-tab",23)(140,"pre",24),e._uU(141,'<form [formGroup]="formGroup01"\n  novalidate\n  autocomplete="off">\n\n  <div class="app-group">\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>1. Digits only. Regex="/^-?(\\d+)$/"</em>\n        </small>\n      </div>\n      <gln-input formControlName="model01a"\n        wdFull\n        [label]="!control01.model01a.value\n          ?\'Enter a digits\':\'A digits\'"\n        glnRegexMatch="/^-?(\\d+)$/"\n        [helperText]="!control01.model01a.errors\n        ?(!control01.model01a.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>2. Real number. Regex="/^-?(\\d+)$/"</em>\n        </small>\n      </div>\n      <gln-input formControlName="model01b"\n        wdFull\n        [label]="!control01.model01b.value\n          ?\'Enter a real number\':\'A real number\'"\n        [glnRegexMatch]="\'/^-?(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)$/\'"\n        [helperText]="!control01.model01b.errors\n        ?(!control01.model01b.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>3. glnRegexMatch="#numeric".</em>\n        </small>\n      </div>\n      <gln-input formControlName="model01c"\n        wdFull\n        [label]="!formGroup01.controls[\'model01c\'][\'value\']\n          ?\'Enter number\':\'Number\'"\n        glnRegexMatch="#numeric"\n        [helperText]="!control01.model01c.errors\n        ?(!control01.model01c.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>3. glnRegexMatch="#numeric(,2)".</em>\n        </small>\n      </div>\n      <gln-input formControlName="model01d"\n        wdFull\n        [label]="!formGroup01.controls[\'model01d\'][\'value\']\n          ?\'Enter number\':\'Number\'"\n        glnRegexMatch="#numeric(,2)"\n        [helperText]="!control01.model01d.errors\n        ?(!control01.model01d.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>3. glnRegexMatch="#numeric(12,2)".</em>\n        </small>\n      </div>\n      <gln-input formControlName="model01e"\n        wdFull\n        [label]="!formGroup01.controls[\'model01e\'][\'value\']\n          ?\'Enter number\':\'Number\'"\n        glnRegexMatch="#numeric(12,2)"\n        [helperText]="!control01.model01e.errors\n        ?(!control01.model01e.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>3. glnRegexMatch="#numeric(12)".</em>\n        </small>\n      </div>\n      <gln-input formControlName="model01f"\n        wdFull\n        [label]="!formGroup01.controls[\'model01f\'][\'value\']\n          ?\'Enter number\':\'Number\'"\n        glnRegexMatch="#numeric(12)"\n        [helperText]="!control01.model01f.errors\n        ?(!control01.model01f.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n    <div class="app-elem">\n      <div>\n        <small>\n          <em>3. glnRegexMatch="#numeric12_2".</em>\n        </small>\n      </div>\n      <gln-input formControlName="model01g"\n        wdFull\n        [label]="!formGroup01.controls[\'model01g\'][\'value\']\n          ?\'Enter number\':\'Number\'"\n        glnRegexMatch="#numeric12_2"\n        [helperText]="!control01.model01g.errors\n        ?(!control01.model01g.value\n          ? \'Enter value.\':\'The value is correct.\')\n        :\'The value is not correct.\'"\n        [exterior]="exterior01">\n      </gln-input>\n    </div>\n\n  </div>\n\n</form>'),e.qZA()(),e.TgZ(142,"mat-tab",23)(143,"pre",25),e._uU(144,"import {\n  Component, ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormControl, FormGroup, Validators\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-regex',\n  templateUrl: './regex.component.html',\n  styleUrls: ['./regex.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class RegexComponent {\n  public control01 = {\n    model01a: new FormControl('', []),\n    model01b: new FormControl('-1234567890123456.12345', []),\n    model01c: new FormControl('-12345678901234567890', []),\n    model01d: new FormControl('12345678901234567890.12', []),\n    model01e: new FormControl('123456789012.12', []),\n    model01f: new FormControl('123456789012', []),\n    model01g: new FormControl('123456789012.12', []),\n  };\n  public formGroup01: FormGroup = new FormGroup(this.control01);\n  public exterior01 = 'outlined';\n}"),e.qZA()(),e.TgZ(145,"mat-tab",23)(146,"pre",26),e._uU(147,".app-group {\n  display: flex;\n  flex-wrap: wrap;\n}\n.app-elem {\n  min-width: 26ch;\n  margin: 10px 10px;\n}"),e.qZA()()()()()()),2&l&&(e.xp6(3),e.Q6J("href",n.urlDrRegexMatch+"#Basic",e.LSH),e.xp6(7),e.Q6J("href",n.urlDrRegexMatch+"#allow-digits",e.LSH),e.xp6(27),e.Q6J("href",n.urlDrRegexMatch+"#allow-real-number",e.LSH),e.xp6(10),e.Q6J("href",n.urlDrRegexMatch+"#allow-numeric",e.LSH),e.xp6(35),e.Q6J("checked","outlined"===n.exterior01),e.xp6(1),e.Oqu(n.labelOutlined),e.xp6(1),e.Q6J("checked","underline"===n.exterior01),e.xp6(1),e.Oqu(n.labelUnderline),e.xp6(1),e.Q6J("checked","standard"===n.exterior01),e.xp6(1),e.Oqu(n.labelStandard),e.xp6(1),e.Q6J("formGroup",n.formGroup01),e.xp6(7),e.Q6J("label",n.control01.model01a.value?"A digits":"Enter a digits")("helperText",n.control01.model01a.errors?"The value is not correct.":n.control01.model01a.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.control01.model01b.value?"A real number":"Enter a real number")("glnRegexMatch","/^-?(\\d+(\\.\\d*)?|\\.\\d+)$/")("helperText",n.control01.model01b.errors?"The value is not correct.":n.control01.model01b.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.formGroup01.controls.model01c.value?"Number":"Enter number")("helperText",n.control01.model01c.errors?"The value is not correct.":n.control01.model01c.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.formGroup01.controls.model01d.value?"Number":"Enter number")("helperText",n.control01.model01d.errors?"The value is not correct.":n.control01.model01d.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.formGroup01.controls.model01e.value?"Number":"Enter number")("helperText",n.control01.model01e.errors?"The value is not correct.":n.control01.model01e.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.formGroup01.controls.model01f.value?"Number":"Enter number")("helperText",n.control01.model01f.errors?"The value is not correct.":n.control01.model01f.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Q6J("label",n.formGroup01.controls.model01g.value?"Number":"Enter number")("helperText",n.control01.model01g.errors?"The value is not correct.":n.control01.model01g.value?"The value is correct.":"Enter value.")("exterior",n.exterior01),e.xp6(6),e.Oqu(n.labelShowSource),e.xp6(2),e.Q6J("label",n.labelHtml),e.xp6(3),e.Q6J("label",n.labelTs),e.xp6(3),e.Q6J("label",n.labelCss))},dependencies:[a._Y,a.JJ,a.JL,a.sg,a.u,m.A9,m.Yi,u.pp,u.ib,u.yz,u.yK,g.SP,g.uX,s.j7,s.XE],styles:["app-dr-regex-match-basic{display:block}\n"],encapsulation:2,changeDetection:0}),r})(),U=(()=>{class r{constructor(){this.urlDrRegexMatch="/"+d.g.get("URL_DIRECTIVES")+"/"+d.g.get("URL_DIRECTIVES_REGEX_MATCH")}}return r.\u0275fac=function(l){return new(l||r)},r.\u0275cmp=e.Xpm({type:r,selectors:[["app-dr-regex-match-api"]],decls:125,vars:3,consts:[["mr-vr",""],[1,"app-hover-link"],[3,"href"],["fw500",""],["id","properties",1,"app-hover-link"],[1,"app-tab"],[1,"app-mn-wd-22ch"],["id","additionally",1,"app-hover-link"],["href","https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation","target","_blank"],["href","https://github.com/angular/angular/issues/9587","target","_blank"],["source","ts"]],template:function(l,n){1&l&&(e.TgZ(0,"section",0)(1,"h3",1),e._uU(2," API: GlnRegexMatch. "),e.TgZ(3,"a",2),e._uU(4,"#"),e.qZA()(),e.TgZ(5,"p"),e._uU(6," Selector: "),e.TgZ(7,"span",3),e._uU(8,"[glnRegexMatch]"),e.qZA()(),e.TgZ(9,"p"),e._uU(10," Exported as: "),e.TgZ(11,"span",3),e._uU(12,"glnRegexMatch"),e.qZA()(),e.TgZ(13,"p"),e._uU(14," The directive allows you to enter only those values that match the specified regular expression. "),e.qZA()(),e.TgZ(15,"section",0)(16,"h4",4),e._uU(17," Properties. "),e.TgZ(18,"a",2),e._uU(19,"#"),e.qZA()()(),e.TgZ(20,"table",5)(21,"tr")(22,"th",6),e._uU(23,"Name"),e.qZA(),e.TgZ(24,"th"),e._uU(25,"Description"),e.qZA()(),e.TgZ(26,"tr")(27,"td")(28,"code"),e._uU(29,"@Input()"),e.qZA(),e.TgZ(30,"code"),e._uU(31,"glnRegexMatch: string | null;"),e.qZA()(),e.TgZ(32,"td")(33,"span"),e._uU(34,"A regular expression value."),e.qZA(),e.TgZ(35,"ul")(36,"li")(37,"code"),e._uU(38,'glnRegexMatch="^-?(\\d+)$"'),e.qZA()(),e.TgZ(39,"li")(40,"code"),e._uU(41,"[glnRegexMatch]=\"'^-?(\\\\d+)$'\""),e.qZA()(),e.TgZ(42,"li")(43,"code"),e._uU(44,'glnRegexMatch="/^-?(\\d+)$/i"'),e.qZA()(),e.TgZ(45,"li")(46,"code"),e._uU(47,"[glnRegexMatch]=\"'/^-?(\\\\d+)$/i'\""),e.qZA()()(),e.TgZ(48,"span"),e._uU(49," An example of an input value as a configuration:"),e._UZ(50,"br"),e.TgZ(51,"code"),e._uU(52,' [glnRegexCheck]="{'),e._UZ(53,"br"),e._uU(54," 'Letters': '^(?=.*[a-zA-Z])[\\\\w\\\\W]{1,}$',"),e._UZ(55,"br"),e._uU(56," 'Digits': '^(?=.*\\\\d)[\\\\w\\\\W]{1,}$',"),e._UZ(57,"br"),e._uU(58," 'Symbols': '^(?=.*[!@#$%^&*])[\\\\w\\\\W]{1,}$'"),e._UZ(59,"br"),e._uU(60,' }" '),e.qZA()()()()(),e.TgZ(61,"section",0)(62,"p"),e._uU(63," The following templates can be used as an input parameter: "),e.qZA()(),e.TgZ(64,"table",5)(65,"tr")(66,"th"),e._uU(67,"Template"),e.qZA(),e.TgZ(68,"th"),e._uU(69,"Regular expression"),e.qZA()(),e.TgZ(70,"tr")(71,"td")(72,"code"),e._uU(73,"'#numeric'"),e.qZA()(),e.TgZ(74,"td")(75,"code"),e._uU(76,"'^-?(\\\\d+)$'"),e.qZA()()(),e.TgZ(77,"tr")(78,"td")(79,"code"),e._uU(80,"'#numeric-exp'"),e.qZA()(),e.TgZ(81,"td")(82,"code"),e._uU(83,"'^-?[\\\\d.]+(?:e-?\\\\d*)?$'"),e.qZA()()(),e.TgZ(84,"tr")(85,"td")(86,"code"),e._uU(87,"'#numeric()'"),e.qZA()(),e.TgZ(88,"td")(89,"code"),e._uU(90,"'^-?(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d*)$'"),e.qZA()()(),e.TgZ(91,"tr")(92,"td")(93,"code"),e._uU(94,"'#numeric12_2'"),e.qZA()(),e.TgZ(95,"td")(96,"code"),e._uU(97,"'^-?(\\\\d{1,12}(\\\\.\\\\d{0,2})?|\\\\.\\\\d{0,2})$'"),e.qZA()()(),e.TgZ(98,"tr")(99,"td")(100,"code"),e._uU(101,"'#numeric(X,Y)'"),e.qZA()(),e.TgZ(102,"td")(103,"code"),e._uU(104,"'^-?(\\\\d{1,X}(\\\\.\\\\d{0,Y})?|\\\\.\\\\d{0,Y})$'"),e.qZA(),e.TgZ(105,"small"),e._uU(106,"where X and Y are integers greater than zero;"),e.qZA()()()(),e.TgZ(107,"section",0)(108,"h4",7),e._uU(109," Additionally. "),e.TgZ(110,"a",2),e._uU(111,"#"),e.qZA()(),e.TgZ(112,"p"),e._uU(113,' In angular, directives are created in the order of their description, and for this reason, it is advisable to specify the first GlnRegexMatch directive. Because it filters changes to the value of the input element. When the GlnRegexMatch directive cancels the input changes it calls "event.stopImmediatePropagation();". This should have canceled calls to other subscriptions on this node. ('),e.TgZ(114,"a",8),e._uU(115,"Event.stopImmediatePropagation();"),e.qZA(),e._uU(116,") However, this does not happen ( "),e.TgZ(117,"a",9),e._uU(118,"event.stopImmediatePropagation() called from listeners not working"),e.qZA(),e._uU(119,'). For this reason, it is required to check the value of "event.cancelBubble" in subscriptions. If the value is "false", then the event.stopImmediatePropagation () method was not called and you can continue working. When the value is "true" - the method was called and no action is required. This check will help prevent further processing in cases where the GlnRegexMatch directive canceled changes. '),e.qZA(),e.TgZ(120,"code")(121,"pre",10),e._uU(122,"@HostListener('input', ['$event'])\npublic doInput(event: Event): void {\n  // https://github.com/angular/angular/issues/9587\n  // \"event.stopImmediatePropagation() called from listeners not working\"\n  // Added Event.cancelBubble check to make sure there was no call \n  // to event.stopImmediatePropagation() in previous handlers.\n  if (!!event && !event.cancelBubble) {\n    // Further processing.\n  }\n}"),e.qZA()(),e.TgZ(123,"p"),e._uU(124," Important! Remember that a regular expression must allow you to enter data sequentially. "),e.qZA()()),2&l&&(e.xp6(3),e.Q6J("href",n.urlDrRegexMatch+"#Api",e.LSH),e.xp6(15),e.Q6J("href",n.urlDrRegexMatch+"#properties",e.LSH),e.xp6(92),e.Q6J("href",n.urlDrRegexMatch+"#additionally",e.LSH))},styles:["app-dr-regex-match-api{display:block}\n"],encapsulation:2,changeDetection:0}),r})();function A(r,o){1&r&&(e.TgZ(0,"div",2),e._UZ(1,"app-dr-regex-match-basic")(2,"hr",3),e.qZA())}function R(r,o){1&r&&(e.TgZ(0,"div",4),e._UZ(1,"app-dr-regex-match-api")(2,"hr",3),e.qZA())}const v="DirectivesRegexMatch",M=[{path:"",component:(()=>{class r{constructor(l){this.ngZone=l,this.showNum="",console.time(v)}ngAfterViewInit(){Promise.resolve().then(()=>{b.R.scrollByFragmentFromPath()}),this.ngZone.onStable.pipe((0,T.P)()).subscribe(()=>{console.timeEnd(v)})}}return r.\u0275fac=function(l){return new(l||r)(e.Y36(e.R0b))},r.\u0275cmp=e.Xpm({type:r,selectors:[["app-dr-regex-match"]],decls:6,vars:2,consts:[["id","Basic",4,"ngIf"],["id","Api",4,"ngIf"],["id","Basic"],["br-tp",""],["id","Api"]],template:function(l,n){1&l&&(e.TgZ(0,"h3"),e._uU(1,'Directives: "GlnRegexMatch"'),e.qZA(),e.YNc(2,A,3,0,"div",0),e.YNc(3,R,3,0,"div",1),e._UZ(4,"br")(5,"br")),2&l&&(e.xp6(2),e.Q6J("ngIf",!n.showNum||"01"===n.showNum),e.xp6(1),e.Q6J("ngIf",!n.showNum||"02"===n.showNum))},dependencies:[c.O5,f,U],styles:["app-dr-regex-match{display:block}\n"],encapsulation:2,changeDetection:0}),r})()}];let _=(()=>{class r{}return r.\u0275fac=function(l){return new(l||r)},r.\u0275mod=e.oAB({type:r}),r.\u0275inj=e.cJS({imports:[h.Bz.forChild(M),h.Bz]}),r})(),w=(()=>{class r{}return r.\u0275fac=function(l){return new(l||r)},r.\u0275mod=e.oAB({type:r}),r.\u0275inj=e.cJS({imports:[c.ez,Z,x,_]}),r})()}}]);