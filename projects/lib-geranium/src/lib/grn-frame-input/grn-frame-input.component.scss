/*# sourceURL=grn-frame-input.component.scss */

@import '../_styles/mx-align-items.scss';
@import '../_styles/mx-display-inline-flex.scss';
@import '../_styles/mx-flex-direction.scss';
@import '../_styles/mx-transform-scale-x.scss';
@import '../_styles/mx-transform-translate-x-y-scale.scss';

grn-frame-input { //outline: 1px dashed crimson;

  // The color of the label and border on mouse hover.
  --g-hov-cl: rgba(0, 0, 0, 0.87);
  // The color of the label and border in an error state.
  --g-err-cl: #d32f2f;
  // The color of the label and border on mouse hover in an error state.
  --g-hov-err-cl: #ff8950;
  // The color of the border and label when getting focus.
  --g-foc-cl: #1976d2;

  // For "label"
  // The default color for the label.
  --g-lbl-def-cl: rgba(0, 0, 0, 0.6);
  // The color of the label and border in the state is disabled.
  --g-lbl-dis-cl: rgba(0, 0, 0, 0.38);

  // For "frame" - outlined
  // The default border color for "outlined" mode.
  --g-o-def-br-cl: rgba(0, 0, 0, 0.23);

  // For "frame" - underline
  // The default background color for "underline" mode.
  --g-u-def-bg-cl: rgba(0, 0, 0, 0.06);
  // The background color in an error state for "underline" mode.
  --g-u-err-bg-cl: var(--g-u-def-bg-cl);
  // The background color when getting focus for "underline" mode.
  --g-u-foc-bg-cl: rgba(0, 0, 0, 0.04);
  // The background color on mouse hover for the "underline" mode.
  --g-u-hov-bg-cl: rgba(0, 0, 0, 0.09);
  // The background color on mouse hover in an error state  for "underline" mode.
  --g-u-hov-err-bg-cl: var(--g-u-hov-bg-cl);
  // The background color in the state is disabled for the "underline" mode.
  --g-u-dis-bg-cl: rgba(0, 0, 0, 0.12);

  // For "frame" - standard and underline
  // The default bottom border color for "underline" and "standard" modes.
  --g-su-def-br-cl: rgba(0, 0, 0, 0.42);
  // The lower border color in the state is disabled for the "underline" and "standard" modes.
  --g-su-dis-br-cl: rgba(0, 0, 0, 0.32);



  // For "outlined" mode.
  // Small indentation of the legend from the border for "outlined" mode.
  --g-o-lgn-pd: 0.3437em; // # 5.5px
  // The value of the radius of the rounding of the border for "outlined" mode.
  // --gfi-o-br-rd: calc(var(--gfi-size)/10);

  // For "underline" mode.
  // The value of the radius of the rounding of the border for "underline" mode.
  --gfi-u-br-rd: calc(var(--gfi-size)/10) calc(var(--gfi-size)/10) 0 0;
  // Left padding of the label in a shrink position (in the top) for "underline" mode.

  // For "standard" mode.
  // Left padding of the label in a shrink position (in the top) for "standard" mode.
  --gfi-s-lbl-pd: 0px; // TODO #1

// // Left padding of the label in a shrink position (in the top).

// // Max width of the label in a shrink position (in the top).
// // --gfi-o-lbl-wd: calc(133% - 2.66*var(--lbl-pd-lf));
// // --gfi-u-lbl-wd: calc(133% - 2.66*var(--lbl-pd-lf));
// // --gfi-s-lbl-wd: 133%;
// // Max width of the label in the unshrink position (in the middle).
// // --gfi-o-lbl2-wd: calc(100% - var(--lbl-pd-lf) - var(--lbl-pd-lf));
// // --gfi-u-lbl2-wd: calc(100% - var(--lbl-pd-lf) - var(--lbl-pd-lf));
// // --gfi-s-lbl2-wd: calc(100% - var(--gfi-s-lbl-pd) - var(--gfi-s-lbl-pd));

  @include mxDisplayInlineFlex();
  @include mxFlexDirection(column);
  font-family: "Roboto","Helvetica","Arial",sans-serif;
  font-weight: 400;
  font-size: 1em;
  line-height: 1.4375em; // The value of the "line height" for the input element. // # 23px for font-size: 16px
  min-width: 0;
  padding: 0;
  margin: 0;
  border: 0;
  vertical-align: top;

  &[ext-o], &[ext-u] {
    border-radius: var(--br-rd);
  }
  section {
    border-radius: inherit;
  }
  // Section "Label".
  label { // outline: 1px dashed green;
    padding: 0;
    position: absolute;
    display: block;
    transform-origin: top left;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    left: 0;
    top: 0;
    -webkit-transition: color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,-webkit-transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,max-width 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,max-width 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    z-index: 1;
    pointer-events: none;
    &[shr], &[foc], &[fil] { // # --lbl-pd-lf: o:14px; u:12px; s:0px;
      max-width: var(--lbl-wd); // #  calc(133% - 2.66*(--lbl-pd-lf)) # o: calc(133% - 37.24px); u: calc(133% - 31.92px); s: calc(133% - 0px);
      @include mxTransformTranslateXYScale(var(--lbl-pd-lf), var(--lbl-trn-y), 0.75); // # (0px, -1.5px, 0.75) original
    }
    &:not([shr]):not([foc]):not([fil]) {
      max-width: var(--lbl2-wd); // # calc(100% - 2*(--lbl-pd-lf)) # o: calc(100% - 28px); u: calc(100% - 24px); s: calc(100% - 0px);
      @include mxTransformTranslateXYScale( var(--orn-lf, var(--lbl-pd-lf)) , var(--lbl2-trn-y) , 1); // #  --lbl-pd-lf = o:14px; u:12px; s:0px;
    }
  }
  // Color for "label".
   // The default color for the label. //:not(:hover)>.gfi-label:not(.gfi-error):not(.gfi-focused):not(.gfi-disabled)
  section:not(:hover)>label:not([err]):not([foc]):not([dis]) {
    color: var(--g-lbl-def-cl);
  } // The color of the label in an error state. //.gfi-label.gfi-error
  label[err] {
    color: var(--g-err-cl);
  } // The color of the label on mouse hover in an error state. //:hover>.gfi-label.gfi-error:not(.gfi-focused):not(.gfi-disabled)
  section:hover>label[err]:not([foc]):not([dis]) {
    color: var(--g-hov-err-cl);
  } // The color of the label on mouse hover. //:hover>.gfi-label:not(.gfi-error):not(.gfi-focused):not(.gfi-disabled)
  section:hover>label:not([err]):not([foc]):not([dis]) {
    color: var(--g-hov-cl);
  } // The color of the label when getting focus. //.gfi-label.gfi-focused:not(.gfi-error)
  label[foc]:not([err]) {
    color: var(--g-foc-cl);
  } // The color of the label in state is disabled. //.gfi-label.gfi-disabled:not(.gfi-error)
  label[dis]:not([err]) {
    color: var(--g-lbl-dis-cl);
  }

  // Section "Frame".
  div { // # outline: 1px dashed blueviolet;
    box-sizing: border-box;
    @include mxDisplayInlineFlex();    // # @include mxAlignItems(center);    // # @include mxAlignItems(baseline);
    flex-wrap: nowrap;
    position: relative;
    border-radius: inherit; // TODO !!
    &:not([dis]) {
      cursor: text;
    }
    &[dis] {
      cursor: default;
      color: var(--g-lbl-dis-cl); // The color in state is disabled for an input element.
    }
  }
  input, textarea { // outline: 1px dashed orange; // # TODO temp;
    line-height: inherit;
    align-self: baseline;
  }
  input[elem-pd-ver] {
    padding-top: var(--lbl-pd-tp);    // # o:16.5px; us:24.75px;
    padding-bottom: var(--lbl-pd-bt); // # o:16.5px; us: 8.25px;
  }
  textarea[elem-mr-ver] {
    margin-top: var(--lbl-pd-tp);     // # o:16.5px; us:24.75px;
    margin-bottom: var(--lbl-pd-bt);  // # o:16.5px; us: 8.25px;
  }

  // For "frame" underline and standard
  div[frm-br] {
    &:before {
      left: 0;
      bottom: 0;
      content: "\00a0";
      position: absolute;
      right: 0;
      -webkit-transition: border-bottom-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
      transition: border-bottom-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
      pointer-events: none;
      border-bottom-width: 1px;
      border-radius: inherit;
    }
    &:not([dis]):before {
      border-bottom-style: solid;
    }
    &[dis]:before {
      border-bottom-style: dotted;
    }
    &:hover:not([dis]):before {
      border-bottom-width: 2px;
    }
    &:after {
      left: 0;
      bottom: 0;
      content: "";
      position: absolute;
      right: 0;
      @include mxTransformScaleX(0);
      -webkit-transition: -webkit-transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
      transition: transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
      pointer-events: none;
      border-bottom-width: 2px;
      border-bottom-style: solid;
      border-radius: inherit;
    }
    &[foc]:after {
      @include mxTransformScaleX(1);
    }
  }
  // Border-bottom-color for "underline" and "standard" mode.
  div[frm-br] {
    // The default border bottom color. //.gfi-su-frm:not(:hover):not(.gfi-error):not(.gfi-focused):not(.gfi-disabled):before
    &:not(:hover):not([err]):not([foc]):not([dis]):before {
      border-bottom-color: var(--g-su-def-br-cl);
    } // The border bottom color in an error state. //.gfi-su-frm.gfi-error:before
    &[err]:before {
      border-bottom-color: var(--g-err-cl);
    } // The border bottom color in an error state. //.gfi-su-frm.gfi-error:after
    &[err]:after {
      border-bottom-color: var(--g-err-cl);
    } // The border bottom color on mouse hover in an error state. //.gfi-su-frm:hover.gfi-error:not(.gfi-focused):not(.gfi-disabled):before
    &:hover[err]:not([foc]):not([dis]):before {
      border-bottom-color: var(--g-hov-err-cl);
    } // The border bottom color on mouse hover. //.gfi-su-frm:hover:not(.gfi-error):not(.gfi-focused):not(.gfi-disabled):before
    &:hover:not([err]):not([foc]):not([dis]):before {
      border-bottom-color: var(--g-hov-cl);
    } // The border bottom color when getting focus. //.gfi-su-frm.gfi-focused:not(.gfi-error):after
    &[foc]:not([err]):after {
      border-bottom-color: var(--g-foc-cl);
    } // The border bottom color in state is disabled. //.gfi-su-frm.gfi-disabled:not(.gfi-error):before
    &[dis]:not([err]):before {
      border-bottom-color: var(--g-su-dis-br-cl);
    }
  }

  // underline
  div[frm-bg] {
    -webkit-transition: background-color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: background-color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
  }
  // Background-color for "underline" mode.
  div[frm-bg] {
    // The default background color. //.gfi-u-frm:not(:hover):not(.gfi-error):not(.gfi-focused):not(.gfi-disabled)
    &:not(:hover):not([err]):not([foc]):not([dis]) {
      background-color: var(--g-u-def-bg-cl);
    } // The background color in an error state. //.gfi-u-frm.gfi-error
    &[err] {
      background-color: var(--g-u-err-bg-cl);
    } // The background color on mouse hover in an error state. //.gfi-u-frm:hover.gfi-error:not(.gfi-focused):not(.gfi-disabled)
    &:hover[err]:not([foc]):not([dis]) {
      background-color: var(--g-u-hov-err-bg-cl);
    } // The background color on mouse hover. //.gfi-u-frm:hover:not(.gfi-error):not(.gfi-focused):not(.gfi-disabled)
    &:hover:not([err]):not([foc]):not([dis]) {
      background-color: var(--g-u-hov-bg-cl);
    } // The background color when getting focus. //.gfi-u-frm.gfi-focused:not(.gfi-error)
    &[foc]:not([err]) {
      background-color: var(--g-u-foc-bg-cl);
    } // The background color in state is disabled. //.gfi-u-frm.gfi-disabled:not(.gfi-error)
    &[dis]:not([err]) {
      background-color: var(--g-u-dis-bg-cl);
    }
  }

  // Section "Fieldset".
  fieldset {
    text-align: left;
    position: absolute;
    bottom: 0;
    right: 0;
    top: 0;
    left: 0;
    margin: 0;
    padding: 0px calc(var(--lbl-pd-lf) - var(--g-o-lgn-pd)); // (14px - 4,4px)=9,6px;
    pointer-events: none;
    border-radius: inherit;
    border-style: solid;
    overflow: hidden;
    min-width: 0%;
    box-sizing: inherit;
    &:not([foc]) {
      border-width: 1px;
    }
    &[foc] {
      border-width: 2px;
    }
  }
  // Border-color for "outlined" mode.
   // The default border color. //:not(:hover)>.gfi-fieldset:not(.gfi-error):not(.gfi-focused):not(.gfi-disabled)
  div:not(:hover)>fieldset:not([err]):not([foc]):not([dis]) {
    border-color: var(--g-o-def-br-cl);
  } // The border color in an error state. //.gfi-fieldset.gfi-error
  fieldset[err] {
    border-color: var(--g-err-cl);
  } // The border color on mouse hover in an error state. //:hover>.gfi-fieldset.gfi-error:not(.gfi-focused):not(.gfi-disabled)
  div:hover>fieldset[err]:not([foc]):not([dis]) {
    border-color: var(--g-hov-err-cl);
  } // The border color on mouse hover. //:hover>.gfi-fieldset:not(.gfi-error):not(.gfi-focused):not(.gfi-disabled)
  div:hover>fieldset:not([err]):not([foc]):not([dis]) {
    border-color: var(--g-hov-cl);
  } // The border color when getting focus. //.gfi-fieldset.gfi-focused:not(.gfi-error)
  fieldset[foc]:not([err]) {
    border-color: var(--g-foc-cl);
  } // The border color in state is disabled. //.gfi-fieldset.gfi-disabled:not(.gfi-error)
  fieldset[dis]:not([err]) {
    border-color: var(--g-lbl-dis-cl);
  }

  // Section "Legend".
  legend {
    float: unset;
    display: block;
    width: auto;
    height: 1px;
    font-size: 0.75em; // #!! 12px
    visibility: hidden;
    padding: 0;
    &:not([shr]):not([fil]):not([foc]) { // .gfi-legend:not(.gfi-shrink):not(.gfi-filled):not(.gfi-focused)
      max-width: 0.01px;
      -webkit-transition: max-width 50ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
      transition: max-width 50ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    }
    &[shr], &[fil], &[foc] { // .gfi-legend.gfi-shrink, .gfi-legend.gfi-filled, .gfi-legend.gfi-focused
      max-width: 100%;
      -webkit-transition: max-width 100ms cubic-bezier(0.0, 0, 0.2, 1) 50ms;
      transition: max-width 100ms cubic-bezier(0.0, 0, 0.2, 1) 50ms;
      &[ind] { // .gfi-lgn-indent
        padding: 0 var(--g-o-lgn-pd);
      }
    }
    &>span {
      display: inline-block;
      height: inherit;
    }
  }

  // Section "HelperText"
  p {
    // font-family: "Roboto","Helvetica","Arial",sans-serif; // #!!
    // font-weight: 400; // #!!
    min-height: 1.1875em;
    font-size: 0.75em; // #!! 12px
    line-height: 1.66; // #!!
    height: 1.66em;
    // #!! letter-spacing: 0.03333em; // #!!
    text-align: left;
    margin-top: 3px;
    margin-bottom: 0;
    margin-right: var(--lbl-pd-lf); // # o:14px; u:12px; s:0px;
    margin-left: var(--lbl-pd-lf); // # o:14px; u:12px; s:0px;
  }

  // Color for "helperText".
  // The default color for the helperText. //.gfi-helper-text:not(.gfi-error):not(.gfi-focused):not(.gfi-disabled)
  p:not([err]):not([foc]):not([dis]) {
    color: var(--g-lbl-def-cl);
  } // The color of the helperText in an error state. //.gfi-helper-text.gfi-error
  p[err] {
    color: var(--g-err-cl);
  } // The color of the helperText when getting focus. //.gfi-helper-text.gfi-focused:not(.gfi-error)
  p[foc]:not([err]) {
    color: var(--g-lbl-def-cl);
  } // The color of the helperText in state is disabled. //.gfi-helper-text.gfi-disabled:not(.gfi-error)
  p[dis]:not([err]) {
    color: var(--g-lbl-dis-cl);
  }

  // ** Additional settings **
  
  // Ornament "padding".
  .gfi-ornam-lf {
    max-height: inherit;
  }
  .gfi-ornam-rg {
    order: 1;
  }
  .gfi-ornam-lf:empty~.gfi-elem-pd-hor {
    padding-left: var(--lbl-pd-lf); // # o:14px; u:12px; s:0px;
  }
  .gfi-ornam-rg:empty~.gfi-elem-pd-hor {
    padding-right: var(--lbl-pd-lf); // # o:14px; u:12px; s:0px;
  }

  span[orn-lf="center"], span[orn-rg="center"] {
    align-self: center;
  }
  span[orn-lf="flex-start"], span[orn-rg="flex-start"] {
    align-self: flex-start;
  }
  span[orn-lf="flex-end"], span[orn-rg="flex-end"] {
    align-self: flex-end;
  }
  span[orn-lf="baseline"], span[orn-rg="baseline"] {
    align-self: baseline;
  }
  span[orn-lf="stretch"], span[orn-rg="stretch"] {
    align-self: stretch;
  }

  span[ext-o][orn-lf="default"], span[ext-o][orn-rg="default"] {
    align-self: center;
  }
  span[ext-u][orn-lf="default"] {
    align-self: flex-end;
  }
  span[ext-u][orn-rg="default"] {
    align-self: center;
  }
  span[ext-s][orn-lf="default"], span[ext-s][orn-rg="default"] {
    align-self: flex-end;
  }

  .gfi-u-frm .gfi-ornam-lf,
  .gfi-s-frm .gfi-ornam-lf,
  .gfi-s-frm .gfi-ornam-rg {
    .gfi-su-ornam {
      display: inline-block;
      margin-bottom: var(--lbl-pd-bt); // # 8.25px;
    }
  }
}
