/*# sourceURL=grn-frame-input.component.scss */

@import '../_styles/mx-align-items.scss';
@import '../_styles/mx-display-inline-flex.scss';
@import '../_styles/mx-flex-direction.scss';
@import '../_styles/mx-transform-scale-x-y.scss';
@import '../_styles/mx-transform-translate-x-y-scale-x-y.scss';
@import '../_styles/mx-transform-scale-x-y-translate-x-y.scss';


grn-frame-input {
  @include mxDisplayInlineFlex();
  @include mxFlexDirection(column);
  line-height: 1.4375em; // The value of the "line height" for the input element. (23px for font-size: 16px)
  min-width: 0;
  padding: 0;
  margin: 0;
  border: 0;
  vertical-align: top;
  width: 100%;

  // Small indentation of the legend from the border for "outlined" mode.
  --def-o-lgn-pd: 0.3em;
  // frameSize: 56px; font-size: 16px;
  &[ext-o] {
    --def-br-rd: 0.35em;
    --def-lbl-pd-tp: 1.03125em; // 16.5px
    --def-lbl-pd-bt: 1.03125em; // 16.5px
    --def-lbl-pd-lf: 0.875em; // 14px
    --def-lbl-pd-rg: 0.875em; // 14px
    --def-lbl-wd: 2.905em; // calc(133% - [1.66 * 2 * 0.875em])
    --def-lbl-trn-y: -0.53875em; // -8.62px
    --def-lbl2-trn-y: 1.03125em; // 16.5px
    }
  &[ext-u] {
    --def-br-rd: 0.35em 0.35em 0px 0px;
    --def-lbl-pd-tp: 1.546875em; // 24.75px
    --def-lbl-pd-bt: 0.515625em; // 8.25px
    --def-lbl-pd-lf: 0.75em; // 12px
    --def-lbl-pd-rg: 0.75em; // 12px
    --def-lbl-wd: 2.49em; // calc(133% - [1.66 * 2 * 0.75em])
    --def-lbl-trn-y: 0.379375em; // 6.07px
    --def-lbl2-trn-y: 1.03125em; // 16.5px
  }
  &[ext-s] {
    --def-lbl-pd-tp: 1.546875em; // 24.75px
    --def-lbl-pd-bt: 0.515625em; // 8.25px
    --def-lbl-pd-lf: 0;
    --def-lbl-pd-rg: 0;
    --def-lbl-wd: 0; // calc(133% - [1.66 * 2 * 0])
    --def-lbl-trn-y: 0.32em; // 5.12px
    --def-lbl2-trn-y: 1.546875em; // 24.75px
  }

  border-radius: var(--gfi-br-rd, var(--br-rd, var(--def-br-rd)));

  &>div {
    [elem-pd-ver], [elem-mr-ver] {
      line-height: inherit;
      align-self: baseline;
    }
    [elem-pd-ver] {
      padding-top: var(--gfi-lbl-pd-tp, var(--lbl-pd-tp, var(--def-lbl-pd-tp)));
      padding-bottom: var(--gfi-lbl-pd-bt, var(--lbl-pd-bt, var(--def-lbl-pd-bt)));
    }
    [elem-mr-ver] {
      margin-top: var(--gfi-lbl-pd-tp, var(--lbl-pd-tp, var(--def-lbl-pd-tp)));
      margin-bottom: var(--gfi-lbl-pd-bt, var(--lbl-pd-bt, var(--def-lbl-pd-bt)));
    }
  }

  // Section "Label".
  label {
    padding: 0;
    position: absolute;
    display: block;
    transform-origin: top left;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    left: 0;
    top: 0;
    -webkit-transition: color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,-webkit-transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,max-width 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,max-width 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    z-index: 1;
    pointer-events: none;
  }
  &[shr], &[foc], &[fil] {
    label {
      max-width: calc(133% - var(--gfi-lbl-wd, var(--lbl-wd, var(--def-lbl-wd))));
      @include mxTransform_TranslateXY_ScaleXY(
        var(--gfi-lbl-pd-lf, var(--lbl-pd-lf, var(--def-lbl-pd-lf))), // $translateX
        var(--gfi-lbl-trn-y, var(--lbl-trn-y, var(--def-lbl-trn-y))), // $translateY
        0.75, // $scaleX
        0.75  // $scaleY
      );
    }
  }
  &:not([shr]):not([foc]):not([fil]) label {
    max-width: calc(100%
    - var(--orn-lbl-pd-lf, var(--gfi-lbl-pd-lf, var(--lbl-pd-lf, var(--def-lbl-pd-lf))))
    - var(--orn-lbl-pd-rg, var(--gfi-lbl-pd-rg, var(--lbl-pd-rg, var(--def-lbl-pd-rg))))
    );
    @include mxTransform_TranslateXY_ScaleXY(
      var(--orn-lbl-pd-lf, var(--gfi-lbl-pd-lf, var(--lbl-pd-lf, var(--def-lbl-pd-lf)))), // $translateX
      var(--gfi-lbl2-trn-y, var(--lbl2-trn-y, var(--def-lbl2-trn-y))), // $translateY
      1,  // $scaleX
      1   // $scaleY
    );
  }

  // Color for "label".
  // The state without mouse hover, error, focused and disabled.
  &:not(:hover):not([err]):not([foc]):not([dis]) label {
    color: var(--gfi-lbl-def-cl);
  }
  // The state with mouse hover but without error, focused and disabled.
  &:hover:not([err]):not([foc]):not([dis]) label {
    color: var(--gfi-hov-cl);
  }
  // The state with error.
  &[err]:not([dis]) label {
    color: var(--gfi-err-cl);
  }
  // The state with mouse hover and error but without focused and disabled.
  &:hover[err]:not([foc]):not([dis]) label {
    color: var(--gfi-hov-err-cl);
  }
  // The state with focused but without error.
  &[foc]:not([err]) label {
    color: var(--gfi-foc-cl);
  }
  // The state with disabled but without error.
  &[dis] label {
    color: var(--gfi-dis-cl);
  }

  // Section "Frame".
  &>div {
    box-sizing: border-box;
    @include mxDisplayInlineFlex();
    flex-wrap: nowrap;
    position: relative;
    border-radius: inherit;
    width: 100%;
  }
  &[dis]>div {
    color: var(--gfi-dis-cl); // The color in state is disabled for an input element.
  }

  // The bottom border frame for the "underline" and "standard" mode.

  // Fragment before the input field for the "underline" and "standard" mode.
  &[frm-su]>div:before {
    border-bottom: 1px solid var(--gfi-su-def-br-cl);
    border-radius: inherit;
    left: 0;
    bottom: 0;
    content: "\00a0";
    position: absolute;
    right: 0;
    -webkit-transition: border-bottom-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    transition: border-bottom-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    pointer-events: none;
  }
  &[frm-su][dis]>div:before {
    border-bottom-style: dotted;
  }

  // Fragment after the input field for the "underline" and "standard" mode.
  &[frm-su]>div:after {
    border-bottom: 2px solid var(--gfi-foc-cl);
    border-radius: inherit;
    left: 0;
    bottom: 0;
    content: "";
    position: absolute;
    right: 0;
    @include mxTransform_ScaleXY(
      0, // $scaleX
      1  // $scaleY
    );
    -webkit-transition: -webkit-transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    pointer-events: none;
  }
  &[frm-su][err]>div:after {
    border-bottom-color: var(--gfi-err-cl);
  }
  // The effect on gaining input focus is "increase the length of the bottom border from 0 to 100%."
  // Effect on loss of input focus "reducing the length of the lower border from 100% to 0".
  &[frm-su][foc]>div:after {
    @include mxTransform_ScaleXY_TranslateXY(
      1, // $scaleX
      1, // $scaleY
      0, // $translateX
      0  // $translateY
    );
  }

  // Border-bottom-color for "underline" and "standard" mode.
  &[frm-su] {
    // The state with mouse hover but without error, focused and disabled.
    &:hover:not([err]):not([foc]):not([dis])>div:before {
      border-bottom-color: var(--gfi-hov-cl);
    }
    // The state with error.
    &[err]:not([dis])>div:before {
      border-bottom-color: var(--gfi-err-cl);
    }
    // The state with mouse hover and error but without focused and disabled.
    &:hover[err]:not([foc]):not([dis])>div:before {
      border-bottom-color: var(--gfi-hov-err-cl);
    }
    // The state with disabled but without error.
    &[dis]>div:before {
      border-bottom-color: var(--gfi-dis-cl);
    }
  }
  &[frm-su][ext-s] {
    // The state with mouse hover but without error, focused and disabled.
    &:hover:not([foc]):not([dis])>div:before {
      border-bottom-width: 2px;
    }
  }

  // Background color animation for "underlined" mode.
  &[bgr-u]>div {
    -webkit-transition: background-color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: background-color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
  }
  // Background-color for "underline" mode.
  &[bgr-u] {
    // The state without mouse hover, error, focused and disabled.
    &:not(:hover):not([err]):not([foc]):not([dis])>div {
      background-color: var(--gfi-u-def-bg-cl);
    }
    // The state with mouse hover but without error, focused and disabled.
    &:hover:not([err]):not([foc]):not([dis])>div {
      background-color: var(--gfi-u-hov-bg-cl);
    }
    // The state with error.
    &:not([dis])[err]>div {
      background-color: var(--gfi-u-err-bg-cl);
    }
    // The state with mouse hover and error but without focused and disabled.
    &:hover[err]:not([foc]):not([dis])>div {
      background-color: var(--gfi-u-hov-err-bg-cl);
    }
    // The state with focused but without error.
    &[foc]:not([err])>div {
      background-color: var(--gfi-u-foc-bg-cl);
    }
    // The state with disabled but without error.
    &[dis]>div {
      background-color: var(--gfi-u-dis-bg-cl);
    }
  }

  // Section "Fieldset".
  fieldset {
    text-align: left;
    position: absolute;
    bottom: 0;
    right: 0;
    top: 0;
    left: 0;
    margin: 0;
    padding: 0px calc(var(--gfi-lbl-pd-lf, var(--lbl-pd-lf, var(--def-lbl-pd-lf))) - var(--gfi-o-lgn-pd, var(--def-o-lgn-pd)));
    pointer-events: none;
    border-radius: inherit;
    border: 1px solid var(--gfi-o-def-br-cl);
    overflow: hidden;
    min-width: 0%;
    box-sizing: inherit;
  }
  &[foc] fieldset {
    border-width: 2px;
    padding-left: calc(var(--gfi-lbl-pd-lf, var(--lbl-pd-lf, var(--def-lbl-pd-lf))) - var(--gfi-o-lgn-pd, var(--def-o-lgn-pd)) - 1px);
  }

  // Border-color for "outlined" mode.
  // The state with mouse hover but without error, focused and disabled.
  &:hover:not([err]):not([foc]):not([dis]) fieldset {
    border-color: var(--gfi-hov-cl);
  }
  // The state with error.
  &[err]:not([dis]) fieldset {
    border-color: var(--gfi-err-cl);
  }
  // The state with mouse hover and error but without focused and disabled.
  &:hover[err]:not([foc]):not([dis]) fieldset {
    border-color: var(--gfi-hov-err-cl);
  }
  // The state with focused but without error.
  &[foc]:not([err]) fieldset {
    border-color: var(--gfi-foc-cl);
  }
  // The radius value must be an integer, otherwise the frame in the "dotted" style is poorly drawn.
  // // The state with disabled but without error.
  // &[dis] fieldset {
  //   border-color: var(--gfi-dis-cl);
  //   border-style: dotted;
  // }

  // Section "Legend".
  legend {
    float: unset;
    display: block;
    width: auto;
    height: 1px;
    visibility: hidden;
    padding: 0;
    &>span {
      display: inline-block;
      height: inherit;
      font-size: 0.75em;
    }
  }
  &[shr], &[foc], &[fil] {
    legend {
      max-width: 100%;
      -webkit-transition: max-width 100ms cubic-bezier(0.0, 0, 0.2, 1) 50ms;
      transition: max-width 100ms cubic-bezier(0.0, 0, 0.2, 1) 50ms;
    }
    &[ind] legend {
      padding: 0 calc(var(--gfi-o-lgn-pd, var(--def-o-lgn-pd)) - 1px);
    }
  }
  &:not([shr]):not([fil]):not([foc]) legend {
    max-width: 0.01px;
    -webkit-transition: max-width 50ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: max-width 50ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
  }
  
  // ** Additional settings **
  
  // Ornament "padding".
  .gfi-ornam-lf {
    max-height: inherit;
  }
  .gfi-ornam-rg {
    max-height: inherit;
    order: 1;
  }
  .gfi-ornam-lf:empty~.gfi-elem-pd-hor {
    padding-left: var(--gfi-lbl-pd-lf, var(--lbl-pd-lf, var(--def-lbl-pd-lf)));
  }
  .gfi-ornam-rg:empty~.gfi-elem-pd-hor {
    padding-right: var(--gfi-lbl-pd-rg, var(--lbl-pd-rg, var(--def-lbl-pd-rg)));
  }

  span[orn-lf="center"], span[orn-rg="center"] {
    align-self: center;
  }
  span[orn-lf="flex-start"], span[orn-rg="flex-start"] {
    align-self: flex-start;
  }
  span[orn-lf="flex-end"], span[orn-rg="flex-end"] {
    align-self: flex-end;
  }
  span[orn-lf="baseline"], span[orn-rg="baseline"] {
    align-self: baseline;
  }
  span[orn-lf="stretch"], span[orn-rg="stretch"] {
    align-self: stretch;
  }

  &[ext-o]>div>span[orn-lf="default"],
  &[ext-o]>div>span[orn-rg="default"] {
    align-self: center;
  }
  &[ext-u]>div>span[orn-lf="default"] {
    align-self: baseline;
  }
  &[ext-u]>div>span[orn-rg="default"] {
    align-self: center;
  }
  &[ext-s]>div>span[orn-lf="default"],
  &[ext-s]>div>span[orn-rg="default"] {
    align-self: baseline;
  }

  &[ext-u]>div>span[orn-lf],
  &[ext-s]>div>span[orn-lf], 
  &[ext-s]>div>span[orn-rg] {
    &>.gfi-su-ornam {
      display: inline-block;
      margin-bottom: var(--gfi-lbl-pd-bt, var(--lbl-pd-bt, var(--def-lbl-pd-bt)));
    }
  }
}
