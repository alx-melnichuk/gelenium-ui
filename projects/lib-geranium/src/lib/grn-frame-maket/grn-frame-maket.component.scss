/*# sourceURL=grn-frame-input2.component.scss */

@import '../_styles/mx-align-items.scss';
@import '../_styles/mx-display-inline-flex.scss';
@import '../_styles/mx-flex-direction.scss';
@import '../_styles/mx-transform-scale-x.scss';
@import '../_styles/mx-transform-translate-x-y-scale.scss';


grn-frame-maket { // outline: 1px dashed crimson;
  @include mxDisplayInlineFlex();
  @include mxFlexDirection(column);
  line-height: 1.4375em; // The value of the "line height" for the input element. (23px for font-size: 16px)
  min-width: 0;
  padding: 0;
  margin: 0;
  border: 0;
  vertical-align: top;
  &[wdFull] {
    width: 100%;
  }
  border-radius: var(--gfi-br-rd, var(--s-br-rd));

  // Section "Label".
  label {
    padding: 0;
    position: absolute;
    display: block;
    transform-origin: top left;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    left: 0;
    top: 0;
    -webkit-transition: color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,-webkit-transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,max-width 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,max-width 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    z-index: 1;
    pointer-events: none;
  }
  &[shr], &[foc], &[fil] {
    label {
      max-width: var(--lbl-wd);
      @include mxTransformTranslateXYScale(var(--gfi-lbl-pd-lf, var(--s-lbl-pd-lf, 1.1428em)), var(--lbl-trn-y), 0.75);
    }
  }
  &:not([shr]):not([foc]):not([fil]) label {
    max-width: var(--lbl2-wd);
    @include mxTransformTranslateXYScale( var(--orn-lf, var(--gfi-lbl-pd-lf, var(--s-lbl-pd-lf, 1.1428em))) , var(--lbl2-trn-y) , 1);
  }

  // Color for "label".
  // The state without mouse hover, error, focused and disabled.
  &:not(:hover):not([err]):not([foc]):not([dis]) label {
    color: var(--gfi-lbl-def-cl);
  }
  // The state with mouse hover but without error, focused and disabled.
  &:hover:not([err]):not([foc]):not([dis]) label {
    color: var(--gfi-hov-cl);
  }
  // The state with error.
  &[err] label {
    color: var(--gfi-err-cl);
  }
  // The state with mouse hover and error but without focused and disabled.
  &:hover[err]:not([foc]):not([dis]) label {
    color: var(--gfi-hov-err-cl);
  }
  // The state with focused but without error.
  &[foc]:not([err]) label {
    color: var(--gfi-foc-cl);
  }
  // The state with disabled but without error.
  &[dis]:not([err]) label {
    color: var(--gfi-dis-cl);
  }

  // Section "Frame".
  div[frm] {
    box-sizing: border-box;
    @include mxDisplayInlineFlex();
    flex-wrap: nowrap;
    position: relative;
    border-radius: inherit;
    width: 100%;
  }
  &[dis]:not([err]) div[frm] {
    color: var(--gfi-dis-cl); // The color in state is disabled for an input element.
  }

  input, textarea {
    line-height: inherit;
    align-self: baseline;
  }
  input[elem-pd-ver] {
    padding-top: var(--gfi-lbl-pd-tp, var(--s-lbl-pd-tp, 0.4821em));
    padding-bottom: var(--gfi-lbl-pd-bt, var(--s-lbl-pd-bt, 0.4821em));
  }
  textarea[elem-mr-ver] {
    margin-top: var(--gfi-lbl-pd-tp, var(--s-lbl-pd-tp, 0.4821em));
    margin-bottom: var(--gfi-lbl-pd-bt, var(--s-lbl-pd-bt, 0.4821em));
}

  // For "frame" underline and standard
  &[frm-br] div[frm] {
    &:before {
      left: 0;
      bottom: 0;
      content: "\00a0";
      position: absolute;
      right: 0;
      -webkit-transition: border-bottom-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
      transition: border-bottom-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
      pointer-events: none;
      border-bottom-width: 1px;
      border-radius: inherit;
    }
    &:after {
      left: 0;
      bottom: 0;
      content: "";
      position: absolute;
      right: 0;
      @include mxTransformScaleX(0);
      -webkit-transition: -webkit-transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
      transition: transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
      pointer-events: none;
      border-bottom-width: 2px;
      border-bottom-style: solid;
      border-radius: inherit;
    }
  }
  &[frm-br] {
    &:not([dis]) div[frm]:before {
      border-bottom-style: solid;
    }
    &[dis] div[frm]:before {
      border-bottom-style: dotted;
    }
    &:hover:not([dis]) div[frm]:before {
      border-bottom-width: 2px;
    }
    &[foc] div[frm]:after {
      @include mxTransformScaleX(1);
    }
  }

  // Border-bottom-color for "underline" and "standard" mode.
  &[frm-br] {
    // The state without mouse hover, error, focused and disabled.
    &:not(:hover):not([err]):not([foc]):not([dis]) div[frm]:before {
      border-bottom-color: var(--gfi-su-def-br-cl);
    }
    // The state with mouse hover but without error, focused and disabled.
    &:hover:not([err]):not([foc]):not([dis]) div[frm]:before {
      border-bottom-color: var(--gfi-hov-cl);
    }
    // The state with error.
    &[err] div[frm]:before {
      border-bottom-color: var(--gfi-err-cl);
    }
    &[err] div[frm]:after {
      border-bottom-color: var(--gfi-err-cl);
    }
    // The state with mouse hover and error but without focused and disabled.
    &:hover[err]:not([foc]):not([dis]) div[frm]:before {
      border-bottom-color: var(--gfi-hov-err-cl);
    }
    // The state with focused but without error.
    &[foc]:not([err]) div[frm]:after {
      border-bottom-color: var(--gfi-foc-cl);
    }
    // The state with disabled but without error.
    &[dis]:not([err]) div[frm]:before {
      border-bottom-color: var(--gfi-dis-cl);
    }
  }

  // underline
  &[ext-u] div[frm] {
    -webkit-transition: background-color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: background-color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
  }
  // Background-color for "underline" mode.
  &[ext-u] {
    // The state without mouse hover, error, focused and disabled.
    &:not(:hover):not([err]):not([foc]):not([dis]) div[frm] {
      background-color: var(--gfi-u-def-bg-cl);
    }
    // The state with mouse hover but without error, focused and disabled.
    &:hover:not([err]):not([foc]):not([dis]) div[frm] {
      background-color: var(--gfi-u-hov-bg-cl);
    }
    // The state with error.
    &[err] div[frm] {
      background-color: var(--gfi-u-err-bg-cl);
    }
    // The state with mouse hover and error but without focused and disabled.
    &:hover[err]:not([foc]):not([dis]) div[frm] {
      background-color: var(--gfi-u-hov-err-bg-cl);
    }
    // The state with focused but without error.
    &[foc]:not([err]) div[frm] {
      background-color: var(--gfi-u-foc-bg-cl);
    }
    // The state with disabled but without error.
    &[dis]:not([err]) div[frm] {
      background-color: var(--gfi-u-dis-bg-cl);
    }
  }

  // Section "Fieldset".
  fieldset {
    text-align: left;
    position: absolute;
    bottom: 0;
    right: 0;
    top: 0;
    left: 0;
    margin: 0;
    padding: 0px calc(var(--gfi-lbl-pd-lf, var(--s-lbl-pd-lf, 1.1428em)) - var(--gfi-o-lgn-pd));
    pointer-events: none;
    border-radius: inherit;
    border-style: solid;
    overflow: hidden;
    min-width: 0%;
    box-sizing: inherit;
  }
  &:not([foc]) fieldset {
    border-width: 1px;
  }
  &[foc] fieldset {
    border-width: 2px;
    padding-left: calc(var(--gfi-lbl-pd-lf, var(--s-lbl-pd-lf, 1.1428em)) - var(--gfi-o-lgn-pd) - 1px);
  }
  // Border-color for "outlined" mode.
  // The state without mouse hover, error, focused and disabled.
  &:not(:hover):not([err]):not([foc]):not([dis]) fieldset {
    border-color: var(--gfi-o-def-br-cl);
  }
  // The state with mouse hover but without error, focused and disabled.
  &:hover:not([err]):not([foc]):not([dis]) fieldset {
    border-color: var(--gfi-hov-cl);
  }
  // The state with error.
  &[err] fieldset {
    border-color: var(--gfi-err-cl);
  }
  // The state with mouse hover and error but without focused and disabled.
  &:hover[err]:not([foc]):not([dis]) fieldset {
    border-color: var(--gfi-hov-err-cl);
  }
  // The state with focused but without error.
  &[foc]:not([err]) fieldset {
    border-color: var(--gfi-foc-cl);
  }
  // The state with disabled but without error.
  &[dis]:not([err]) fieldset {
    border-color: var(--gfi-dis-cl);
  }

  // Section "Legend".
  legend {
    float: unset;
    display: block;
    width: auto;
    height: 1px;
    visibility: hidden;
    padding: 0;
    &>span {
      display: inline-block;
      height: inherit;
      font-size: 0.75em;
    }
  }
  &[shr], &[foc], &[fil] {
    legend {
      max-width: 100%;
      -webkit-transition: max-width 100ms cubic-bezier(0.0, 0, 0.2, 1) 50ms;
      transition: max-width 100ms cubic-bezier(0.0, 0, 0.2, 1) 50ms;
    }
    &[ind] legend {
      padding: 0 calc(var(--gfi-o-lgn-pd) - 1px);
    }
  }
  &:not([shr]):not([fil]):not([foc]) legend {
    max-width: 0.01px;
    -webkit-transition: max-width 50ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: max-width 50ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
  }
  
  // ** Additional settings **
  
  // Ornament "padding".
  .gfi-ornam-lf {
    max-height: inherit;
  }
  .gfi-ornam-rg {
    order: 1;
  }
  .gfi-ornam-lf:empty~.gfi-elem-pd-hor {
    padding-left: var(--gfi-lbl-pd-lf, var(--s-lbl-pd-lf, 1.1428em));
  }
  .gfi-ornam-rg:empty~.gfi-elem-pd-hor {
    padding-right: var(--gfi-lbl-pd-rg, var(--s-lbl-pd-rg, 1.1428em));  }

  span[orn-lf="center"], span[orn-rg="center"] {
    align-self: center;
  }
  span[orn-lf="flex-start"], span[orn-rg="flex-start"] {
    align-self: flex-start;
  }
  span[orn-lf="flex-end"], span[orn-rg="flex-end"] {
    align-self: flex-end;
  }
  span[orn-lf="baseline"], span[orn-rg="baseline"] {
    align-self: baseline;
  }
  span[orn-lf="stretch"], span[orn-rg="stretch"] {
    align-self: stretch;
  }

  &[ext-o] div[frm]>span[orn-lf="default"],
  &[ext-o] div[frm]span[orn-rg="default"] {
    align-self: center;
  }
  &[ext-u] div[frm]span[orn-lf="default"] {
    align-self: baseline;
  }
  &[ext-u] div[frm]span[orn-rg="default"] {
    align-self: center;
  }
  &[ext-s] div[frm]span[orn-lf="default"],
  &[ext-s] div[frm]span[orn-rg="default"] {
    align-self: baseline;
  }

  &[ext-u] div[frm]span[orn-lf],
  &[ext-s] div[frm]span[orn-lf], 
  &[ext-s] div[frm]span[orn-rg] {
    &>.gfi-su-ornam {
      display: inline-block;
      margin-bottom: var(--lbl-pd-bt);
    }
  }
}
