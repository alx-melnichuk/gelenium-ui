/*# sourceURL=gln-frame.component.scss */

@import '../_styles/mx-align-items.scss';
@import '../_styles/mx-display-inline-flex.scss';
@import '../_styles/mx-flex-direction.scss';
@import '../_styles/mx-transform-scale-x-y.scss';
@import '../_styles/mx-transform-translate-x-y-scale-x-y.scss';
@import '../_styles/mx-transform-scale-x-y-translate-x-y.scss';


gln-frame {
  @include mxDisplayInlineFlex();
  @include mxFlexDirection(column);
  line-height: 1.4375em; // The value of the "line height" for the input element. (23px for font-size: 16px)
  min-width: 0;
  padding: 0;
  margin: 0;
  border: 0;
  vertical-align: top;
  width: 100%;

  // Small indentation of the legend from the border for "outlined" mode.
  --def-o-lgn-pd: 0.3em;
  // frameSize: 56px; font-size: 16px;
  &[ext-o] {
    --def-br-rd: 0.35em;
    --def-lbl-pd-tp: 1.03125em; // 16.5px
    --def-lbl-pd-bt: 1.03125em; // 16.5px
    --def-lbl-pd-lf: 0.875em; // 14px
    --def-lbl-pd-rg: 0.875em; // 14px
    --def-lbl-wd: 2.905em; // calc(133% - [1.66 * 2 * 0.875em])
    --def-lbl-trn-y: -0.53875em; // -8.62px
    --def-lbl2-trn-y: 1.03125em; // 16.5px
    }
  &[ext-u] {
    --def-br-rd: 0.35em 0.35em 0px 0px;
    --def-lbl-pd-tp: 1.546875em; // 24.75px
    --def-lbl-pd-bt: 0.515625em; // 8.25px
    --def-lbl-pd-lf: 0.75em; // 12px
    --def-lbl-pd-rg: 0.75em; // 12px
    --def-lbl-wd: 2.49em; // calc(133% - [1.66 * 2 * 0.75em])
    --def-lbl-trn-y: 0.379375em; // 6.07px
    --def-lbl2-trn-y: 1.03125em; // 16.5px
  }
  &[ext-s] {
    --def-lbl-pd-tp: 1.546875em; // 24.75px
    --def-lbl-pd-bt: 0.515625em; // 8.25px
    --def-lbl-pd-lf: 0;
    --def-lbl-pd-rg: 0;
    --def-lbl-wd: 0; // calc(133% - [1.66 * 2 * 0])
    --def-lbl-trn-y: 0.32em; // 5.12px
    --def-lbl2-trn-y: 1.546875em; // 24.75px
  }

  border-radius: var(--gf-br-rd, var(--br-rd, var(--def-br-rd)));

  // ** Section "Label". **
  label {
    padding: 0;
    position: absolute;
    display: block;
    transform-origin: top left;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    left: 0;
    top: 0;
    -webkit-transition: color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,-webkit-transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,max-width 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,max-width 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    z-index: 1;
    pointer-events: none;
  }
  &[shr], &:focus-within, &[fil] {
    label {
      max-width: calc(133% - var(--gf-lbl-wd, var(--lbl-wd, var(--def-lbl-wd))));
      @include mxTransform_TranslateXY_ScaleXY(
        var(--gf-lbl-pd-lf, var(--lbl-pd-lf, var(--def-lbl-pd-lf))), // $translateX
        var(--gf-lbl-trn-y, var(--lbl-trn-y, var(--def-lbl-trn-y))), // $translateY
        0.75, // $scaleX
        0.75  // $scaleY
      );
    }
  }
  &:not([shr]):not(:focus-within):not([fil]) label {
    max-width: calc(100%
    - var(--orn-lbl-pd-lf, var(--gf-lbl-pd-lf, var(--lbl-pd-lf, var(--def-lbl-pd-lf))))
    - var(--orn-lbl-pd-rg, var(--gf-lbl-pd-rg, var(--lbl-pd-rg, var(--def-lbl-pd-rg))))
    );
    @include mxTransform_TranslateXY_ScaleXY(
      var(--orn-lbl-pd-lf, var(--gf-lbl-pd-lf, var(--lbl-pd-lf, var(--def-lbl-pd-lf)))), // $translateX
      var(--gf-lbl2-trn-y, var(--lbl2-trn-y, var(--def-lbl2-trn-y))), // $translateY
      1,  // $scaleX
      1   // $scaleY
    );
  }
  // ** Section: Color "label". **
  &:not([dis]) {
    &:not([err]) {
      // The state without disabled, error, hover, focused.
      &:not(:hover):not(:focus-within)>label {
        color: var(--gf-def-lb-cl, var(--gf-def-cl1));
      } // The state without disabled, error, focused and with hover.
      &:hover:not(:focus-within)>label {
        color: var(--gf-hov-lb-cl, var(--gf-hov-cl));
      } // The state without disabled, error and with focused.
      &:focus-within>label {
        color: var(--gf-foc-lb-cl, var(--gf-foc-cl));
      }
    }
    &[err] {
      // The state without disabled, hover, focused and error.
      &:not(:hover):not(:focus-within)>label {
        color: var(--gf-err-lb-cl, var(--gf-err-cl));
      } // The state without disabled, focused and error, hover.
      &:hover:not(:focus-within)>label {
        color: var(--gf-hov-err-lb-cl, var(--gf-hov-err-cl));
      } // The state without disabled and error, focused.
      &:focus-within>label {
        color: var(--gf-foc-err-lb-cl, var(--gf-err-cl));
      }
    }
  }
  // The state with disabled.
  &[dis]>label {
    color: var(--gf-dis-lb-cl, var(--gf-dis-cl));
  }


  // ** Section "div.gf-frame". **
  &>div {
    box-sizing: border-box;
    @include mxDisplayInlineFlex();
    flex-wrap: nowrap;
    position: relative;
    border-radius: inherit;
    width: 100%;
  }
  &[dis]>div {
    color: var(--gf-dis-cl); // The color in state is disabled for an input element.
  }
  

  // ** Section: Background-Color "div.gf-frame" for "Underline" mode. **
  &>[dcr-bg] {
    -webkit-transition: background-color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: background-color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
  }
  &:not([dis]) {
    &:not([err]) {
      // The state without disabled, error, hover, focused.
      &:not(:hover):not(:focus-within)>[dcr-bg] {
        background-color: var(--gf-def-bg-cl, var(--gf-def2-cl));
      } // The state without disabled, error, focused and with hover.
      &:hover:not(:focus-within)>[dcr-bg] {
        background-color: var(--gf-hov-bg-cl, var(--gf-hov2-cl));
      } // The state without disabled, error and with focused.
      &:focus-within>[dcr-bg] {
        background-color: var(--gf-foc-bg-cl, var(--gf-foc2-cl));
      }
    }
    &[err] {
      // The state without disabled, hover, focused and error.
      &:not(:hover):not(:focus-within)>[dcr-bg] {
        background-color: var(--gf-err-bg-cl, var(--gf-err2-cl));
      } // The state without disabled, focused and error, hover.
      &:hover:not(:focus-within)>[dcr-bg] {
        background-color: var(--gf-hov-err-bg-cl, var(--gf-hov-err2-cl));
      } // The state without disabled and error, focused.
      &:focus-within>[dcr-bg] {
        background-color: var(--gf-foc-err-bg-cl, var(--gf-foc-err2-cl));
      }
    }
  }
  // The state with disabled.
  &[dis]>[dcr-bg] {
    background-color: var(--gf-dis-bg-cl, var(--gf-dis2-cl));
  }


  // ** Section "div.gf-frame" for "Outlined" and "Standard" mode. **
  &>[dcr-bb] {
    &:before {
      border-bottom-width: 1px;
      border-bottom-style: solid;
      border-radius: inherit;
      left: 0;
      bottom: 0;
      content: "\00a0";
      position: absolute;
      right: 0;
      -webkit-transition: border-bottom-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
      transition: border-bottom-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
      pointer-events: none;
    }
    &:after {
      border-bottom-width: 2px;
      border-bottom-style: solid;
      border-radius: inherit;
      left: 0;
      bottom: 0;
      content: "";
      position: absolute;
      right: 0;
      @include mxTransform_ScaleXY(
        0, // $scaleX
        1  // $scaleY
      );
      -webkit-transition: -webkit-transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
      transition: transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
      pointer-events: none;
    }
  }
  &[dis]>div[dcr-bb]:before {
    border-bottom-style: dotted;
  }
  &[ext-s]:not([dis]):hover:not(:focus-within)>div[dcr-bb]:before {
    border-bottom-width: 2px;
  }
  // The effect on gaining input focus is "increase the length of the bottom border from 0 to 100%."
  // Effect on loss of input focus "reducing the length of the lower border from 100% to 0".
  &:not([dis]):focus-within>div[dcr-bb]:after {
    @include mxTransform_ScaleXY_TranslateXY(
      1, // $scaleX
      1, // $scaleY
      0, // $translateX
      0  // $translateY
    );
  }
  // Border-Bottom-Color "div.gf-frame" for "Outlined" and "Standard" mode.
  &:not([dis]) {
    &:not([err]) {
      // The state without disabled, error, hover, focused.
      &:not(:hover):not(:focus-within)>[dcr-bb]:before {
        border-bottom-color: var(--gf-def-brb-bf, var(--gf-def-bg-cl2));
      } // The state without disabled, error and with hover.
      &:hover>[dcr-bb]:before {
        border-bottom-color: var(--gf-hov-brb-bf, var(--gf-hov-cl));
      }
    }
    &[err] {
      // The state without disabled, hover, focused and error.
      &:not(:hover):not(:focus-within)>[dcr-bb]:before {
        border-bottom-color: var(--gf-err-brb-bf, var(--gf-err-cl));
      } // The state without disabled, focused and error, hover.
      &:hover:not(:focus-within)>[dcr-bb]:before {
        border-bottom-color: var(--gf-hov-err-brb-bf, var(--gf-hov-err-cl));
      }
    }
  }
  &:not([dis]) {
    // The state without disabled, error and focused.
    &:not([err])>[dcr-bb]:after {
      border-bottom-color: var(--gf-foc-brb-af, var(--gf-foc-cl));
    } // The state without disabled and error, focused.
    &[err]>[dcr-bb]:after {
      border-bottom-color: var(--gf-err-brb-af, var(--gf-err-cl));
    }
  } // The state with disabled.
  &[dis]>[dcr-bb]:before {
    border-bottom-color: var(--gf-dis-brb-bf, var(--gf-dis-cl));
  }


  // ** Section "Fieldset" for "Outlined" mode. **
  fieldset {
    text-align: left;
    position: absolute;
    bottom: 0;
    right: 0;
    top: 0;
    left: 0;
    margin: 0;
    padding: 0px calc(var(--gf-lbl-pd-lf, var(--lbl-pd-lf, var(--def-lbl-pd-lf))) - var(--gf-o-lgn-pd, var(--def-o-lgn-pd)));
    pointer-events: none;
    border-radius: inherit;
    border-width: 1px;
    border-style: solid;
    overflow: hidden;
    min-width: 0%;
    box-sizing: inherit;
  }
  // For "outlined" mode. With input focus, increase the frame to 2 pixels.
  &:not([dis]):focus-within fieldset {
    border-width: 2px;
    padding-left: calc(var(--gf-lbl-pd-lf, var(--lbl-pd-lf, var(--def-lbl-pd-lf))) - var(--gf-o-lgn-pd, var(--def-o-lgn-pd)) - 1px);
  }
  /* The radius value must be an integer, otherwise the frame in the "dotted" style is poorly drawn.
  // The state with disabled but without error.
  &[dis] fieldset {
    border-color: var(--gf-dis-cl);
    border-style: dotted;
  }*/
  // ** Section: Border-Color "div.gf-frame fieldset" for "Outlined" mode. **
  &:not([dis]) {
    &:not([err]) {
      // The state without disabled, error, hover, focused.
      &:not(:hover):not(:focus-within) [dcr-br] {
        border-color: var(--gf-def-br-cl, var(--gf-def-cl2));
      } // The state without disabled, error, focused and with hover.
      &:hover:not(:focus-within) [dcr-br] {
        border-color: var(--gf-hov-br-cl, var(--gf-hov-cl));
      } // The state without disabled, error and with focused.
      &:focus-within [dcr-br] {
        border-color: var(--gf-foc-br-cl, var(--gf-foc-cl));
      }
    }
    &[err] {
      // The state without disabled, hover, focused and error.
      &:not(:hover):not(:focus-within) [dcr-br] {
        border-color: var(--gf-err-br-cl, var(--gf-err-cl));
      } // The state without disabled, focused and error, hover.
      &:hover:not(:focus-within) [dcr-br] {
        border-color: var(--gf-hov-err-br-cl, var(--gf-hov-err-cl));
      } // The state without disabled and error, focused.
      &:focus-within [dcr-br] {
        border-color: var(--gf-foc-err-br-cl, var(--gf-err-cl));
      }
    }
  } // The state with disabled.
  &[dis] [dcr-br] {
    border-color: var(--gf-dis-br-cl, var(--gf-def-cl2));
  }

  
  // ** Section "Legend". **
  legend {
    float: unset;
    display: block;
    width: auto;
    height: 1px;
    visibility: hidden;
    padding: 0;
    &>span {
      display: inline-block;
      height: inherit;
      font-size: 0.75em;
    }
  }
  &[shr], &:focus-within, &[fil] {
    legend {
      max-width: 100%;
      -webkit-transition: max-width 100ms cubic-bezier(0.0, 0, 0.2, 1) 50ms;
      transition: max-width 100ms cubic-bezier(0.0, 0, 0.2, 1) 50ms;
    }
    &[ind] legend {
      padding: 0 calc(var(--gf-o-lgn-pd, var(--def-o-lgn-pd)) - 1px);
    }
  }
  &:not([shr]):not([fil]):not(:focus-within) legend {
    max-width: 0.01px;
    -webkit-transition: max-width 50ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: max-width 50ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
  }
  
  // ** Additional settings **

  // Ornament "padding".
  &>div {
    &>[elem-pd-ver],
    &>[elem-mr-ver] {
      line-height: inherit;
      align-self: baseline;
    }
    &>[elem-pd-ver] {
      padding-top: var(--gf-lbl-pd-tp, var(--lbl-pd-tp, var(--def-lbl-pd-tp)));
      padding-bottom: var(--gf-lbl-pd-bt, var(--lbl-pd-bt, var(--def-lbl-pd-bt)));
    }
    &>[elem-mr-ver] {
      margin-top: var(--gf-lbl-pd-tp, var(--lbl-pd-tp, var(--def-lbl-pd-tp)));
      margin-bottom: var(--gf-lbl-pd-bt, var(--lbl-pd-bt, var(--def-lbl-pd-bt)));
    }
    &>span[orn-lf] {
      max-height: inherit;
    }
    &>span[orn-lf]:empty~[elem-pd-hor] {
      padding-left: var(--gf-lbl-pd-lf, var(--lbl-pd-lf, var(--def-lbl-pd-lf)));
    }
    &>span[orn-rg] {
      max-height: inherit;
      order: 1;
    }
    &>span[orn-rg]:empty~[elem-pd-hor] {
      padding-right: var(--gf-lbl-pd-rg, var(--lbl-pd-rg, var(--def-lbl-pd-rg)));
    }
  }

  // Ornament "alignment".

  span[orn-lf="center"], span[orn-rg="center"] {
    align-self: center;
  }
  span[orn-lf="flex-start"], span[orn-rg="flex-start"] {
    align-self: flex-start;
  }
  span[orn-lf="flex-end"], span[orn-rg="flex-end"] {
    align-self: flex-end;
  }
  span[orn-lf="baseline"], span[orn-rg="baseline"] {
    align-self: baseline;
  }
  span[orn-lf="stretch"], span[orn-rg="stretch"] {
    align-self: stretch;
  }

  &[ext-o]>div>span[orn-lf="default"],
  &[ext-o]>div>span[orn-rg="default"] {
    align-self: center;
  }
  &[ext-u]>div>span[orn-lf="default"] {
    align-self: baseline;
  }
  &[ext-u]>div>span[orn-rg="default"] {
    align-self: center;
  }
  &[ext-s]>div>span[orn-lf="default"],
  &[ext-s]>div>span[orn-rg="default"] {
    align-self: baseline;
  }

  &[ext-u]>div>span[orn-lf],
  &[ext-s]>div>span[orn-lf], 
  &[ext-s]>div>span[orn-rg] {
    &>.gf-ornam {
      display: inline-block;
      margin-bottom: var(--gf-lbl-pd-bt, var(--lbl-pd-bt, var(--def-lbl-pd-bt)));
    }
  }
  // ** **
}
