/*# sourceURL=gln-frame.component.scss */

@import '../_styles/mx-align-items.scss';
@import '../_styles/mx-display-inline-flex.scss';
@import '../_styles/mx-flex-direction.scss';
@import '../_styles/mx-transform-scale-x-y.scss';
@import '../_styles/mx-transform-translate-x-y-scale-x-y.scss';
@import '../_styles/mx-transform-scale-x-y-translate-x-y.scss';

gln-frame {
  --glnfr--default-h: var(--glncl-default-h, var(--gln-default-h));
  --glnfr--default-s: var(--glncl-default-s, var(--gln-default-s));

  --glnfr--primary-h: var(--glncl-primary-h, var(--gln-primary-h));
  --glnfr--primary-s: var(--glncl-primary-s, var(--gln-primary-s));

  --glnfr--danger-h: var(--glncl-danger-h, var(--gln-danger-h));
  --glnfr--danger-s: var(--glncl-danger-s, var(--gln-danger-s));

  background-color: transparent;
  border: 0;
  display: flex;
  line-height: 1.4375em; // The value of the "line height" for the input element. (23px for font-size: 16px)
  margin: 0;
  min-width: 0;
  padding: 0px;
  position: relative;
  vertical-align: top;

  // Small indentation of the legend from the border for "outlined" mode.
  --def-o-lgn-pd: 0.3em;
  // frameSize: 56px; font-size: 16px;
  &[ext-o] {
    --def-br-rd: 0.35em;
    --def-lb-pd-tp: 1.03125em; // 16.5px
    --def-lb-pd-bt: 1.03125em; // 16.5px
    --def-lb-pd-lf: 0.875em; // 14px
    --def-lb-pd-rg: 0.875em; // 14px
    --def-lb-mx-wd: 2.905em; // calc(133% - [1.66 * 2 * 0.875em])
    --def-lb-trn-y: -0.53875em; // -8.62px
    --def-lb-trn2-y: 1.03125em; // 16.5px
    }
  &[ext-u] {
    --def-br-rd: 0.35em 0.35em 0px 0px;
    --def-lb-pd-tp: 1.546875em; // 24.75px
    --def-lb-pd-bt: 0.515625em; // 8.25px
    --def-lb-pd-lf: 0.75em; // 12px
    --def-lb-pd-rg: 0.75em; // 12px
    --def-lb-mx-wd: 2.49em; // calc(133% - [1.66 * 2 * 0.75em])
    --def-lb-trn-y: 0.379375em; // 6.07px
    --def-lb-trn2-y: 1.03125em; // 16.5px
  }
  &[ext-s] {
    --def-lb-pd-tp: 1.546875em; // 24.75px
    --def-lb-pd-bt: 0.515625em; // 8.25px
    --def-lb-pd-lf: 0;
    --def-lb-pd-rg: 0;
    --def-lb-mx-wd: 0; // calc(133% - [1.66 * 2 * 0])
    --def-lb-trn-y: 0.32em; // 5.12px
    --def-lb-trn2-y: 1.546875em; // 24.75px
  }
  border-radius: var(--glnfr-br-rd, var(--glnfrs-br-rd, var(--def-br-rd)));

  &:not([noAnm]) {
    --glnfr-trn-drt-200: 200ms;
    --glnfr-trn-drt-100: 100ms;
    --glnfr-trn-drt-50: 50ms;
  }

  // ** Section "Label". **
  label {
    // display: block;
    display: flex;
    left: 0;
    overflow: hidden;
    padding: 0;
    pointer-events: none;
    position: absolute;
    user-select: none;
    text-overflow: ellipsis;
    text-size-adjust: 100%;
    top: 0;
    transform-origin: top left;
    -webkit-transition: color var(--glnfr-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms
      , -webkit-transform var(--glnfr-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms
      , max-width var(--glnfr-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: color var(--glnfr-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms
      , transform var(--glnfr-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms
      , max-width var(--glnfr-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    white-space: nowrap;
    z-index: 1;
    &>span[lbl] {
      overflow: hidden;
      text-overflow: ellipsis;
    }
  }
  &[shr], &:focus-within, &[foc], &[fil] {
    label {
      max-width: calc(133% - var(--glnfr-lb-pd-shr, var(--glnfre-pd-shr, var(--def-lb-mx-wd))));
      @include mxTransform_TranslateXY_ScaleXY(
        var(--glnfr-lb-pd-lf, var(--glnfrs-pd-lf, var(--def-lb-pd-lf))), // $translateX
        var(--glnfr-lb-trn-y, var(--glnfre-trn-y, var(--def-lb-trn-y))), // $translateY
        0.75, // $scaleX
        0.75  // $scaleY
      );
      pointer-events: auto;
    }
  }
  &:not([shr]):not(:focus-within):not([foc]):not([fil]) label {
    max-width: calc(100%
    - var(--glnfro-pd-lf, var(--glnfr-lb-pd-lf, var(--glnfrs-pd-lf, var(--def-lb-pd-lf))))
    - var(--glnfro-pd-rg, var(--glnfr-lb-pd-rg, var(--glnfrs-pd-rg, var(--def-lb-pd-rg))))
    );
    @include mxTransform_TranslateXY_ScaleXY(
      var(--glnfro-pd-lf, var(--glnfr-lb-pd-lf, var(--glnfrs-pd-lf, var(--def-lb-pd-lf)))), // $translateX
      var(--glnfr-lb-trn2-y, var(--glnfre-trn2-y, var(--def-lb-trn2-y))), // $translateY
      1,  // $scaleX
      1   // $scaleY
    );
  }

  --glnfr--default17: hsl(var(--glnfr--default-h), var(--glnfr--default-s), 17%); // hsl(20, 2%, 17%); rgba(0, 0, 0, 0.87);
  --glnfr--default38: hsl(var(--glnfr--default-h), var(--glnfr--default-s), 38%); // hsl(20, 2%, 38%); rgba(0, 0, 0, 0.6);
  --glnfr--default55: hsl(var(--glnfr--default-h), var(--glnfr--default-s), 55%); // hsl(20, 2%, 55%); rgba(0, 0, 0, 0.42); #787878;
  // "--glnfr--default55" is a replacement for "rgba(0, 0, 0, 0.38)" (slightly darker).
  --glnfr--default74: hsl(var(--glnfr--default-h), var(--glnfr--default-s), 74%); // hsl(20, 2%, 74%); rgba(0, 0, 0, 0.26);
  --glnfr--default77: hsl(var(--glnfr--default-h), var(--glnfr--default-s), 77%); // hsl(20, 2%, 77%); rgba(0, 0, 0, 0.23);
  --glnfr--default88: hsl(var(--glnfr--default-h), var(--glnfr--default-s), 88%); // hsl(20, 2%, 88%); rgba(0, 0, 0, 0.12);
  --glnfr--default91: hsl(var(--glnfr--default-h), var(--glnfr--default-s), 91%); // hsl(20, 2%, 91%); rgba(0, 0, 0, 0.09);
  --glnfr--default94: hsl(var(--glnfr--default-h), var(--glnfr--default-s), 94%); // hsl(20, 2%, 94%); rgba(0, 0, 0, 0.06);

  --glnfr--primary46: hsl(var(--glnfr--primary-h), var(--glnfr--primary-s), 46%); //  #1976d2;
  --glnfr--primary97: hsl(var(--glnfr--primary-h), var(--glnfr--primary-s), 97%); // 

  --glnfr--danger51: hsl(var(--glnfr--danger-h), var(--glnfr--danger-s), 51%); // hsl(0, 65%, 51%); #d32f2f; rgb(211, 47, 47)
  --glnfr--danger94: hsl(var(--glnfr--danger-h), var(--glnfr--danger-s), 94%); // hsl(0, 65%, 94%); #d32f2fcf;
  --glnfr--danger96: hsl(var(--glnfr--danger-h), var(--glnfr--danger-s), 96%); // hsl(0, 65%, 96%);
  --glnfr--danger98: hsl(var(--glnfr--danger-h), var(--glnfr--danger-s), 98%); // hsl(0, 65%, 98%);

  color: var(--glnfr--default17); // hsla(0, 0%, 0%, 0.87);

  &[hfc] {
    --glnfr-hover-focus-color: var(--glnfr--primary46);
  }
  
  // Definition of internal variables by element state.
  &:not([dis]) {
    &:not([err]) { // The state without disabled, error, hover, focused.
      &:not(:hover):not(:focus-within):not([foc]) {
        --glnfr--label-cl: var(--glnfr-def-lb-cl, var(--glnfr--default38));
        --glnfr--dcr-br-cl: var(--glnfr-def-br-cl, var(--glnfr--default77));
        --glnfr--dcr-bg-cl: var(--glnfr-def-bg-cl, var(--glnfr--default94));
        --glnfr--dcr-bb-bef: var(--glnfr-def-brb-bf, var(--glnfr--default55));
      } // The state without disabled, error, focused and with hover.
      &:hover:not(:focus-within):not([foc]) {
        --glnfr--label-cl: var(--glnfr-hov-lb-cl, var(--glnfr-hover-focus-color, var(--glnfr--default38)));
        --glnfr--dcr-br-cl: var(--glnfr-hov-br-cl, var(--glnfr-hover-focus-color, var(--glnfr--default17)));
        --glnfr--dcr-bg-cl: var(--glnfr-hov-bg-cl, var(--glnfr--default91));
        --glnfr--dcr-bb-bef: var(--glnfr-hov-brb-bf, var(--glnfr-hover-focus-color, var(--glnfr--default17)));
      } // The state without disabled, error and with focused.
      &:focus-within, &[foc] {
        --glnfr--label-cl: var(--glnfr-foc-lb-cl, var(--glnfr--primary46));
        --glnfr--dcr-br-cl: var(--glnfr-foc-br-cl, var(--glnfr--primary46));
        --glnfr--dcr-bg-cl: var(--glnfr-foc-bg-cl, var(--glnfr--primary97));
      }
      --glnfr--dcr-bb-aft: var(--glnfr-foc-brb-af, var(--glnfr--primary46));
    }
    &[err] {// The state without disabled, hover, focused and error.
      &:not(:hover):not(:focus-within):not([foc]) {
        --glnfr--label-cl: var(--glnfr-err-lb-cl, var(--glnfr--danger51));
        --glnfr--dcr-br-cl: var(--glnfr-err-br-cl, var(--glnfr--danger51));
        --glnfr--dcr-bg-cl: var(--glnfr-err-bg-cl, var(--glnfr--danger96));
        --glnfr--dcr-bb-bef: var(--glnfr-err-brb-bf, var(--glnfr--danger51));
      } // The state without disabled, focused and error, hover.
      &:hover:not(:focus-within):not([foc]) {
        --glnfr--label-cl: var(--glnfr-hov-err-lb-cl, var(--glnfr--danger51));
        --glnfr--dcr-br-cl: var(--glnfr-hov-err-br-cl, var(--glnfr--danger51));
        --glnfr--dcr-bg-cl: var(--glnfr-hov-err-bg-cl, var(--glnfr--danger98));
        --glnfr--dcr-bb-bef: var(--glnfr-hov-err-brb-bf, var(--glnfr--danger51));
      } // The state without disabled and error, focused.
      &:focus-within, &[foc] {
        --glnfr--label-cl: var(--glnfr-foc-err-lb-cl, var(--glnfr--danger51));
        --glnfr--dcr-br-cl: var(--glnfr-foc-err-br-cl, var(--glnfr--danger51));
        --glnfr--dcr-bg-cl: var(--glnfr-foc-err-bg-cl, var(--glnfr--danger94));
      }
      --glnfr--dcr-bb-aft: var(--glnfr-foc-err-brb-af, var(--glnfr--danger51));
    }
  } // The state with disabled.
  &[dis] {
    --glnfr--label-cl: var(--glnfr-dis-lb-cl, var(--glnfr--default55));
    --glnfr--dcr-br-cl: var(--glnfr-dis-br-cl, var(--glnfr--default74));
    --glnfr--dcr-bg-cl: var(--glnfr-dis-bg-cl, var(--glnfr--default88));
    --glnfr--dcr-bb-bef: var(--glnfr-dis-brb-bf, var(--glnfr--default55));
  }

  // ** Section: Color "label". **
  &>label {
    color: var(--glnfr--label-cl);
  }

  // ** Section "div.glnfr-border". **
  &>div {
    align-items: center;
    box-sizing: border-box;
    border-radius: inherit;
    display: flex;
    flex-wrap: nowrap;
    width: 100%;
    &>[glnfr-elem] {
      flex-grow: 1;
    }
    &>[glnfr-orn-lf], &>[glnfr-orn-rg] {
      flex-shrink: 0;
    }
  }
  &[dis]>div {
    color: var(--glnfr--label-cl); // The color in state is disabled for an input element.
  }

  // ** Section: Background-Color "div.glnfr-border" for "Underline" mode. **
  &>[dcr-bg] {
    -webkit-transition: background-color var(--glnfr-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: background-color var(--glnfr-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    background-color: var(--glnfr--dcr-bg-cl);
  }

  // ** Section "div.glnfr-border" for "Outlined" and "Standard" mode. **
  &>[dcr-bb] {
    &:before {
      border-bottom-width: 1px;
      border-bottom-style: solid;
      border-radius: inherit;
      left: 0;
      bottom: 0;
      content: "\00a0";
      position: absolute;
      right: 0;
      -webkit-transition: border-bottom-color var(--glnfr-trn-drt-200, 0ms) cubic-bezier(0.4, 0, 0.2, 1) 0ms;
      transition: border-bottom-color var(--glnfr-trn-drt-200, 0ms) cubic-bezier(0.4, 0, 0.2, 1) 0ms;
      pointer-events: none;
    }
    &:after {
      border-bottom-width: 2px;
      border-bottom-style: solid;
      border-radius: inherit;
      left: 0;
      bottom: 0;
      content: "";
      position: absolute;
      right: 0;
      @include mxTransform_ScaleXY(0, 1);
      -webkit-transition: -webkit-transform var(--glnfr-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
      transition: transform var(--glnfr-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
      pointer-events: none;
    }
  }

  &[dis]>div[dcr-bb]:before {
    border-bottom-style: dotted;
  }
  &[ext-s]:not([hfc]):not([dis]):hover:not(:focus-within):not([foc])>div[dcr-bb]:before {
    border-bottom-width: 2px;
  }
  // The effect on gaining input focus is "increase the length of the bottom border from 0 to 100%."
  // Effect on loss of input focus "reducing the length of the lower border from 100% to 0".
  &:not([dis]) {
    &:focus-within, &[foc] {
      &>div[dcr-bb]:after {
        @include mxTransform_ScaleXY_TranslateXY(1, 1, 0, 0); // ($scaleX, $scaleY, $translateX, $translateY)
      }
    }
  }
  // Border-Bottom-Color "div.glnfr-border" for "Underline" and "Standard" mode.
  &>[dcr-bb]:before {
    border-bottom-color: var(--glnfr--dcr-bb-bef);
  }
  &:not([dis])>[dcr-bb]:after {
    border-bottom-color: var(--glnfr--dcr-bb-aft);
  }

  // ** Section "Fieldset" for "Outlined" mode. **
  fieldset {
    text-align: left;
    position: absolute;
    bottom: 0;
    right: 0;
    top: 0;
    left: 0;
    margin: 0;
    padding: 0px calc(var(--glnfr-lb-pd-lf, var(--glnfrs-pd-lf, var(--def-lb-pd-lf))) - var(--glnfr-o-lgn-pd, var(--def-o-lgn-pd)));
    pointer-events: none;
    border-radius: inherit;
    border-width: 1px;
    border-style: solid;
    overflow: hidden;
    min-width: 0%;
    box-sizing: inherit;
  }
  // For "outlined" mode. With input focus, increase the frame to 2 pixels.
  &:not([dis]) {
    &:focus-within, &[foc] {
      fieldset {
        border-width: 2px;
        padding-left: calc(var(--glnfr-lb-pd-lf, var(--glnfrs-pd-lf, var(--def-lb-pd-lf))) - var(--glnfr-o-lgn-pd, var(--def-o-lgn-pd)) - 1px);
      }
    } 
  } 
  // &:not([dis])[err]:hover:not(:focus-within):not([foc]) fieldset {
  //   border-width: 2px;
  // }

  /* The radius value must be an integer, otherwise the frame in the "dotted" style is poorly drawn.
  // The state with disabled but without error.
  &[dis] fieldset {
    border-color: var(--glnfr--label-cl);
    border-style: dotted;
  }*/
  [dcr-br] {
    border-color: var(--glnfr--dcr-br-cl);
  }
  
  // ** Section "Legend" on "Fieldset" for "Outlined" mode. **
  legend {
    box-sizing: border-box;
    display: flex;
    height: 1px;
    padding: 0;
    visibility: hidden;
    white-space: nowrap;
    width: auto;
    &>span {
      height: inherit;
      font-size: 0.75em;
    }
    &>span[lgn] {
      overflow: hidden;
      text-overflow: ellipsis;
    }
  }
  &[shr], &:focus-within, &[foc], &[fil] {
    legend {
      max-width: 100%;
      -webkit-transition: max-width var(--glnfr-trn-drt-100, 0ms) cubic-bezier(0.0, 0, 0.2, 1) var(--glnfr-trn-drt-50, 0ms);
      transition: max-width var(--glnfr-trn-drt-100, 0ms) cubic-bezier(0.0, 0, 0.2, 1) var(--glnfr-trn-drt-50, 0ms);
    }
    &[ind] legend {
      padding: 0 calc(var(--glnfr-o-lgn-pd, var(--def-o-lgn-pd)) - 1px);
    }
  }
  &:not([shr]):not([fil]):not(:focus-within):not([foc]) legend {
    max-width: 0.01px;
    -webkit-transition: max-width var(--glnfr-trn-drt-50, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: max-width var(--glnfr-trn-drt-50, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
  }
  
  // ** Additional settings **

  // Ornament "padding".
  &>div {
    &>[glnfr-pd-ver],
    &>[glnfr-mr-ver] {
      line-height: inherit; // Stores the line height for the end element.
      align-self: baseline;
    }
    &>[glnfr-pd-ver] {
      padding-top: var(--glnfr-lb-pd-tp, var(--glnfrs-pd-tp, var(--def-lb-pd-tp)));
      padding-bottom: var(--glnfr-lb-pd-bt, var(--glnfrs-pd-bt, var(--def-lb-pd-bt)));
    }
    &>[glnfr-mr-ver] {
      margin-top: var(--glnfr-lb-pd-tp, var(--glnfrs-pd-tp, var(--def-lb-pd-tp)));
      margin-bottom: var(--glnfr-lb-pd-bt, var(--glnfrs-pd-bt, var(--def-lb-pd-bt)));
    }

    &>span[glnfr-orn-lf], &>span[glnfr-orn-rg] {
      max-height: inherit;
      display: inline-flex;
    }
    &>span[glnfr-orn-rg] {
      order: 1;
    }

    &>span[glnfr-orn-lf]:empty~[glnfr-pd-hor] {
      padding-left: var(--glnfr-lb-pd-lf, var(--glnfrs-pd-lf, var(--def-lb-pd-lf)));
    }
    &>span[glnfr-orn-rg]:empty~[glnfr-pd-hor] {
      padding-right: var(--glnfr-lb-pd-rg, var(--glnfrs-pd-rg, var(--def-lb-pd-rg)));
    }
  }

  // Ornament "alignment".

  span[glnfr-orn-lf="center"], span[glnfr-orn-rg="center"] {
    align-self: center;
  }
  span[glnfr-orn-lf="flex-start"], span[glnfr-orn-rg="flex-start"] {
    align-self: flex-start;
  }
  span[glnfr-orn-lf="flex-end"], span[glnfr-orn-rg="flex-end"] {
    align-self: flex-end;
  }
  span[glnfr-orn-lf="baseline"], span[glnfr-orn-rg="baseline"] {
    align-self: baseline;
  }
  span[glnfr-orn-lf="stretch"], span[glnfr-orn-rg="stretch"] {
    align-self: stretch;
  }

  &[ext-o]>div>span[glnfr-orn-lf="default"],
  &[ext-o]>div>span[glnfr-orn-rg="default"] {
    align-self: center;
  }
  &[ext-u]>div>span[glnfr-orn-lf="default"] {
    align-self: baseline;
  }
  &[ext-u]>div>span[glnfr-orn-rg="default"] {
    align-self: center;
  }
  &[ext-s]>div>span[glnfr-orn-lf="default"],
  &[ext-s]>div>span[glnfr-orn-rg="default"] {
    align-self: baseline;
  }
  &[ext-u]>div>span[glnfr-orn-lf],
  &[ext-s]>div>span[glnfr-orn-lf], 
  &[ext-s]>div>span[glnfr-orn-rg] {
    &>.glnfr-ornam {
      display: inline-block;
      margin-bottom: var(--glnfr-lb-pd-bt, var(--glnfrs-pd-bt, var(--def-lb-pd-bt)));
    }
  }
}
