/*# sourceURL=gln-frame.component.scss */

@import '../_styles/mx-align-items.scss';
@import '../_styles/mx-display-inline-flex.scss';
@import '../_styles/mx-flex-direction.scss';
@import '../_styles/mx-transform-scale-x-y.scss';
@import '../_styles/mx-transform-translate-x-y-scale-x-y.scss';
@import '../_styles/mx-transform-scale-x-y-translate-x-y.scss';

gln-frame {
  color: hsl(var(--gln-default-h), var(--gln-default-s), 17%); // hsla(0, 0%, 0%, 0.87);
  background-color: transparent;
  border: 0;
  display: flex;
  line-height: 1.4375em; // The value of the "line height" for the input element. (23px for font-size: 16px)
  margin: 0;
  min-width: 0;
  padding: 0px;
  position: relative;
  vertical-align: top;

  // Small indentation of the legend from the border for "outlined" mode.
  --def-o-lgn-pd: 0.3em;
  // frameSize: 56px; font-size: 16px;
  &[ext-o] {
    --def-br-rd: 0.35em;
    --def-lb-pd-tp: 1.03125em; // 16.5px
    --def-lb-pd-bt: 1.03125em; // 16.5px
    --def-lb-pd-lf: 0.875em; // 14px
    --def-lb-pd-rg: 0.875em; // 14px
    --def-lb-mx-wd: 2.905em; // calc(133% - [1.66 * 2 * 0.875em])
    --def-lb-trn-y: -0.53875em; // -8.62px
    --def-lb-trn2-y: 1.03125em; // 16.5px
    }
  &[ext-u] {
    --def-br-rd: 0.35em 0.35em 0px 0px;
    --def-lb-pd-tp: 1.546875em; // 24.75px
    --def-lb-pd-bt: 0.515625em; // 8.25px
    --def-lb-pd-lf: 0.75em; // 12px
    --def-lb-pd-rg: 0.75em; // 12px
    --def-lb-mx-wd: 2.49em; // calc(133% - [1.66 * 2 * 0.75em])
    --def-lb-trn-y: 0.379375em; // 6.07px
    --def-lb-trn2-y: 1.03125em; // 16.5px
  }
  &[ext-s] {
    --def-lb-pd-tp: 1.546875em; // 24.75px
    --def-lb-pd-bt: 0.515625em; // 8.25px
    --def-lb-pd-lf: 0;
    --def-lb-pd-rg: 0;
    --def-lb-mx-wd: 0; // calc(133% - [1.66 * 2 * 0])
    --def-lb-trn-y: 0.32em; // 5.12px
    --def-lb-trn2-y: 1.546875em; // 24.75px
  }
  border-radius: var(--glnf-br-rd, var(--glnfs-br-rd, var(--def-br-rd)));

  &:not([noAnm]) {
    --glnf-trn-drt-200: 200ms;
    --glnf-trn-drt-100: 100ms;
    --glnf-trn-drt-50: 50ms;
  }

  // ** Section "Label". **
  label {
    // display: block;
    display: flex;
    left: 0;
    overflow: hidden;
    padding: 0;
    pointer-events: none;
    position: absolute;
    user-select: none;
    text-overflow: ellipsis;
    text-size-adjust: 100%;
    top: 0;
    transform-origin: top left;
    -webkit-transition: color var(--glnf-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms,
      -webkit-transform var(--glnf-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms,
      max-width var(--glnf-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: color var(--glnf-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms,
      transform var(--glnf-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms,
      max-width var(--glnf-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    white-space: nowrap;
    z-index: 1;
    &>span[lbl] {
      max-width: 100%;
      overflow: hidden;
      text-overflow: ellipsis;
    }
  }
  &:not([noAnm]) label {
  }
  &[shr], &:focus-within, &[fil] {
    label {
      max-width: calc(133% - var(--glnf-lb-mx-wd, var(--glnfe-mx-wd, var(--def-lb-mx-wd))));
      @include mxTransform_TranslateXY_ScaleXY(
        var(--glnf-lb-pd-lf, var(--glnfs-pd-lf, var(--def-lb-pd-lf))), // $translateX
        var(--glnf-lb-trn-y, var(--glnfe-trn-y, var(--def-lb-trn-y))), // $translateY
        0.75, // $scaleX
        0.75  // $scaleY
      );
      pointer-events: auto;
    }
  }
  &:not([shr]):not(:focus-within):not([fil]) label {
    max-width: calc(100%
    - var(--glnfo-pd-lf, var(--glnf-lb-pd-lf, var(--glnfs-pd-lf, var(--def-lb-pd-lf))))
    - var(--glnfo-pd-rg, var(--glnf-lb-pd-rg, var(--glnfs-pd-rg, var(--def-lb-pd-rg))))
    );
    @include mxTransform_TranslateXY_ScaleXY(
      var(--glnfo-pd-lf, var(--glnf-lb-pd-lf, var(--glnfs-pd-lf, var(--def-lb-pd-lf)))), // $translateX
      var(--glnf-lb-trn2-y, var(--glnfe-trn2-y, var(--def-lb-trn2-y))), // $translateY
      1,  // $scaleX
      1   // $scaleY
    );
  }
  // :not([err]) :not(:hover):not(:focus-within)
  --glnf--def-lb-def38: hsl(var(--gln-default-h), var(--gln-default-s), 38%); // (!) hsla(0, 0%, 0%, 0.6);
  --glnf--def-br-def77: hsl(var(--gln-default-h), var(--gln-default-s), 77%); // (!) hsla(0, 0%, 0%, 0.23);
  --glnf--def-bg-def94: hsl(var(--gln-default-h), var(--gln-default-s), 94%); // (!) hsla(0, 0%, 0%, 0.06);
  --glnf--def-bb-def54: hsl(var(--gln-default-h), var(--gln-default-s), 54%); // (!) hsla(0, 0%, 0%, 0.42);
  // :not([err]) :hover:not(:focus-within)
  --glnf--hov-br-def17: hsl(var(--gln-default-h), var(--gln-default-s), 17%); // (!) hsla(0, 0%, 0%, 0.87);
  --glnf--hov-bg-def91: hsl(var(--gln-default-h), var(--gln-default-s), 91%); // (!) hsla(0, 0%, 0%, 0.09);
  --glnf--hov-bb-def17: hsl(var(--gln-default-h), var(--gln-default-s), 17%); // (!) hsla(0, 0%, 0%, 0.87);
  // :not([err]) :focus-within
  --glnf--foc-cl-prm46: hsl(var(--gln-primary-h), var(--gln-primary-s), 46%); // #1976d2;
  --glnf--foc-bg-prm97: hsl(var(--gln-primary-h), var(--gln-primary-s), 97%); // (+)
  // [err] :not(:hover):not(:focus-within)
  --glnf--err-lb-dng51: hsl(var(--gln-danger-h), var(--gln-danger-s), 51%); // (!) hsla(0, 65%, 51%, 1);
  --glnf--err-br-dng51: hsl(var(--gln-danger-h), var(--gln-danger-s), 51%); // (!) hsla(0, 65%, 51%, 1);
  --glnf--err-bg-dng96: hsl(var(--gln-danger-h), var(--gln-danger-s), 96%); // (+)
  --glnf--err-bb-dng51: hsl(var(--gln-danger-h), var(--gln-danger-s), 51%); // (+)
  // [err] :hover:not(:focus-within)
  --glnf--hov-err-lb-dng51: hsl(var(--gln-danger-h), var(--gln-danger-s), 51%); // (!) hsla(0, 65%, 51%, 1);
  --glnf--hov-err-br-dng51: hsl(var(--gln-danger-h), var(--gln-danger-s), 51%); // (!) hsla(0, 65%, 51%, 1);
  --glnf--hov-err-bg-dng98: hsl(var(--gln-danger-h), var(--gln-danger-s), 98%); // (+)
  --glnf--hov-err-bb-dng51: hsl(var(--gln-danger-h), var(--gln-danger-s), 51%); // (+)
  // [err] :focus-within
  --glnf--foc-err-lb-dng51: hsl(var(--gln-danger-h), var(--gln-danger-s), 51%); // (!) hsla(0, 65%, 51%, 1);
  --glnf--foc-err-br-dng51: hsl(var(--gln-danger-h), var(--gln-danger-s), 51%); // (!) hsla(0, 65%, 51%, 1);
  --glnf--foc-err-bg-dng94: hsl(var(--gln-danger-h), var(--gln-danger-s), 94%); // (+)
  --glnf--foc-err-bb-dng51: hsl(var(--gln-danger-h), var(--gln-danger-s), 51%); // (!) hsla(0, 65%, 51%, 1);
  // [dis]
  --glnf--dis-lb-def55: hsl(var(--gln-default-h), var(--gln-default-s), 55%); // (!) hsla(0, 0%, 0%, 0.42);
  --glnf--dis-br-def74: hsl(var(--gln-default-h), var(--gln-default-s), 74%); // (!) hsla(0, 0%, 0%, 0.26);
  --glnf--dis-bg-def88: hsl(var(--gln-default-h), var(--gln-default-s), 88%); // (!) #0000001f; // hsla(0, 0%, 0%, 0.12);
  --glnf--dis-bb-def55: hsl(var(--gln-default-h), var(--gln-default-s), 55%); // (!) hsla(0, 0%, 0%, 0.42);
  //
  --glnf-default-55: hsl(var(--gln-default-h), var(--gln-default-s), 55%);

  &[hfc] {
    --glnf-hover-focus-color: var(--glnf--foc-cl-prm46);
  }
  
  // Definition of internal variables by element state.
  &:not([dis]) {
    &:not([err]) { // The state without disabled, error, hover, focused.
      &:not(:hover):not(:focus-within) {
        --glnf-label-cl: var(--glnf-def-lb-cl, var(--glnf--def-lb-def38));
        --glnf-dcr-br-cl: var(--glnf-def-br-cl, var(--glnf--def-br-def77));
        --glnf-dcr-bg-cl: var(--glnf-def-bg-cl, var(--glnf--def-bg-def94));
        --glnf-dcr-bb-bef: var(--glnf-def-brb-bf, var(--glnf--def-bb-def54));
      } // The state without disabled, error, focused and with hover.
      &:hover:not(:focus-within) {
        --glnf-label-cl: var(--glnf-hov-lb-cl, var(--glnf-hover-focus-color, var(--glnf--def-lb-def38)));
        --glnf-dcr-br-cl: var(--glnf-hov-br-cl, var(--glnf-hover-focus-color, var(--glnf--hov-br-def17)));
        --glnf-dcr-bg-cl: var(--glnf-hov-bg-cl, var(--glnf--hov-bg-def91));
        --glnf-dcr-bb-bef: var(--glnf-hov-brb-bf, var(--glnf-hover-focus-color, var(--glnf--hov-bb-def17)));
      } // The state without disabled, error and with focused.
      &:focus-within {
        --glnf-label-cl: var(--glnf-foc-lb-cl, var(--glnf--foc-cl-prm46));
        --glnf-dcr-br-cl: var(--glnf-foc-br-cl, var(--glnf--foc-cl-prm46));
        --glnf-dcr-bg-cl: var(--glnf-foc-bg-cl, var(--glnf--foc-bg-prm97));
      }
      --glnf-dcr-bb-aft: var(--glnf-foc-brb-af, var(--glnf--foc-cl-prm46));
    }
    &[err] {// The state without disabled, hover, focused and error.
      &:not(:hover):not(:focus-within) {
        --glnf-label-cl: var(--glnf-err-lb-cl, var(--glnf--err-lb-dng51));
        --glnf-dcr-br-cl: var(--glnf-err-br-cl, var(--glnf--err-br-dng51));
        --glnf-dcr-bg-cl: var(--glnf-err-bg-cl, var(--glnf--err-bg-dng96));
        --glnf-dcr-bb-bef: var(--glnf-err-brb-bf, var(--glnf--err-bb-dng51));
      } // The state without disabled, focused and error, hover.
      &:hover:not(:focus-within) {
        --glnf-label-cl: var(--glnf-hov-err-lb-cl, var(--glnf--hov-err-lb-dng51));
        --glnf-dcr-br-cl: var(--glnf-hov-err-br-cl, var(--glnf--hov-err-br-dng51));
        --glnf-dcr-bg-cl: var(--glnf-hov-err-bg-cl, var(--glnf--hov-err-bg-dng98));
        --glnf-dcr-bb-bef: var(--glnf-hov-err-brb-bf, var(--glnf--hov-err-bb-dng51));
      } // The state without disabled and error, focused.
      &:focus-within {
        --glnf-label-cl: var(--glnf-foc-err-lb-cl, var(--glnf--foc-err-lb-dng51));
        --glnf-dcr-br-cl: var(--glnf-foc-err-br-cl, var(--glnf--foc-err-br-dng51));
        --glnf-dcr-bg-cl: var(--glnf-foc-err-bg-cl, var(--glnf--foc-err-bg-dng94));
      }
      --glnf-dcr-bb-aft: var(--glnf-foc-err-brb-af, var(--glnf--foc-err-bb-dng51));
    }
  } // The state with disabled.
  &[dis] {
    --glnf-label-cl: var(--glnf-dis-lb-cl, var(--glnf--dis-lb-def55));
    --glnf-dcr-br-cl: var(--glnf-dis-br-cl, var(--glnf--dis-br-def74));
    --glnf-dcr-bg-cl: var(--glnf-dis-bg-cl, var(--glnf--dis-bg-def88));
    --glnf-dcr-bb-bef: var(--glnf-dis-brb-bf, var(--glnf--dis-bb-def55));
  }

  // ** Section: Color "label". **
  &>label {
    color: var(--glnf-label-cl);
  }

  // ** Section "div.glnf-border". **
  &>div {
    align-items: center;
    box-sizing: border-box;
    border-radius: inherit;
    display: flex;
    flex-wrap: nowrap;
    width: 100%;
    &>[glnf-elem] {
      flex-grow: 1;
    }
  }
  &[dis]>div {
    color: var(--glnf-default-55); // var(--glnf-dis-cl); // The color in state is disabled for an input element.
  }

  // ** Section: Background-Color "div.glnf-border" for "Underline" mode. **
  &>[dcr-bg] {
    -webkit-transition: background-color var(--glnf-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: background-color var(--glnf-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    background-color: var(--glnf-dcr-bg-cl);
  }

  // ** Section "div.glnf-border" for "Outlined" and "Standard" mode. **
  &>[dcr-bb] {
    &:before {
      border-bottom-width: 1px;
      border-bottom-style: solid;
      border-radius: inherit;
      left: 0;
      bottom: 0;
      content: "\00a0";
      position: absolute;
      right: 0;
      -webkit-transition: border-bottom-color var(--glnf-trn-drt-200, 0ms) cubic-bezier(0.4, 0, 0.2, 1) 0ms;
      transition: border-bottom-color var(--glnf-trn-drt-200, 0ms) cubic-bezier(0.4, 0, 0.2, 1) 0ms;
      pointer-events: none;
    }
    &:after {
      border-bottom-width: 2px;
      border-bottom-style: solid;
      border-radius: inherit;
      left: 0;
      bottom: 0;
      content: "";
      position: absolute;
      right: 0;
      @include mxTransform_ScaleXY(0, 1);
      -webkit-transition: -webkit-transform var(--glnf-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
      transition: transform var(--glnf-trn-drt-200, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
      pointer-events: none;
    }
  }

  &[dis]>div[dcr-bb]:before {
    border-bottom-style: dotted;
  }
  &[ext-s]:not([hfc]):not([dis]):hover:not(:focus-within)>div[dcr-bb]:before {
    border-bottom-width: 2px;
  }
  // The effect on gaining input focus is "increase the length of the bottom border from 0 to 100%."
  // Effect on loss of input focus "reducing the length of the lower border from 100% to 0".
  &:not([dis]):focus-within>div[dcr-bb]:after {
    @include mxTransform_ScaleXY_TranslateXY(1, 1, 0, 0); // ($scaleX, $scaleY, $translateX, $translateY)
  }
  // Border-Bottom-Color "div.glnf-border" for "Underline" and "Standard" mode.
  &>[dcr-bb]:before {
    border-bottom-color: var(--glnf-dcr-bb-bef);
  }
  &:not([dis])>[dcr-bb]:after {
    border-bottom-color: var(--glnf-dcr-bb-aft);
  }

  // ** Section "Fieldset" for "Outlined" mode. **
  fieldset {
    text-align: left;
    position: absolute;
    bottom: 0;
    right: 0;
    top: 0;
    left: 0;
    margin: 0;
    padding: 0px calc(var(--glnf-lb-pd-lf, var(--glnfs-pd-lf, var(--def-lb-pd-lf))) - var(--glnf-o-lgn-pd, var(--def-o-lgn-pd)));
    pointer-events: none;
    border-radius: inherit;
    border-width: 1px;
    border-style: solid;
    overflow: hidden;
    min-width: 0%;
    box-sizing: inherit;
  }
  // For "outlined" mode. With input focus, increase the frame to 2 pixels.
  &:not([dis]):focus-within fieldset {
    border-width: 2px;
    padding-left: calc(var(--glnf-lb-pd-lf, var(--glnfs-pd-lf, var(--def-lb-pd-lf))) - var(--glnf-o-lgn-pd, var(--def-o-lgn-pd)) - 1px);
  }
  // &:not([dis])[err]:hover:not(:focus-within) fieldset {
  //   border-width: 2px;
  // }

  /* The radius value must be an integer, otherwise the frame in the "dotted" style is poorly drawn.
  // The state with disabled but without error.
  &[dis] fieldset {
    border-color: var(--glnf-default-55); // var(--glnf-dis-cl);
    border-style: dotted;
  }*/
  [dcr-br] {
    border-color: var(--glnf-dcr-br-cl);
  }
  
  // ** Section "Legend" on "Fieldset" for "Outlined" mode. **
  legend {
    float: unset;
    display: block;
    width: auto;
    height: 1px;
    visibility: hidden;
    padding: 0;
    // height: 13px; // #
    // color: blueviolet;
    // outline: 1px dashed green;
    &>span {
      display: inline-block;
      height: inherit;
      font-size: 0.75em;
    }
  }
  &[shr], &:focus-within, &[fil] {
    legend {
      max-width: 100%;
      -webkit-transition: max-width var(--glnf-trn-drt-100, 0ms) cubic-bezier(0.0, 0, 0.2, 1) var(--glnf-trn-drt-50, 0ms);
      transition: max-width var(--glnf-trn-drt-100, 0ms) cubic-bezier(0.0, 0, 0.2, 1) var(--glnf-trn-drt-50, 0ms);
    }
    &[ind] legend {
      padding: 0 calc(var(--glnf-o-lgn-pd, var(--def-o-lgn-pd)) - 1px);
    }
  }
  &:not([shr]):not([fil]):not(:focus-within) legend {
    max-width: 0.01px;
    -webkit-transition: max-width var(--glnf-trn-drt-50, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: max-width var(--glnf-trn-drt-50, 0ms) cubic-bezier(0.0, 0, 0.2, 1) 0ms;
  }
  
  // ** Additional settings **

  // Ornament "padding".
  &>div {
    &>[glnf-pd-ver],
    &>[glnf-mr-ver] {
      line-height: inherit; // Stores the line height for the end element.
      align-self: baseline;
    }
    &>[glnf-pd-ver] {
      padding-top: var(--glnf-lb-pd-tp, var(--glnfs-pd-tp, var(--def-lb-pd-tp)));
      padding-bottom: var(--glnf-lb-pd-bt, var(--glnfs-pd-bt, var(--def-lb-pd-bt)));
    }
    &>[glnf-mr-ver] {
      margin-top: var(--glnf-lb-pd-tp, var(--glnfs-pd-tp, var(--def-lb-pd-tp)));
      margin-bottom: var(--glnf-lb-pd-bt, var(--glnfs-pd-bt, var(--def-lb-pd-bt)));
    }

    &>span[glnf-orn-lf], &>span[glnf-orn-rg] {
      max-height: inherit;
      display: inline-flex;
    }
    &>span[glnf-orn-rg] {
      order: 1;
    }

    &>span[glnf-orn-lf]:empty~[glnf-pd-hor] {
      padding-left: var(--glnf-lb-pd-lf, var(--glnfs-pd-lf, var(--def-lb-pd-lf)));
    }
    &>span[glnf-orn-rg]:empty~[glnf-pd-hor] {
      padding-right: var(--glnf-lb-pd-rg, var(--glnfs-pd-rg, var(--def-lb-pd-rg)));
    }
  }

  // Ornament "alignment".

  span[glnf-orn-lf="center"], span[glnf-orn-rg="center"] {
    align-self: center;
  }
  span[glnf-orn-lf="flex-start"], span[glnf-orn-rg="flex-start"] {
    align-self: flex-start;
  }
  span[glnf-orn-lf="flex-end"], span[glnf-orn-rg="flex-end"] {
    align-self: flex-end;
  }
  span[glnf-orn-lf="baseline"], span[glnf-orn-rg="baseline"] {
    align-self: baseline;
  }
  span[glnf-orn-lf="stretch"], span[glnf-orn-rg="stretch"] {
    align-self: stretch;
  }

  &[ext-o]>div>span[glnf-orn-lf="default"],
  &[ext-o]>div>span[glnf-orn-rg="default"] {
    align-self: center;
  }
  &[ext-u]>div>span[glnf-orn-lf="default"] {
    align-self: baseline;
  }
  &[ext-u]>div>span[glnf-orn-rg="default"] {
    align-self: center;
  }
  &[ext-s]>div>span[glnf-orn-lf="default"],
  &[ext-s]>div>span[glnf-orn-rg="default"] {
    align-self: baseline;
  }
  &[ext-u]>div>span[glnf-orn-lf],
  &[ext-s]>div>span[glnf-orn-lf], 
  &[ext-s]>div>span[glnf-orn-rg] {
    &>.glnf-ornam {
      display: inline-block;
      margin-bottom: var(--glnf-lb-pd-bt, var(--glnfs-pd-bt, var(--def-lb-pd-bt)));
    }
  }
}
