/*# sourceURL=gln-button.component.scss */

@import '../_styles/mx-display-flex.scss';

gln-button {
  --glnbt--default-h: var(--glncl-default-h, var(--gln-default-h));
  --glnbt--default-s: var(--glncl-default-s, var(--gln-default-s));
  --glnbt--default-l: var(--glncl-default-l, var(--gln-default-l));

  --glnbt--default-bg-h: var(--glncl-default-bg-h, var(--gln-default-bg-h));
  --glnbt--default-bg-s: var(--glncl-default-bg-s, var(--gln-default-bg-s));
  --glnbt--default-bg-l: var(--glncl-default-bg-l, var(--gln-default-bg-l));

  --glnbt--primary-h: var(--glncl-primary-h, var(--gln-primary-h));
  --glnbt--primary-s: var(--glncl-primary-s, var(--gln-primary-s));
  --glnbt--primary-l: var(--glncl-primary-l, var(--gln-primary-l));

  @include mxDisplayFlex();
  height: max-content;
  font-weight: 500;
  font-size: 1em;
  outline: none;

  &[wdFull] {
    width: 100%;
  }

  &[ext-c] {
    --def-lb-pd-lf: 1em; // 16px
    --glntr--cl-ripple:  var(--glnbt-ripple-cl, hsla(var(--glnbt--default-bg-h), var(--glnbt--default-bg-s), 100%, 0.3));
  }
  &[ext-o] {
    --def-lb-pd-lf: 0.9375em; // 15px
    --glntr--cl-ripple:  var(--glnbt-ripple-cl, hsla(var(--glnbt--primary-h), var(--glnbt--primary-s), 46%, 0.3));
  }
  &[ext-t] {
    --def-lb-pd-lf: 0.5em; // 8px
    --glntr--cl-ripple:  var(--glnbt-ripple-cl, hsla(var(--glnbt--primary-h), var(--glnbt--primary-s), 46%, 0.3));
  }
  // To pass the value to GlnTouchRipple.
  --glntr-ripple-cl: var(--glntr--cl-ripple);

  &>[glnbt-clear] {
    appearance: none;
    margin: 0;
    padding: 0;
    border: none;
    outline: none;
  }
  &>[glnbt-btn] {
    -webkit-tap-highlight-color: transparent;
    align-items: center;
    border-radius: var(--glnbt-br-rd, var(--glnbtf--br-rd, 0.25em)); // 4px
    box-sizing: border-box;
    cursor: pointer;
    display: inline-flex;
    font-family: inherit;
    font-weight: inherit;
    font-size: 1em;
    justify-content: center;
    letter-spacing: inherit;
    line-height: inherit;
    min-height: var(--glnbt--size, 2.5em);
    min-width: var(--glnbt--size, 2.5em);
    overflow: hidden;
    position: relative;
    text-decoration: none;
    text-transform: inherit;
    user-select: none;
  }
  &:not([dis])>[glnbt-btn] {
    transition:
      background-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
      box-shadow 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
      border-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
      color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  }
  &[dis]>[glnbt-btn] {
    cursor: default;
    a {
      pointer-events: none;
    }
  }

  a[linkClear] {
    text-decoration: none;
    color: inherit;
    cursor: inherit;
  }

  // Exterior: "contained"
  // To block the display of a shadow for a button in the "Contained" mode, you must specify "--glnbt-elevation: none;".
  &[ext-c]:not([dis])>[glnbt-btn] {
    &:not(:hover):not(:active) {
      box-shadow: var(--glnbt-elevation, 0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%));
    }
    &:hover {
      box-shadow: var(--glnbt-elevation, 0px 2px 4px -1px rgb(0 0 0 / 20%), 0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%));
    }
    &:active {
      box-shadow: var(--glnbt-elevation, 0px 5px 5px -3px rgb(0 0 0 / 20%), 0px 8px 10px 1px rgb(0 0 0 / 14%), 0px 3px 14px 2px rgb(0 0 0 / 12%));
    }
  }
  &[ext-c] {
    --glnbt--lb-cl-def: hsl(var(--glnbt--default-bg-h), var(--glnbt--default-bg-s), var(--glnbt--default-bg-l));
    --glnbt--bg-cl-def: hsl(var(--glnbt--primary-h), var(--glnbt--primary-s), var(--glnbt--primary-l));

    --glnbt--lb-cl-hov: hsl(var(--glnbt--default-bg-h), var(--glnbt--default-bg-s), var(--glnbt--default-bg-l));
    --glnbt--bg-cl-hov: hsl(var(--glnbt--primary-h), var(--glnbt--primary-s), calc(var(--glnbt--primary-l) - 10%));

    --glnbt--bg-cl-dis: hsla(var(--glnbt--default-h), var(--glnbt--default-s), var(--glnbt--default-l), 0.12); // rgba(0, 0, 0, 0.12);
  }

  // Exterior: "outlined"
  &[ext-o]>[glnbt-btn] {
    border-width: 1px;
    border-style: solid;
  }
  &[ext-o] {
    --glnbt--lb-cl-def: hsl(var(--glnbt--primary-h), var(--glnbt--primary-s), var(--glnbt--primary-l));
    --glnbt--br-cl-def: hsla(var(--glnbt--primary-h), var(--glnbt--primary-s), var(--glnbt--primary-l), 0.75);

    --glnbt--lb-cl-hov: hsl(var(--glnbt--primary-h), var(--glnbt--primary-s), var(--glnbt--primary-l));
    --glnbt--br-cl-hov: hsl(var(--glnbt--primary-h), var(--glnbt--primary-s), var(--glnbt--primary-l));
    --glnbt--bg-cl-hov: hsla(var(--glnbt--primary-h), var(--glnbt--primary-s), var(--glnbt--primary-l), 0.10);

    --glnbt--br-cl-dis: hsla(var(--glnbt--default-h), var(--glnbt--default-s), var(--glnbt--default-l), 0.25); // rgba(0, 0, 0, 0.12);
    }

  // Exterior: "text"
  &[ext-t] {
    --glnbt--lb-cl-def: hsl(var(--glnbt--primary-h), var(--glnbt--primary-s), var(--glnbt--primary-l));

    --glnbt--lb-cl-hov: hsl(var(--glnbt--primary-h), var(--glnbt--primary-s), var(--glnbt--primary-l));
    --glnbt--bg-cl-hov: hsla(var(--glnbt--primary-h), var(--glnbt--primary-s), var(--glnbt--primary-l), 0.10);
    }

  // Definition of internal variables by element state.
  &:not([dis])>[glnbt-btn] {
    // The state without disabled, hover, focused.
    &:not(:hover):not(:focus):not(:focus-within):not([foc]) {
      --glnbt--label-cl: var(--glnbt-def-lb-cl, var(--glnbt--lb-cl-def));
      --glnbt--border-cl: var(--glnbt-def-br-cl, var(--glnbt--br-cl-def));
      --glnbt--bground-cl: var(--glnbt-def-bg-cl, var(--glnbt--bg-cl-def));
    } // The state without disabled and with hover or with hover, focused.
    &:hover, &:hover:focus, &:hover:focus-within, &:hover[foc] {
      --glnbt--label-cl: var(--glnbt-hov-lb-cl, var(--glnbt--lb-cl-hov));
      --glnbt--border-cl: var(--glnbt-hov-br-cl, var(--glnbt--br-cl-hov));
      --glnbt--bground-cl: var(--glnbt-hov-bg-cl, var(--glnbt--bg-cl-hov));
    }
    &:focus, &:focus-within, &[foc] {
      --glnbt--label-cl: var(--glnbt-foc-lb-cl, var(--glnbt-def-lb-cl, var(--glnbt--lb-cl-def)));
      --glnbt--border-cl: var(--glnbt-foc-br-cl, var(--glnbt-def-br-cl, var(--glnbt--br-cl-def)));
      --glnbt--bground-cl: var(--glnbt-foc-bg-cl, var(--glnbt-def-bg-cl, var(--glnbt--bg-cl-def)));
    }
  } // The state with disabled.
  &[dis]>[glnbt-btn] {
    --glnbt--label-cl: var(--glnbt-dis-lb-cl, hsla(var(--glnbt--default-h), var(--glnbt--default-s), var(--glnbt--default-l), 0.35));
    --glnbt--border-cl: var(--glnbt-dis-br-cl, var(--glnbt--br-cl-dis));
    --glnbt--bground-cl: var(--glnbt-dis-bg-cl, var(--glnbt--bg-cl-dis));
  }

  // Define styles for all exteriors.
  &>[glnbt-btn] {
    color           : var(--glnbt--label-cl);
    border-color    : var(--glnbt--border-cl);
    background-color: var(--glnbt--bground-cl);
  }

  // ** Additional settings **

  // To block the display of the button name in uppercase, you must specify "--glnbt-uppercase: none;".
  &>[glnbt-btn] {
    &>span, &>a {
      text-transform: var(--glnbt-uppercase, uppercase);
    }
  }

  // Vertical offset.
  &>[glnbt-btn] {
    &>a:not([glnbt-mr-ver]) {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    &>[glnbt-mr-ver] {
      display: flex;
      align-items: center;
      justify-content: center;
    }
  }

  // Ornament "padding".
  &>[glnbt-btn] {
    &>[gln-orn-rg] {
      order: 1;
    }

    &>[gln-orn-lf]~[glnbt-pd-hor],
    &>[gln-orn-lf]~a {
      --glnbt--orn-lf: 0;
    }
    &>[gln-orn-rg]~[glnbt-pd-hor],
    &>[gln-orn-rg]~a {
      --glnbt--orn-rg: 0;
    }
    &>[glnbt-pd-hor], a {
      padding-left: var(--glnbt--orn-lf, var(--glnbt-pd-lf, var(--glnbtf--pd-lf, var(--def-lb-pd-lf))));
      padding-right: var(--glnbt--orn-rg, var(--glnbt-pd-rg, var(--glnbtf--pd-rg, var(--def-lb-pd-lf))));
    }
  }

}
