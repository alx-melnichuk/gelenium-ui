/*# sourceURL=gln-select.component.scss */

@import '../_styles/mx-display-inline-flex.scss';
@import '../_styles/mx-flex-direction.scss';

gln-select {
  --glnsl--default-h: var(--glncl-default-h, var(--gln-default-h));
  --glnsl--default-s: var(--glncl-default-s, var(--gln-default-s));

  --glnsl--primary-h: var(--glncl-primary-h, var(--gln-primary-h));
  --glnsl--primary-s: var(--glncl-primary-s, var(--gln-primary-s));

  --glnsl--danger-h: var(--glncl-danger-h, var(--gln-danger-h));
  --glnsl--danger-s: var(--glncl-danger-s, var(--gln-danger-s));

  @include mxDisplayInlineFlex();
  @include mxFlexDirection(column);
  min-width: var(--glnsl-min-width, 50px);

  &[wdFull] {
    width: 100%;
  }

  // Element "Frame".
  gln-frame {
    &:focus-visible {
      outline: none;
    }
    &:not([opn]):not([dis]) {
      cursor: pointer;
    }

    // Element "gln-frame - glnsl-rhomb".
    // hsl(250,  2%, 46%); rgba(0, 0, 0, 0.54);
    // hsl(250,  2%, 74%); rgba(0, 0, 0, 0.26);
    // hsl(215, 80%, 50%); #1976d2;
    // hsl(  0, 65%, 51%); #d32f2f; rgb(211, 47, 47);

    &:not([dis]) {
      &:not([err]) { // The state without disabled, error, hover, focused.
        &:not(:hover):not(:focus-within):not([foc]) {
          --glnsl-rhomb-cl: var(--glnsl-def-rhomb, hsl(var(--glnsl--primary-h), var(--glnsl--primary-s), 45%));
        } // The state without disabled, error, focused and with hover.
        &:hover:not(:focus-within):not([foc]) {
          --glnsl-rhomb-cl: var(--glnsl-hov-rhomb, hsl(var(--glnsl--primary-h), var(--glnsl--primary-s), 40%));
        } // The state without disabled, error and with focused.
        &:focus-within, &[foc] {
          --glnsl-rhomb-cl: var(--glnsl-foc-rhomb, hsl(var(--glnsl--primary-h), var(--glnsl--primary-s), 50%));
        }
      }
      &[err] {// The state without disabled, hover, focused and error.
        &:not(:hover):not(:focus-within):not([foc]) {
          --glnsl-rhomb-cl: var(--glnsl-def-err-rhomb, hsl(var(--glnsl--danger-h), var(--glnsl--danger-s), 45%));
        } // The state without disabled, focused and with hover.
        &:hover:not(:focus-within):not([foc]) {
          --glnsl-rhomb-cl: var(--glnsl-hov-err-rhomb, hsl(var(--glnsl--danger-h), var(--glnsl--danger-s), 40%));
        } // The state without disabled and with focused.
        &:focus-within, &[foc] {
          --glnsl-rhomb-cl: var(--glnsl-foc-err-rhomb, hsl(var(--glnsl--danger-h), var(--glnsl--danger-s), 50%));
        }
      }
    } // The state with disabled.
    &[dis] {
      --glnsl-rhomb-cl: var(--glnsl-dis-rhomb, hsl(var(--glnsl--default-h), var(--glnsl--default-s), 60%));
    }
  }

  // Element "gln-frame - div.glnsl-rhomb".
  gln-frame>div>[glnfr-orn-rg]>[glnsl-rhomb] {
    align-items: center;
    color: var(--glnsl-rhomb-cl);
    display: flex;
    height: 1em;
    user-select: none;
    &::after {
      border-left: 5px solid transparent;
      border-right: 5px solid transparent;
      border-top: 5px solid;
      content: ' ';
      height: 0;
      margin: 0 0.375em; // 0 6px
      width: 0;
    }
    &:not([noAnm])::after {
      transition: transform 0.3s linear 0ms;
    }
    &[opn]::after {
      transform: rotate(180deg);
    }
  }
  gln-frame:not([ext-s])>div>[glnfr-orn-rg]>[glnsl-rhomb] {
    padding-right: 0.375em; // 6px
  }

  // Element "Frame - glnfr-elem".
  gln-frame>div>[glnfr-elem] {
    background: none;
    border: 0;
    color: currentColor;
    display: block;
    -webkit-tap-highlight-color: transparent;
    min-width: 0;
    overflow: hidden;
    text-overflow: ellipsis;
    user-select: none;
    white-space: nowrap;
  }

  // Element "gln-frame - div.glnsl-placeholder".
  gln-frame>div>[glnfr-elem]>[glnsl-plc-hld] {
    color: var(--glnsl-plc-hld, hsl(var(--glnsl--default-h), var(--glnsl--default-s), 55%));
    overflow: hidden;
    text-overflow: ellipsis;
  }

  // Element "gln-hint-or-error"
  gln-hint-or-error {
    padding-left: var(--glnsl-he-pd-lf, var(--glnfrs--pd-lf));
    padding-right: var(--glnsl-he-pd-rg, var(--glnfrs--pd-rg));
  }
}

// Element "gln-select-panel-wrap"
.gln-select-panel-wrap {
  --glnsl--default-h: var(--glncl-default-h, var(--gln-default-h));
  --glnsl--default-s: var(--glncl-default-s, var(--gln-default-s));
  --glnsl--default-l: var(--glncl-default-l, var(--gln-default-l));
  --glnsl--default-cl: hsl(var(--glnsl--default-h),var(--glnsl--default-s),var(--glnsl--default-l));

  --glnsl--default-bg-h: var(--glncl-default-bg-h, var(--gln-default-bg-h));
  --glnsl--default-bg-s: var(--glncl-default-bg-s, var(--gln-default-bg-s));
  --glnsl--default-bg-l: var(--glncl-default-bg-l, var(--gln-default-bg-l));
  --glnsl--default-bg-cl: hsl(var(--glnsl--default-bg-h), var(--glnsl--default-bg-s), var(--glnsl--default-bg-l));

  background-color: var(--glnslpw-def-bg-cl, var(--glnsl--default-bg-cl));
  color: var(--glnslpw-def-cl, var(--glnsl--default-cl)); // hsla(0, 0%, 0%, 0.87);
  flex-basis: 100%;
  font-size: inherit; // 16px
  max-width: inherit;
  text-align: start;
  
  &:not([noAnm]) {
    opacity: 0;
    &[is-show]:not([is-hide]) {
      animation: kf-sl-show-panel 200ms cubic-bezier(0.2, 0, 0.2, 1) 0ms;
      opacity: 1;
    }
    &:not([is-show])[is-hide] {
      animation: kf-sl-hide-panel 200ms linear 0ms;
      opacity: 0;
    }
  }

  @keyframes kf-sl-show-panel {
    0% {
      opacity: 0;
      transform: translateY(var(--glnslpo--translate-y, 0px)) scale(0.6);
    }
    100% {
      opacity: 1;
      transform: none;
    }
  }

  @keyframes kf-sl-hide-panel {
    0% {
      opacity: 1;
      transform: none;
    }
    100% {
      opacity: 0;
      transform: translateY(var(--glnslpo--translate-y, 0px)) scale(0.6);
    }
  }
}

.cdk-overlay-container {
  // Element "gln-select-panel" Overlay
  .gln-select-panel {
    border-radius: var(--glnslpo-border-radius, var(--glnslpo--border-radius, unset));
    box-sizing: border-box;
    max-height: var(--glnslpo-max-height, var(--glnslpo--max-height, 80vh));
    max-width: var(--glnslpo-max-width, var(--glnslpo--max-width, unset));
    min-height: 16px;
    min-width: var(--glnslpo-min-width, var(--glnslpo--width));
    overflow: auto;
    outline: 0;
    -webkit-overflow-scrolling: touch;
    // To block the display of a shadow, you must specify "--glnslpo-elevation: none;".
    box-shadow: var(--glnslpo-elevation, (rgb(0 0 0 / 20%) 0px 5px 5px -3px, rgb(0 0 0 / 14%) 0px 8px 10px 1px, rgb(0 0 0 / 12%) 0px 3px 14px 2px));
  }
}
