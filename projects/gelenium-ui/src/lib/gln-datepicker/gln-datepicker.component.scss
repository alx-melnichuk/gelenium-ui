/*# sourceURL=gln-datepicker.component.scss */

gln-datepicker {
  --glndp--default-h: var(--glncl-default-h, var(--gln-default-h));
  --glndp--default-s: var(--glncl-default-s, var(--gln-default-s));

  --glndp--primary-h: var(--glncl-primary-h, var(--gln-primary-h));
  --glndp--primary-s: var(--glncl-primary-s, var(--gln-primary-s));

  --glndp--danger-h: var(--glncl-danger-h, var(--gln-danger-h));
  --glndp--danger-s: var(--glncl-danger-s, var(--gln-danger-s));

  display: inline-flex;
  flex-direction: column;
  min-width: var(--glndp-min-width, 220px);

  &[wdFull] {
    width: 100%;
  }

  &[noHeEllipsis] {
    gln-hint-or-error {
      white-space: normal;
      overflow: visible;
      text-overflow: clip;
    }  
  }

  // Element "Frame".
  gln-frame {
    &:focus-visible {
      outline: none;
    }
    &:not([opn]):not([dis]) {
      cursor: text;
    }

    // Element "gln-frame - glndp-sticker".
    &:not([dis]) {
      &:not([err]) { // The state without disabled, error, hover, focused.
        &:not(:hover):not(:focus-within):not([foc]) {
          --glndp-sticker-cl: var(--glndp-def-sticker, hsl(var(--glndp--primary-h), var(--glndp--primary-s), 45%));
        } // The state without disabled, error, focused and with hover.
        &:hover:not(:focus-within):not([foc]) {
          --glndp-sticker-cl: var(--glndp-hov-sticker, hsl(var(--glndp--primary-h), var(--glndp--primary-s), 40%));
        } // The state without disabled, error and with focused.
        &:focus-within, &[foc] {
          --glndp-sticker-cl: var(--glndp-foc-sticker, hsl(var(--glndp--primary-h), var(--glndp--primary-s), 50%));
        }
        --glndp-sticker-bg: var(--glndp-hov-bg-sticker, hsla(var(--glndp--primary-h), var(--glndp--primary-s), 50%, 0.15));
      }
      &[err] {// The state without disabled, hover, focused and error.
        &:not(:hover):not(:focus-within):not([foc]) {
          --glndp-sticker-cl: var(--glndp-def-err-sticker, hsl(var(--glndp--danger-h), var(--glndp--danger-s), 45%));
        } // The state without disabled, focused and with hover.
        &:hover:not(:focus-within):not([foc]) {
          --glndp-sticker-cl: var(--glndp-hov-err-sticker, hsl(var(--glndp--danger-h), var(--glndp--danger-s), 40%));
        } // The state without disabled and with focused.
        &:focus-within, &[foc] {
          --glndp-sticker-cl: var(--glndp-foc-err-sticker, hsl(var(--glndp--danger-h), var(--glndp--danger-s), 50%));
        }
      }
    } // The state with disabled.
    &[dis] {
      --glndp-sticker-cl: var(--glndp-dis-sticker, hsl(var(--glndp--default-h), var(--glndp--default-s), 60%));
    }
  }

  // Element "gln-frame - div.glndp-sticker-box".
  gln-frame>div>[glndp-sticker-box] {
    align-items: center;
    color: var(--glndp-sticker-cl);
    display: flex;
    height: 1em;
    position: relative;
    user-select: none;
    white-space: nowrap;

    // &:not([noAnm])::after {
    //   transition: transform 0.3s linear 0ms;
    // }
    // &[opn]::after {
    //   transform: rotate(180deg);
    // }
  }
  gln-frame:not([ext-s])>div>[glndp-sticker-box] {
    padding-right: 0.25em; // 4px
  }

  button[glndp-btn] {
    align-items: center;
    border: 0;
    border-radius: 50%;
    cursor: pointer;
    display: inline-flex;
    flex: 0 0 auto;
    font-size: 1em;
    justify-content: center;
    outline: 0;
    overflow: visible;
    text-decoration: none;
    user-select: none;
    vertical-align: middle;
  }

  button[glndp-btn-trait] {
    background-color: transparent;
    color: inherit; // color: rgba(0, 0, 0, 0.54);
    padding: 0.5em;
    // transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    &:hover {
      background-color: var(--glndp-sticker-bg); // rgba(0, 0, 0, 0.04);
    }
  }
  button>[glndp-sticker] {
    display: inline-block;
    fill: currentColor;
    flex-shrink: 0;
    height: 1.5em;
    width: 1.5em;
    // transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    user-select: none;
  }
  
  // The style sets the line height: 1.4375em;
  // This allows you to automatically change the padding when the font size changes.
  // Element "Frame - glnfr-elem".
  gln-frame>div>input[glnfr-elem] {
    color: inherit;
    border: 0;
    background: none;
    letter-spacing: inherit;

    &:focus {
      outline: 0;
    }
  }


  // Element "gln-hint-or-error"
  gln-hint-or-error {
    padding-left: var(--glndp-he-pd-lf, var(--glnfrs--pd-lf));
    padding-right: var(--glndp-he-pd-rg, var(--glnfrs--pd-rg));
  }
}

.cdk-overlay-pane[glndppo-datepicker] {
  &.glndp-bottom {
    --glndp---trnsl-y: -60%;
  }
  &.glndp-top {
    --glndp---trnsl-y: 60%;
  }
  &.glndp-left {
    --glndp---trnsl-x: 40%;
  }
  &.glndp-right {
    --glndp---trnsl-x: -40%;
  }
}

.cdk-overlay-container {
  // Element "gln-datepicker-panel-wrap"
  .gln-datepicker-panel-wrap {
    --glnsl--default-h: var(--glncl-default-h, var(--gln-default-h));
    --glnsl--default-s: var(--glncl-default-s, var(--gln-default-s));
    --glnsl--default-l: var(--glncl-default-l, var(--gln-default-l));
    --glnsl--default-cl: hsl(var(--glnsl--default-h),var(--glnsl--default-s),var(--glnsl--default-l));

    --glnsl--default-bg-h: var(--glncl-default-bg-h, var(--gln-default-bg-h));
    --glnsl--default-bg-s: var(--glncl-default-bg-s, var(--gln-default-bg-s));
    --glnsl--default-bg-l: var(--glncl-default-bg-l, var(--gln-default-bg-l));
    --glnsl--default-bg-cl: hsl(var(--glnsl--default-bg-h), var(--glnsl--default-bg-s), var(--glnsl--default-bg-l));

    background-color: var(--glnslpw-def-bg-cl, var(--glnsl--default-bg-cl));
    color: var(--glnslpw-def-cl, var(--glnsl--default-cl)); // hsla(0, 0%, 0%, 0.87);
    flex-basis: 100%;
    font-size: inherit; // 16px
    max-width: inherit;
    text-align: start;
    
    &:not([noAnm]) {
      opacity: 0;
      &[is-show]:not([is-hide]) {
        animation: kf-sl-show-panel 200ms cubic-bezier(0.2, 0, 0.2, 1) 0ms;
        opacity: 1;
      }
      &:not([is-show])[is-hide] {
        animation: kf-sl-hide-panel 200ms linear 0ms;
        opacity: 0;
      }
    }

    @keyframes kf-sl-show-panel {
      0% {
        opacity: 0;
        // transform: translateY(var(--glnslpo--translate-y, 0px)) scale(0.6);
        transform: translate(var(--glndp---trnsl-x, 0px), var(--glndp---trnsl-y, 0px)) scale(0.3);
      }
      100% {
        opacity: 1;
        transform: none;
      }
    }

    @keyframes kf-sl-hide-panel {
      0% {
        opacity: 1;
        transform: none;
      }
      100% {
        opacity: 0;
        // transform: translateY(var(--glnslpo--translate-y, 0px)) scale(0.6);
        transform: translate(var(--glndp---trnsl-x, 0px), var(--glndp---trnsl-y, 0px)) scale(0.3);
      }
    }
  }
}

.cdk-overlay-container {
  // Element "gln-datepicker-panel" Overlay
  .gln-datepicker-panel {
    border-radius: var(--glnslpo-border-radius, var(--glndppo--border-radius, unset));
    box-sizing: border-box;
    max-height: var(--glnslpo-max-height, unset); // var(--glnslpo-max-height, var(--glnslpo--max-height, 80vh));
    max-width: var(--glnslpo-max-width, unset); // var(--glnslpo-max-width, var(--glndppo--max-width, unset));
    min-height: 16px;
    min-width: var(--glnslpo-min-width, unset); // var(--glnslpo-min-width, var(--glndppo--width));
    overflow: auto;
    outline: 0;
    // To block the display of a shadow, you must specify "--glnslpo-elevation: none;".
    box-shadow: var(--glnslpo-elevation, (rgb(0 0 0 / 20%) 0px 5px 5px -3px, rgb(0 0 0 / 14%) 0px 8px 10px 1px, rgb(0 0 0 / 12%) 0px 3px 14px 2px));
  }
}
